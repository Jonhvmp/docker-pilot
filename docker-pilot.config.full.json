{
  "$schema": "https://json-schema.org/draft-07/schema#",
  "title": "Docker Pilot Configuration",
  "description": "Comprehensive configuration example for Docker Pilot",

  "projectName": "my-awesome-app",
  "dockerCompose": "docker compose",
  "configVersion": "1.0",

  "services": {
    "web": {
      "port": 3000,
      "path": "/app",
      "description": "Frontend React application",
      "healthCheck": true,
      "backupEnabled": false,
      "environment": {
        "NODE_ENV": "development",
        "PORT": "3000",
        "API_URL": "http://api:4000"
      },
      "volumes": [
        "./web:/app",
        "/app/node_modules"
      ],
      "depends_on": ["api", "database"],
      "networks": ["app-network"],
      "restart": "unless-stopped",
      "scale": 1,
      "cpu_limit": "1",
      "memory_limit": "512m",
      "build": {
        "context": "./web",
        "dockerfile": "Dockerfile.dev",
        "args": {
          "NODE_VERSION": "18"
        },
        "target": "development"
      }
    },

    "api": {
      "port": 4000,
      "path": "/api",
      "description": "Backend Node.js API",
      "healthCheck": true,
      "backupEnabled": true,
      "environment": {
        "NODE_ENV": "development",
        "PORT": "4000",
        "DATABASE_URL": "postgresql://user:pass@database:5432/myapp",
        "JWT_SECRET": "your-secret-key",
        "REDIS_URL": "redis://redis:6379"
      },
      "volumes": [
        "./api:/app",
        "/app/node_modules"
      ],
      "depends_on": ["database", "redis"],
      "networks": ["app-network"],
      "restart": "unless-stopped",
      "scale": 2,
      "cpu_limit": "2",
      "memory_limit": "1g"
    },

    "database": {
      "port": 5432,
      "description": "PostgreSQL database",
      "healthCheck": true,
      "backupEnabled": true,
      "environment": {
        "POSTGRES_DB": "myapp",
        "POSTGRES_USER": "user",
        "POSTGRES_PASSWORD": "pass",
        "PGDATA": "/var/lib/postgresql/data/pgdata"
      },
      "volumes": [
        "db-data:/var/lib/postgresql/data",
        "./database/init:/docker-entrypoint-initdb.d"
      ],
      "networks": ["app-network"],
      "restart": "unless-stopped",
      "scale": 1,
      "memory_limit": "512m"
    },

    "redis": {
      "port": 6379,
      "description": "Redis cache and session store",
      "healthCheck": true,
      "backupEnabled": false,
      "environment": {
        "REDIS_PASSWORD": "redis-secret"
      },
      "volumes": [
        "redis-data:/data"
      ],
      "networks": ["app-network"],
      "restart": "unless-stopped",
      "scale": 1,
      "memory_limit": "256m"
    },

    "nginx": {
      "port": 80,
      "description": "Nginx reverse proxy and load balancer",
      "healthCheck": true,
      "backupEnabled": false,
      "volumes": [
        "./nginx/nginx.conf:/etc/nginx/nginx.conf",
        "./nginx/ssl:/etc/nginx/ssl"
      ],
      "depends_on": ["web", "api"],
      "networks": ["app-network"],
      "restart": "unless-stopped",
      "scale": 1,
      "memory_limit": "128m"
    }
  },

  "plugins": [
    "@docker-pilot/backup-plugin",
    "@docker-pilot/monitoring-plugin",
    "./plugins/custom-deployment.js"
  ],

  "cli": {
    "version": "1.0.0",
    "welcomeMessage": "Welcome to {projectName} Docker Pilot v{version}! ðŸš€",
    "goodbyeMessage": "Thanks for using {projectName} Docker Pilot! ðŸ‘‹",
    "interactiveMode": true,
    "colorOutput": true,
    "verboseLogging": false,
    "confirmDestructiveActions": true
  },

  "backup": {
    "enabled": true,
    "schedule": "0 2 * * *",
    "retention": 14,
    "compression": true,
    "location": "./backups",
    "services": ["database", "api"],
    "excludePatterns": [
      "node_modules",
      "*.log",
      "tmp/*"
    ],
    "storage": {
      "type": "local",
      "config": {
        "path": "./backups"
      }
    }
  },

  "monitoring": {
    "enabled": true,
    "interval": 30,
    "healthChecks": true,
    "notifications": {
      "enabled": true,
      "channels": ["email", "slack"],
      "email": {
        "to": ["admin@example.com"],
        "smtp": {
          "host": "smtp.example.com",
          "port": 587,
          "secure": false
        }
      },
      "slack": {
        "webhook": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"
      }
    },
    "metrics": {
      "cpu": true,
      "memory": true,
      "disk": true,
      "network": true
    },
    "alerts": {
      "cpu_threshold": 80,
      "memory_threshold": 85,
      "disk_threshold": 90,
      "response_time_threshold": 5000
    }
  },

  "development": {
    "hotReload": true,
    "debugMode": true,
    "logLevel": "debug",
    "autoMigrate": true,
    "seedData": true,
    "testMode": false,
    "watchFiles": [
      "src/**/*.js",
      "src/**/*.ts",
      "config/**/*.json"
    ],
    "environment": "development",
    "proxy": {
      "enabled": true,
      "port": 8080,
      "routes": {
        "/api/*": "http://api:4000",
        "/*": "http://web:3000"
      }
    }
  },

  "networks": {
    "app-network": {
      "driver": "bridge",
      "external": false,
      "ipam": {
        "driver": "default",
        "config": [
          {
            "subnet": "172.20.0.0/16",
            "gateway": "172.20.0.1"
          }
        ]
      }
    },
    "monitoring-network": {
      "driver": "bridge",
      "external": false
    }
  },

  "volumes": {
    "db-data": {
      "driver": "local",
      "external": false
    },
    "redis-data": {
      "driver": "local",
      "external": false
    },
    "app-uploads": {
      "driver": "local",
      "external": false,
      "driver_opts": {
        "type": "bind",
        "device": "./uploads"
      }
    }
  },

  "security": {
    "scanImages": true,
    "allowPrivileged": false,
    "networkPolicies": true,
    "secretsManagement": {
      "provider": "docker-secrets",
      "autoRotate": false
    }
  },

  "performance": {
    "resourceLimits": true,
    "cachingEnabled": true,
    "compressionEnabled": true,
    "optimizeImages": true
  },

  "deployment": {
    "strategy": "rolling",
    "environments": {
      "staging": {
        "compose_file": "docker-compose.staging.yml",
        "env_file": ".env.staging"
      },
      "production": {
        "compose_file": "docker-compose.prod.yml",
        "env_file": ".env.production"
      }
    }
  }
}
