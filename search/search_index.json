{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Docker Pilot","text":"Advanced Docker Compose management tool with interactive CLI, multi-language support, and plugin system"},{"location":"#what-is-docker-pilot","title":"What is Docker Pilot?","text":"<p>Docker Pilot is a powerful command-line interface (CLI) tool designed to simplify and enhance your Docker Compose workflow. Whether you're a beginner learning Docker or an experienced developer managing complex multi-container applications, Docker Pilot provides an intuitive interface with advanced features.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Interactive Menu: User-friendly interactive interface for all operations</li> <li>Multi-language Support: Available in English and Portuguese (Brasil)</li> <li>Plugin System: Extensible architecture with custom plugins</li> <li>Smart Commands: Intelligent Docker Compose command management</li> <li>Real-time Monitoring: Live service status and log monitoring</li> <li>Advanced Configuration: Flexible configuration system</li> <li>Beautiful CLI: Colored output with intuitive feedback</li> <li>Service Management: Individual service control and scaling</li> <li>Health Checks: Built-in service health monitoring</li> <li>Cleanup Tools: Smart resource cleanup and optimization</li> </ul>"},{"location":"#why-choose-docker-pilot","title":"Why Choose Docker Pilot?","text":"Traditional Docker Compose Docker Pilot <code>docker-compose up -d</code> Interactive service selection or <code>docker-pilot up</code> <code>docker-compose logs -f service</code> <code>docker-pilot logs service --follow</code> with smart formatting Complex configuration files Guided setup with validation Manual service management Automated health checks and monitoring English only Multi-language support Basic error messages Detailed, contextual feedback"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"npmyarnpnpm <pre><code>npm install -g docker-pilot\n</code></pre> <pre><code>yarn global add docker-pilot\n</code></pre> <pre><code>pnpm add -g docker-pilot\n</code></pre>"},{"location":"#first-run","title":"First Run","text":"<ol> <li>Navigate to your Docker Compose project:</li> </ol> <pre><code>cd your-docker-project\n</code></pre> <ol> <li>Start Docker Pilot:</li> </ol> <pre><code>docker-pilot\n</code></pre> <ol> <li>Choose your language (first run only)</li> <li>Use the interactive menu or CLI commands</li> </ol>"},{"location":"#example-usage","title":"Example Usage","text":"<pre><code># Interactive mode (default)\ndocker-pilot\n\n# Start all services\ndocker-pilot up\n\n# View service status\ndocker-pilot status\n\n# Monitor logs in real-time\ndocker-pilot logs --follow\n\n# Open shell in a service\ndocker-pilot shell web\n\n# Scale services\ndocker-pilot scale web=3 api=2\n</code></pre>"},{"location":"#features-overview","title":"\ud83c\udf1f Features Overview","text":""},{"location":"#interactive-menu-system","title":"Interactive Menu System","text":"<p>The interactive menu provides a intuitive way to manage your Docker environment:</p> <ul> <li>Quick Setup: Auto-detect and configure services</li> <li>Service Management: Start, stop, restart individual or all services</li> <li>Real-time Monitoring: Live status updates and log streaming</li> <li>Advanced Operations: Shell access, scaling, health checks</li> <li>Maintenance Tools: Cleanup, updates, and optimization</li> </ul>"},{"location":"#multi-language-support","title":"Multi-language Support","text":"<p>Docker Pilot supports multiple languages with automatic detection:</p> <ul> <li>English: Full support with comprehensive documentation</li> <li>Portuguese (Brasil): Complete translation including CLI and interactive menu</li> <li>Automatic Detection: Uses system language or manual selection</li> <li>Runtime Switching: Change language anytime in settings</li> </ul>"},{"location":"#plugin-system","title":"Plugin System","text":"<p>Extend Docker Pilot functionality with plugins:</p> <ul> <li>Custom Commands: Add your own commands</li> <li>Hooks System: React to Docker Pilot events</li> <li>Service Integration: Integrate with external services</li> <li>Configuration: Flexible plugin configuration</li> </ul>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"<p>This documentation is organized into several sections:</p> <ul> <li>Getting Started: Installation, setup, and first steps</li> <li>User Guide: Detailed usage instructions and features</li> <li>Advanced: Plugin development and advanced configurations</li> <li>Examples: Real-world examples and use cases</li> <li>API Reference: Complete API documentation</li> <li>Development: Contributing and development guide</li> </ul>"},{"location":"#community","title":"\ud83e\udd1d Community","text":"<ul> <li>GitHub: docker-pilot repository</li> <li>Issues: Report bugs or request features</li> <li>Discussions: Community discussions</li> <li>Contributing: How to contribute</li> </ul>"},{"location":"#license","title":"License","text":"<p>Docker Pilot is released under the ISC License.</p> <p>Ready to pilot your Docker containers? Let's get started!</p> <p>Get Started \u2192 View Examples \u2192</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to Docker Pilot are documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Complete documentation with MkDocs</li> <li>Multi-language documentation support</li> <li>Interactive examples and tutorials</li> <li>Plugin development guides</li> <li>API reference documentation</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Improved documentation structure</li> <li>Enhanced getting started experience</li> <li>Better code examples</li> </ul>"},{"location":"changelog/#202-2025-06-22","title":"[2.0.2] - 2025-06-22","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>\ud83d\udcc4 Enhanced Docker Compose File Management</li> <li>New <code>compose</code> command with comprehensive subcommands (<code>list</code>, <code>find</code>, <code>analyze</code>, <code>validate</code>, <code>services</code>)</li> <li>Recursive docker-compose file discovery with configurable depth (up to 6 levels by default)</li> <li>Smart file prioritization (main files, root directory preference, file size, modification date)</li> <li>Environment variant detection (dev, prod, test, staging)</li> <li>Detailed file analysis with service count, dependencies, and configuration details</li> <li> <p>Real-time file information display (size, modification date, environment type)</p> </li> <li> <p>\ud83c\udfaf Intelligent Project Auto-Detection</p> </li> <li>Automatic scanning of project directory structure on startup</li> <li>Interactive file selection for multi-compose projects</li> <li>Visual indicators for main files (\ud83c\udfaf), directory depth (\ud83d\udcc1\ud83d\udcc2), and file types</li> <li>Support for compose file variants and overrides</li> <li> <p>Enhanced project setup with better user guidance</p> </li> <li> <p>\ud83d\udda5\ufe0f Interactive Menu Improvements</p> </li> <li>New \"Compose Files Management\" category in interactive menu</li> <li>Real-time compose file analysis from menu interface</li> <li>Enhanced file selection with detailed information display</li> <li>Improved navigation with contextual help and file details</li> <li> <p>Better error handling and user feedback</p> </li> <li> <p>\ud83c\udf10 Extended i18n Support</p> </li> <li>Complete translation of all new compose management features</li> <li>Context-aware error messages and help text</li> <li>Localized file information display</li> <li>Multi-language support for technical terms and file analysis</li> </ul>"},{"location":"changelog/#improved","title":"Improved","text":"<ul> <li>FileUtils Enhancement: Upgraded with async methods for better performance</li> <li>Better Error Handling: More descriptive error messages with context</li> <li>Performance Optimization: Efficient file scanning with smart caching</li> <li>Code Organization: Better separation of concerns with dedicated ComposeCommand</li> </ul>"},{"location":"changelog/#technical","title":"Technical","text":"<ul> <li>New <code>ComposeCommand</code> class with proper inheritance from <code>BaseCommand</code></li> <li>Enhanced <code>FileUtils</code> with recursive file discovery methods</li> <li>Improved <code>InteractiveMenu</code> with dynamic compose file integration</li> <li>Updated type definitions for compose file information</li> <li>Comprehensive test coverage for new features</li> </ul>"},{"location":"changelog/#201-2025-06-22","title":"[2.0.1] - 2025-06-22","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>\ud83c\udf0d Multi-language Support (i18n)</li> <li>Complete Portuguese (Brasil) translation</li> <li>Automatic language detection</li> <li>Runtime language switching</li> <li>Language selection on first run</li> <li> <p>Context-aware translations with parameter interpolation</p> </li> <li> <p>\ud83c\udfae Enhanced Interactive Menu</p> </li> <li>Language selection prompt on first run</li> <li>Advanced settings menu with language options</li> <li>Improved navigation and user experience</li> <li> <p>Better error handling and feedback</p> </li> <li> <p>\ud83d\udd0c Plugin System Integration</p> </li> <li>i18n support for plugins</li> <li>Language propagation to all components</li> <li> <p>BasePlugin and PluginManager enhancements</p> </li> <li> <p>\ud83d\udee1\ufe0f Validation System</p> </li> <li>Comprehensive configuration validation</li> <li>i18n validation error messages</li> <li>Business rule validation</li> <li> <p>Docker Compose structure validation</p> </li> <li> <p>\ud83d\udcca Improved Service Management</p> </li> <li>Better service status reporting</li> <li>Enhanced health check integration</li> <li>Priority-based service startup</li> <li>Real-time monitoring improvements</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Breaking: Updated configuration file structure</li> <li>Breaking: Refactored command API for better consistency</li> <li>Enhanced CLI output with better formatting and colors</li> <li>Improved error messages with actionable suggestions</li> <li>Better Docker integration and compatibility</li> <li>More robust file and configuration handling</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Parameter interpolation in i18n messages</li> <li>Service startup order reliability</li> <li>Configuration file validation issues</li> <li>Memory leaks in interactive menu</li> <li>Docker connection handling</li> </ul>"},{"location":"changelog/#technical-improvements","title":"Technical Improvements","text":"<ul> <li>Complete TypeScript integration</li> <li>Enhanced logging system</li> <li>Better error handling patterns</li> <li>Improved test coverage</li> <li>Code documentation and examples</li> </ul>"},{"location":"changelog/#150-2025-05-15","title":"[1.5.0] - 2025-05-15","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>Real-time service monitoring</li> <li>Advanced cleanup commands</li> <li>Health check integration</li> <li>Plugin system foundation</li> <li>Configuration management commands</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Improved interactive menu navigation</li> <li>Better service discovery</li> <li>Enhanced Docker Compose integration</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Service startup reliability</li> <li>Log viewing improvements</li> <li>Configuration file handling</li> </ul>"},{"location":"changelog/#140-2025-04-20","title":"[1.4.0] - 2025-04-20","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>Service scaling commands</li> <li>Shell access to containers</li> <li>Log filtering and search</li> <li>Custom Docker Compose file support</li> </ul>"},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Faster service detection</li> <li>Improved error messages</li> <li>Better resource management</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Container shell access issues</li> <li>Log streaming reliability</li> <li>Service dependency handling</li> </ul>"},{"location":"changelog/#130-2025-03-18","title":"[1.3.0] - 2025-03-18","text":""},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>Interactive shell command</li> <li>Service-specific operations</li> <li>Advanced logging features</li> <li>Configuration validation</li> </ul>"},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Enhanced CLI interface</li> <li>Better command organization</li> <li>Improved help system</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Docker daemon connection issues</li> <li>Service status reporting</li> <li>Configuration file parsing</li> </ul>"},{"location":"changelog/#120-2025-02-14","title":"[1.2.0] - 2025-02-14","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>Service health monitoring</li> <li>Backup and restore commands</li> <li>Development mode features</li> <li>Custom environment support</li> </ul>"},{"location":"changelog/#changed_5","title":"Changed","text":"<ul> <li>Streamlined command structure</li> <li>Better Docker integration</li> <li>Enhanced error handling</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Memory usage optimizations</li> <li>Service restart reliability</li> <li>Configuration migration issues</li> </ul>"},{"location":"changelog/#110-2025-01-10","title":"[1.1.0] - 2025-01-10","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Command line interface</li> <li>Service management commands</li> <li>Configuration system</li> <li>Basic plugin support</li> </ul>"},{"location":"changelog/#changed_6","title":"Changed","text":"<ul> <li>Improved interactive experience</li> <li>Better service detection</li> <li>Enhanced Docker Compose support</li> </ul>"},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Initial setup issues</li> <li>Service dependency resolution</li> <li>Configuration file generation</li> </ul>"},{"location":"changelog/#100-2024-12-15","title":"[1.0.0] - 2024-12-15","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>\ud83c\udf89 Initial Release</li> <li>Interactive menu system</li> <li>Basic Docker Compose management</li> <li>Service start/stop/restart</li> <li>Log viewing</li> <li>Service status monitoring</li> <li>Configuration file management</li> <li>Cross-platform support (Windows, macOS, Linux)</li> </ul>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Interactive Menu: User-friendly interface for Docker management</li> <li>Service Management: Easy start, stop, restart of Docker services</li> <li>Log Viewing: Real-time and historical log access</li> <li>Status Monitoring: Live service status and health checks</li> <li>Configuration: Automatic detection and setup</li> <li>Cross-platform: Works on Windows, macOS, and Linux</li> </ul>"},{"location":"changelog/#version-history-summary","title":"Version History Summary","text":"Version Release Date Key Features 2.0.1 2025-06-22 Multi-language support, enhanced plugins, validation 1.5.0 2025-05-15 Real-time monitoring, advanced cleanup, health checks 1.4.0 2025-04-20 Service scaling, shell access, log filtering 1.3.0 2025-03-18 Interactive shell, service operations, validation 1.2.0 2025-02-14 Health monitoring, backup/restore, development mode 1.1.0 2025-01-10 CLI interface, service management, configuration 1.0.0 2024-12-15 Initial release, interactive menu, basic features"},{"location":"changelog/#breaking-changes","title":"Breaking Changes","text":""},{"location":"changelog/#v200","title":"v2.0.0","text":"<ul> <li>Configuration file structure changed to support new features</li> <li>Command API updated for better consistency</li> <li>Plugin interface enhanced with i18n support</li> <li>Environment variables for configuration changed</li> </ul>"},{"location":"changelog/#migration-guide-v1x-v200","title":"Migration Guide v1.x \u2192 v2.0.0","text":""},{"location":"changelog/#configuration-file","title":"Configuration File","text":"<p>Old configuration files are automatically migrated on first run. If you have custom configurations:</p> <pre><code># Backup your config\ncp docker-pilot.config.json docker-pilot.config.json.backup\n\n# Run migration\ndocker-pilot config --migrate\n\n# Or reset and reconfigure\ndocker-pilot config --reset\n</code></pre>"},{"location":"changelog/#plugin-development","title":"Plugin Development","text":"<p>If you have custom plugins, update them to use the new i18n system:</p> <pre><code>// Old way\nconsole.log('Plugin executed');\n\n// New way\nconsole.log(this.i18n.t('plugin.executed'));\n</code></pre>"},{"location":"changelog/#environment-variables","title":"Environment Variables","text":"<p>Some environment variables changed:</p> <pre><code># Old\nexport DOCKER_PILOT_CONFIG_PATH=/path/to/config\n\n# New\nexport DOCKER_PILOT_CONFIG=/path/to/config\n</code></pre>"},{"location":"changelog/#upgrade-instructions","title":"Upgrade Instructions","text":""},{"location":"changelog/#from-v1x-to-v200","title":"From v1.x to v2.0.0","text":"<ol> <li> <p>Backup your configuration:    <pre><code>cp docker-pilot.config.json backup.config.json\n</code></pre></p> </li> <li> <p>Update Docker Pilot:    <pre><code>npm update -g docker-pilot\n</code></pre></p> </li> <li> <p>Run migration (automatic on first run):    <pre><code>docker-pilot config --migrate\n</code></pre></p> </li> <li> <p>Select your language (if not already set):    <pre><code>docker-pilot config --set language=your-language\n</code></pre></p> </li> <li> <p>Test your setup:    <pre><code>docker-pilot status\n</code></pre></p> </li> </ol>"},{"location":"changelog/#from-v14x-to-v150","title":"From v1.4.x to v1.5.0","text":"<ol> <li> <p>Update Docker Pilot:    <pre><code>npm update -g docker-pilot\n</code></pre></p> </li> <li> <p>No breaking changes - existing configurations work as-is</p> </li> </ol>"},{"location":"changelog/#development-changelog","title":"Development Changelog","text":"<p>For developers interested in internal changes:</p>"},{"location":"changelog/#v200-development-changes","title":"v2.0.0 Development Changes","text":"<ul> <li>TypeScript: Full TypeScript conversion completed</li> <li>Testing: Comprehensive test suite added</li> <li>CI/CD: GitHub Actions pipeline implemented</li> <li>Documentation: Complete documentation overhaul</li> <li>Code Quality: ESLint, Prettier, and strict type checking</li> <li>Architecture: Modular plugin system with proper interfaces</li> </ul>"},{"location":"changelog/#v150-development-changes","title":"v1.5.0 Development Changes","text":"<ul> <li>Performance: Significant performance improvements</li> <li>Memory: Better memory management and leak prevention</li> <li>Error Handling: Comprehensive error handling system</li> <li>Logging: Enhanced logging with levels and formatting</li> </ul>"},{"location":"changelog/#contributing","title":"Contributing","text":"<p>We welcome contributions! See our Contributing Guide for details on:</p> <ul> <li>\ud83d\udc1b Reporting bugs</li> <li>\ud83d\udca1 Suggesting features</li> <li>\ud83d\udd27 Code contributions</li> <li>\ud83c\udf0d Translation contributions</li> <li>\ud83d\udcd6 Documentation improvements</li> </ul>"},{"location":"changelog/#acknowledgments","title":"Acknowledgments","text":"<p>Special thanks to all contributors who made Docker Pilot possible:</p> <ul> <li>Community: For feedback, bug reports, and feature suggestions</li> <li>Translators: For multi-language support</li> <li>Developers: For code contributions and improvements</li> <li>Documentation: For examples, guides, and tutorials</li> </ul> <p>Stay Updated</p> <ul> <li>\ud83d\udce6 npm: Get notified of updates with <code>npm outdated -g docker-pilot</code></li> <li>\ud83d\udc19 GitHub: Watch the repository for release notifications</li> <li>\ud83d\udce7 Newsletter: Subscribe for major update announcements</li> <li>\ud83d\udcac Community: Join discussions for early previews and feedback</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":"<p>Common questions and answers about Docker Pilot.</p>"},{"location":"faq/#installation-setup","title":"Installation &amp; Setup","text":""},{"location":"faq/#q-how-do-i-install-docker-pilot","title":"Q: How do I install Docker Pilot?","text":"<p>A: Install Docker Pilot globally using npm:</p> <pre><code>npm install -g docker-pilot\n</code></pre> <p>For other installation methods, see the Installation Guide.</p>"},{"location":"faq/#q-do-i-need-docker-installed","title":"Q: Do I need Docker installed?","text":"<p>A: Yes, Docker Pilot requires Docker and Docker Compose to be installed and running. Docker Pilot is a management tool that works with your existing Docker setup.</p>"},{"location":"faq/#q-what-versions-of-docker-are-supported","title":"Q: What versions of Docker are supported?","text":"<p>A: Docker Pilot supports: - Docker Engine 20.10+ - Docker Compose v2.0+ (recommended) or v1.25+ - Docker Desktop for Windows/Mac</p>"},{"location":"faq/#q-can-i-use-docker-pilot-with-existing-projects","title":"Q: Can I use Docker Pilot with existing projects?","text":"<p>A: Absolutely! Docker Pilot works with any existing <code>docker-compose.yml</code> file. Just navigate to your project directory and run <code>docker-pilot</code>.</p>"},{"location":"faq/#basic-usage","title":"Basic Usage","text":""},{"location":"faq/#q-how-do-i-start-the-interactive-menu","title":"Q: How do I start the interactive menu?","text":"<p>A: Simply run <code>docker-pilot</code> in your project directory:</p> <pre><code>cd your-project\ndocker-pilot\n</code></pre>"},{"location":"faq/#q-can-i-use-docker-pilot-without-the-interactive-menu","title":"Q: Can I use Docker Pilot without the interactive menu?","text":"<p>A: Yes! Docker Pilot supports both interactive and CLI modes:</p> <pre><code># CLI commands\ndocker-pilot up          # Start services\ndocker-pilot down        # Stop services\ndocker-pilot status      # Check status\ndocker-pilot logs        # View logs\n</code></pre>"},{"location":"faq/#q-how-do-i-change-the-language","title":"Q: How do I change the language?","text":"<p>A: You can change the language in several ways:</p> <ol> <li>Interactive menu: Advanced settings \u2192 Change language</li> <li>CLI: <code>docker-pilot config --set language=pt-br</code></li> <li>Environment: <code>export DOCKER_PILOT_LANG=pt-br</code></li> </ol>"},{"location":"faq/#q-what-happens-on-first-run","title":"Q: What happens on first run?","text":"<p>A: On first run, Docker Pilot: 1. Prompts you to select a language 2. Detects your Docker Compose services 3. Creates a <code>docker-pilot.config.json</code> configuration file 4. Shows the main interactive menu</p>"},{"location":"faq/#configuration","title":"Configuration","text":""},{"location":"faq/#q-where-is-the-configuration-file-stored","title":"Q: Where is the configuration file stored?","text":"<p>A: Docker Pilot creates a <code>docker-pilot.config.json</code> file in your project directory. This file contains project-specific settings and service configurations.</p>"},{"location":"faq/#q-can-i-have-different-configurations-for-different-environments","title":"Q: Can I have different configurations for different environments?","text":"<p>A: Yes! You can create multiple configuration files:</p> <pre><code>docker-pilot.config.json          # Default\ndocker-pilot.config.dev.json      # Development\ndocker-pilot.config.prod.json     # Production\n\n# Use specific config\ndocker-pilot --config docker-pilot.config.dev.json up\n</code></pre>"},{"location":"faq/#q-how-do-i-reset-my-configuration","title":"Q: How do I reset my configuration?","text":"<p>A: Use the reset command:</p> <pre><code>docker-pilot config --reset\n</code></pre> <p>This will restore the default configuration and re-detect your services.</p>"},{"location":"faq/#q-can-i-customize-service-startup-order","title":"Q: Can I customize service startup order?","text":"<p>A: Yes! Edit your configuration file and set priorities:</p> <pre><code>{\n  \"services\": {\n    \"database\": { \"priority\": 1 },\n    \"api\": { \"priority\": 2 },\n    \"web\": { \"priority\": 3 }\n  }\n}\n</code></pre> <p>Lower numbers start first.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#q-docker-pilot-says-docker-not-running","title":"Q: Docker Pilot says \"Docker not running\"","text":"<p>A: This means Docker daemon is not running. To fix:</p> <p>Windows/Mac: Start Docker Desktop Linux: <pre><code>sudo systemctl start docker\n# or\nsudo service docker start\n</code></pre></p>"},{"location":"faq/#q-i-get-permission-denied-errors","title":"Q: I get \"Permission denied\" errors","text":"<p>A: This is usually a Docker permissions issue:</p> <p>Linux: Add your user to the docker group: <pre><code>sudo usermod -aG docker $USER\n# Log out and back in\n</code></pre></p> <p>Windows/Mac: Make sure Docker Desktop is running with proper permissions.</p>"},{"location":"faq/#q-services-arent-starting-in-the-right-order","title":"Q: Services aren't starting in the right order","text":"<p>A: Docker Pilot respects <code>depends_on</code> in your docker-compose.yml, but you can also set custom priorities in the configuration file.</p>"},{"location":"faq/#q-i-see-mixed-languages-in-the-interface","title":"Q: I see mixed languages in the interface","text":"<p>A: This might happen if: 1. Language setting is not saved properly 2. You're using an older version 3. Some translations are missing</p> <p>Try: <code>docker-pilot config --set language=your-language</code></p>"},{"location":"faq/#q-commands-are-slow-to-execute","title":"Q: Commands are slow to execute","text":"<p>A: This could be due to: 1. Large Docker images downloading 2. Docker daemon performance issues 3. System resource constraints</p> <p>Check Docker status with <code>docker info</code> and system resources.</p>"},{"location":"faq/#features-functionality","title":"Features &amp; Functionality","text":""},{"location":"faq/#q-can-i-run-commands-on-specific-services-only","title":"Q: Can I run commands on specific services only?","text":"<p>A: Yes! Most commands accept service names:</p> <pre><code>docker-pilot up web api          # Start only web and api\ndocker-pilot restart database    # Restart only database\ndocker-pilot logs web           # View logs for web only\n</code></pre>"},{"location":"faq/#q-how-do-i-scale-services","title":"Q: How do I scale services?","text":"<p>A: Use the scale command:</p> <pre><code>docker-pilot scale web=3 api=2   # Scale web to 3, api to 2 instances\n</code></pre>"},{"location":"faq/#q-can-i-access-container-shells","title":"Q: Can I access container shells?","text":"<p>A: Yes! Use the shell command:</p> <pre><code>docker-pilot shell web           # Open shell in web service\ndocker-pilot shell --user root web  # Open shell as root\n</code></pre>"},{"location":"faq/#q-how-do-i-view-real-time-logs","title":"Q: How do I view real-time logs?","text":"<p>A: Use the logs command with --follow:</p> <pre><code>docker-pilot logs --follow       # All services\ndocker-pilot logs web --follow   # Specific service\n</code></pre>"},{"location":"faq/#q-can-i-clean-up-docker-resources","title":"Q: Can I clean up Docker resources?","text":"<p>A: Yes! Docker Pilot includes cleanup commands:</p> <pre><code>docker-pilot clean               # Basic cleanup\ndocker-pilot clean --all         # Remove everything unused\n</code></pre>"},{"location":"faq/#advanced-usage","title":"Advanced Usage","text":""},{"location":"faq/#q-can-i-create-custom-commands","title":"Q: Can I create custom commands?","text":"<p>A: Yes! Docker Pilot supports plugins and custom commands. See the Plugin Development Guide.</p>"},{"location":"faq/#q-how-do-i-integrate-docker-pilot-with-cicd","title":"Q: How do I integrate Docker Pilot with CI/CD?","text":"<p>A: Docker Pilot works great in CI/CD pipelines:</p> <pre><code># GitHub Actions example\n- name: Start services\n  run: docker-pilot up --detach\n\n- name: Run tests\n  run: docker-pilot exec web npm test\n\n- name: Cleanup\n  run: docker-pilot down --volumes\n</code></pre>"},{"location":"faq/#q-can-i-use-docker-pilot-with-docker-swarm","title":"Q: Can I use Docker Pilot with Docker Swarm?","text":"<p>A: Docker Pilot is designed for Docker Compose. For Docker Swarm, you'll need to use <code>docker stack</code> commands directly.</p>"},{"location":"faq/#q-how-do-i-backup-my-data","title":"Q: How do I backup my data?","text":"<p>A: You can backup volumes and databases:</p> <pre><code># Backup database\ndocker-pilot exec database pg_dump mydb &gt; backup.sql\n\n# Backup volumes\ndocker run --rm -v myapp_data:/data -v $(pwd):/backup alpine tar czf /backup/data.tar.gz /data\n</code></pre>"},{"location":"faq/#q-can-i-monitor-resource-usage","title":"Q: Can I monitor resource usage?","text":"<p>A: Yes! Use the status command:</p> <pre><code>docker-pilot status --detailed    # Shows CPU, memory usage\ndocker-pilot status --stats       # Resource statistics\n</code></pre>"},{"location":"faq/#comparison-with-other-tools","title":"Comparison with Other Tools","text":""},{"location":"faq/#q-how-is-docker-pilot-different-from-docker-compose","title":"Q: How is Docker Pilot different from Docker Compose?","text":"<p>A: Docker Pilot enhances Docker Compose with: - Interactive menu interface - Multi-language support - Smart service management - Health monitoring - Plugin system - Better error messages</p>"},{"location":"faq/#q-should-i-replace-docker-compose-with-docker-pilot","title":"Q: Should I replace Docker Compose with Docker Pilot?","text":"<p>A: No! Docker Pilot works with Docker Compose, not instead of it. It uses your existing <code>docker-compose.yml</code> files and adds a better interface.</p>"},{"location":"faq/#q-can-i-still-use-regular-docker-compose-commands","title":"Q: Can I still use regular Docker Compose commands?","text":"<p>A: Absolutely! You can mix Docker Pilot and regular Docker Compose commands:</p> <pre><code>docker-pilot up              # Start with Docker Pilot\ndocker compose logs web      # View logs with compose\ndocker-pilot down            # Stop with Docker Pilot\n</code></pre>"},{"location":"faq/#multi-language-support","title":"Multi-language Support","text":""},{"location":"faq/#q-what-languages-are-supported","title":"Q: What languages are supported?","text":"<p>A: Currently supported: - English (en) - Default - Portuguese (Brasil) (pt-br) - Complete translation</p> <p>More languages are planned based on community demand.</p>"},{"location":"faq/#q-how-do-i-contribute-translations","title":"Q: How do I contribute translations?","text":"<p>A: See the Contributing Guide for translation guidelines and requirements.</p>"},{"location":"faq/#q-will-docker-commands-be-translated","title":"Q: Will Docker commands be translated?","text":"<p>A: No, Docker commands and output remain in English for consistency. Only the Docker Pilot interface is translated.</p>"},{"location":"faq/#performance-limits","title":"Performance &amp; Limits","text":""},{"location":"faq/#q-how-many-services-can-docker-pilot-handle","title":"Q: How many services can Docker Pilot handle?","text":"<p>A: Docker Pilot can handle as many services as Docker Compose supports. The interface adapts to show large numbers of services efficiently.</p>"},{"location":"faq/#q-does-docker-pilot-add-overhead","title":"Q: Does Docker Pilot add overhead?","text":"<p>A: Minimal overhead. Docker Pilot is a thin wrapper around Docker Compose commands and doesn't impact container performance.</p>"},{"location":"faq/#q-can-i-use-docker-pilot-on-low-resource-systems","title":"Q: Can I use Docker Pilot on low-resource systems?","text":"<p>A: Yes! Docker Pilot itself is lightweight. The resource usage depends on your Docker containers, not Docker Pilot.</p>"},{"location":"faq/#getting-help","title":"Getting Help","text":""},{"location":"faq/#q-where-can-i-get-more-help","title":"Q: Where can I get more help?","text":"<p>A: Several resources are available:</p> <ul> <li>\ud83d\udcd6 Documentation - Complete guides and references</li> <li>\ud83d\udcac GitHub Discussions - Community Q&amp;A</li> <li>\ud83d\udc1b Issues - Bug reports and feature requests</li> <li>\ud83d\udce7 Email Support - Direct support</li> </ul>"},{"location":"faq/#q-how-do-i-report-a-bug","title":"Q: How do I report a bug?","text":"<p>A: Create an issue on GitHub with: 1. Docker Pilot version (<code>docker-pilot --version</code>) 2. Operating system and Docker version 3. Steps to reproduce the issue 4. Expected vs actual behavior 5. Any error messages or logs</p>"},{"location":"faq/#q-how-do-i-request-a-feature","title":"Q: How do I request a feature?","text":"<p>A: Create a feature request on GitHub with: 1. Clear description of the feature 2. Use case and benefits 3. Example of how it would work 4. Any relevant screenshots or mockups</p>"},{"location":"faq/#q-is-there-community-support","title":"Q: Is there community support?","text":"<p>A: Yes! Join our community: - GitHub Discussions for questions and sharing - Discord server for real-time chat (coming soon) - Regular community calls (announced in discussions)</p>"},{"location":"faq/#licensing-commercial-use","title":"Licensing &amp; Commercial Use","text":""},{"location":"faq/#q-is-docker-pilot-free-to-use","title":"Q: Is Docker Pilot free to use?","text":"<p>A: Yes! Docker Pilot is open source under the ISC License, free for both personal and commercial use.</p>"},{"location":"faq/#q-can-i-use-docker-pilot-in-production","title":"Q: Can I use Docker Pilot in production?","text":"<p>A: Absolutely! Docker Pilot is designed for all environments, from development to production.</p>"},{"location":"faq/#q-can-i-modify-docker-pilot-for-my-needs","title":"Q: Can I modify Docker Pilot for my needs?","text":"<p>A: Yes! Under the ISC License, you can modify, distribute, and even sell modified versions. See Contributing for guidelines.</p>"},{"location":"faq/#still-have-questions","title":"Still Have Questions?","text":"<p>If you don't find your answer here:</p> <ol> <li>Search the documentation - Many topics are covered in detail</li> <li>Check GitHub Issues - Your question might already be answered</li> <li>Join GitHub Discussions - Ask the community</li> <li>Create a new issue - For bugs, feature requests, or documentation improvements</li> </ol> <p>Help Improve This FAQ</p> <p>If you have a question that's not covered here, please let us know! We're always improving this FAQ based on user feedback.</p>"},{"location":"advanced/automation/","title":"Automation","text":"<p>Docker Pilot offers advanced automation features to streamline workflows, CI/CD and routine operations.</p>"},{"location":"advanced/automation/#overview","title":"Overview","text":"<p>Automation in Docker Pilot includes:</p> <ul> <li>Automated scripts: Execution of complex tasks</li> <li>Lifecycle hooks: Automatic actions on specific events</li> <li>Workflows: Sequ\u00eancias organizadas de comandos</li> <li>Scheduling: Execu\u00e7\u00e3o programada de tarefas</li> <li>Integra\u00e7\u00e3o CI/CD: Automa\u00e7\u00e3o em pipelines</li> </ul>"},{"location":"advanced/automation/#hooks-de-ciclo-de-vida","title":"Hooks de Ciclo de Vida","text":""},{"location":"advanced/automation/#hooks-disponiveis","title":"Hooks Dispon\u00edveis","text":"<pre><code># docker-pilot.yml\nhooks:\n  # Hooks de inicializa\u00e7\u00e3o\n  before_start:\n    - \"echo 'Preparando para iniciar servi\u00e7os...'\"\n    - \"npm run build\"\n    - \"chmod +x scripts/setup.sh &amp;&amp; ./scripts/setup.sh\"\n\n  after_start:\n    - \"echo 'Servi\u00e7os iniciados com sucesso!'\"\n    - \"curl -f http://localhost:3000/health || exit 1\"\n    - \"npm run test:smoke\"\n\n  # Hooks de parada\n  before_stop:\n    - \"echo 'Salvando estado antes de parar...'\"\n    - \"npm run backup\"\n\n  after_stop:\n    - \"echo 'Servi\u00e7os parados.'\"\n    - \"docker system prune -f\"\n\n  # Hooks de restart\n  before_restart:\n    - \"npm run pre-restart-checks\"\n\n  after_restart:\n    - \"npm run post-restart-validation\"\n\n  # Hooks de deploy\n  before_deploy:\n    - \"npm run lint\"\n    - \"npm test\"\n    - \"docker-pilot build --no-cache\"\n\n  after_deploy:\n    - \"kubectl rollout status deployment/api\"\n    - \"npm run test:integration\"\n    - \"slack-notify 'Deploy conclu\u00eddo!'\"\n\n  # Hooks de erro\n  on_error:\n    - \"echo 'Erro detectado, executando recovery...'\"\n    - \"docker-pilot logs --tail 100 &gt; error.log\"\n    - \"npm run notify-error\"\n\n  # Hooks de limpeza\n  on_cleanup:\n    - \"docker system prune -af\"\n    - \"rm -rf temp/\"\n</code></pre>"},{"location":"advanced/automation/#hooks-condicionais","title":"Hooks Condicionais","text":"<pre><code>hooks:\n  before_start:\n    - condition: \"test -f package.json\"\n      command: \"npm install\"\n      description: \"Instalar depend\u00eancias Node.js se package.json existe\"\n\n    - condition: \"[ \\\"$NODE_ENV\\\" = \\\"development\\\" ]\"\n      command: \"npm run db:seed\"\n      description: \"Seed do banco apenas em desenvolvimento\"\n\n    - condition: \"docker ps | grep -q redis\"\n      command: \"echo 'Redis j\u00e1 est\u00e1 rodando'\"\n      else: \"docker run -d --name redis redis:alpine\"\n      description: \"Iniciar Redis se n\u00e3o estiver rodando\"\n</code></pre>"},{"location":"advanced/automation/#hooks-por-servico","title":"Hooks por Servi\u00e7o","text":"<pre><code>services:\n  api:\n    image: \"myapp/api\"\n    hooks:\n      before_start:\n        - \"npm run build\"\n      after_start:\n        - \"curl -f http://localhost:3000/health\"\n      before_stop:\n        - \"npm run graceful-shutdown\"\n\n  database:\n    image: \"postgres:13\"\n    hooks:\n      after_start:\n        - \"sleep 10\"  # Aguardar inicializa\u00e7\u00e3o\n        - \"npm run db:migrate\"\n      before_stop:\n        - \"pg_dump myapp &gt; backup.sql\"\n</code></pre>"},{"location":"advanced/automation/#workflows-automatizados","title":"Workflows Automatizados","text":""},{"location":"advanced/automation/#definicao-de-workflows","title":"Defini\u00e7\u00e3o de Workflows","text":"<pre><code># docker-pilot.yml\nworkflows:\n  development:\n    description: \"Setup completo para desenvolvimento\"\n    steps:\n      - name: \"Preparar ambiente\"\n        commands:\n          - \"npm install\"\n          - \"composer install\"\n\n      - name: \"Configurar banco de dados\"\n        commands:\n          - \"docker-pilot start database\"\n          - \"sleep 5\"\n          - \"npm run db:create\"\n          - \"npm run db:migrate\"\n\n      - name: \"Iniciar servi\u00e7os\"\n        commands:\n          - \"docker-pilot start api frontend\"\n        parallel: true\n\n      - name: \"Executar testes\"\n        commands:\n          - \"npm run test:smoke\"\n        continue_on_error: true\n\n  production-deploy:\n    description: \"Deploy para produ\u00e7\u00e3o\"\n    confirmation: true\n    steps:\n      - name: \"Valida\u00e7\u00f5es pr\u00e9-deploy\"\n        commands:\n          - \"npm run lint\"\n          - \"npm test\"\n          - \"docker-pilot config validate\"\n\n      - name: \"Build e push\"\n        commands:\n          - \"docker-pilot build --no-cache\"\n          - \"docker-pilot push\"\n\n      - name: \"Deploy\"\n        commands:\n          - \"kubectl apply -f k8s/\"\n          - \"kubectl rollout status deployment/api\"\n\n      - name: \"Testes p\u00f3s-deploy\"\n        commands:\n          - \"npm run test:integration\"\n        rollback_on_error: true\n</code></pre>"},{"location":"advanced/automation/#execucao-de-workflows","title":"Execu\u00e7\u00e3o de Workflows","text":"<pre><code># Executar workflow\ndocker-pilot workflow run development\ndocker-pilot workflow run production-deploy\n\n# Listar workflows\ndocker-pilot workflow list\n\n# Executar com confirma\u00e7\u00e3o\ndocker-pilot workflow run production-deploy --confirm\n\n# Executar em modo dry-run\ndocker-pilot workflow run development --dry-run\n</code></pre>"},{"location":"advanced/automation/#automacao-por-eventos","title":"Automa\u00e7\u00e3o por Eventos","text":""},{"location":"advanced/automation/#watchers-de-arquivo","title":"Watchers de Arquivo","text":"<pre><code># docker-pilot.yml\nautomation:\n  file_watchers:\n    # Rebuild autom\u00e1tico em mudan\u00e7as de c\u00f3digo\n    - pattern: \"./src/**/*.js\"\n      command: \"docker-pilot restart api\"\n      debounce: 2000  # ms\n      description: \"Reiniciar API quando c\u00f3digo JS mudar\"\n\n    # Reiniciar frontend em mudan\u00e7as de CSS\n    - pattern: \"./frontend/src/**/*.css\"\n      command: \"docker-pilot exec frontend npm run build:css\"\n      description: \"Rebuild CSS quando arquivos mudarem\"\n\n    # Recarregar configura\u00e7\u00e3o\n    - pattern: \"./docker-pilot.yml\"\n      command: \"docker-pilot config reload\"\n      description: \"Recarregar configura\u00e7\u00e3o quando docker-pilot.yml mudar\"\n</code></pre>"},{"location":"advanced/automation/#webhooks","title":"Webhooks","text":"<pre><code>automation:\n  webhooks:\n    # Deploy autom\u00e1tico via webhook\n    - endpoint: \"/webhook/deploy\"\n      secret: \"${WEBHOOK_SECRET}\"\n      commands:\n        - \"git pull origin main\"\n        - \"docker-pilot workflow run production-deploy\"\n      conditions:\n        - \"branch == 'main'\"\n        - \"repository == 'company/myapp'\"\n\n    # Notifica\u00e7\u00e3o de status\n    - endpoint: \"/webhook/status\"\n      commands:\n        - \"docker-pilot status --format json &gt; status.json\"\n        - \"curl -X POST $MONITORING_URL -d @status.json\"\n</code></pre>"},{"location":"advanced/automation/#scheduling-tarefas-programadas","title":"Scheduling (Tarefas Programadas)","text":""},{"location":"advanced/automation/#configuracao-de-schedule","title":"Configura\u00e7\u00e3o de Schedule","text":"<pre><code># docker-pilot.yml\nautomation:\n  scheduled_tasks:\n    # Backup di\u00e1rio\n    - name: \"daily-backup\"\n      schedule: \"0 2 * * *\"  # 2:00 AM todos os dias\n      command: \"docker-pilot run backup\"\n      description: \"Backup di\u00e1rio do banco de dados\"\n\n    # Limpeza semanal\n    - name: \"weekly-cleanup\"\n      schedule: \"0 0 * * 0\"  # Domingo \u00e0 meia-noite\n      commands:\n        - \"docker system prune -af\"\n        - \"docker volume prune -f\"\n      description: \"Limpeza semanal do Docker\"\n\n    # Health check de hora em hora\n    - name: \"hourly-health-check\"\n      schedule: \"0 * * * *\"\n      command: \"docker-pilot health --all\"\n      on_failure:\n        - \"docker-pilot restart --all\"\n        - \"slack-notify 'Servi\u00e7os reiniciados ap\u00f3s falha no health check'\"\n\n    # Atualiza\u00e7\u00e3o de imagens (mensal)\n    - name: \"monthly-update\"\n      schedule: \"0 3 1 * *\"  # 3:00 AM do primeiro dia do m\u00eas\n      commands:\n        - \"docker-pilot pull --all\"\n        - \"docker-pilot restart --all\"\n      confirmation: true\n</code></pre>"},{"location":"advanced/automation/#gerenciamento-de-tasks","title":"Gerenciamento de Tasks","text":"<pre><code># Listar tarefas programadas\ndocker-pilot schedule list\n\n# Executar tarefa manualmente\ndocker-pilot schedule run daily-backup\n\n# Habilitar/desabilitar tarefa\ndocker-pilot schedule enable daily-backup\ndocker-pilot schedule disable daily-backup\n\n# Ver pr\u00f3ximas execu\u00e7\u00f5es\ndocker-pilot schedule next\n\n# Ver hist\u00f3rico de execu\u00e7\u00f5es\ndocker-pilot schedule history daily-backup\n</code></pre>"},{"location":"advanced/automation/#integracao-cicd","title":"Integra\u00e7\u00e3o CI/CD","text":""},{"location":"advanced/automation/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/ci.yml\nname: CI/CD Pipeline\n\non:\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Setup Docker Pilot\n        run: |\n          curl -fsSL https://get.docker-pilot.com | sh\n          docker-pilot --version\n\n      - name: Run tests\n        run: |\n          docker-pilot workflow run test\n\n      - name: Build images\n        run: |\n          docker-pilot build --parallel\n    deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    if: github.ref == 'refs/heads/main'\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Deploy to production\n        run: |\n          docker-pilot workflow run production-deploy\n        env:\n          KUBECONFIG: ${ { secrets.KUBECONFIG } }\n          DOCKER_REGISTRY_TOKEN: ${ { secrets.REGISTRY_TOKEN } }\n</code></pre>"},{"location":"advanced/automation/#gitlab-ci","title":"GitLab CI","text":"<pre><code># .gitlab-ci.yml\nstages:\n  - test\n  - build\n  - deploy\n\nvariables:\n  DOCKER_PILOT_VERSION: \"latest\"\n\nbefore_script:\n  - curl -fsSL https://get.docker-pilot.com | sh\n  - docker-pilot config validate\n\ntest:\n  stage: test\n  script:\n    - docker-pilot workflow run test\n  coverage: '/Coverage: \\d+\\.\\d+%/'\n\nbuild:\n  stage: build\n  script:\n    - docker-pilot build --no-cache\n    - docker-pilot push\n  only:\n    - main\n    - develop\n\ndeploy_staging:\n  stage: deploy\n  script:\n    - docker-pilot workflow run staging-deploy\n  environment:\n    name: staging\n    url: https://staging.myapp.com\n  only:\n    - develop\n\ndeploy_production:\n  stage: deploy\n  script:\n    - docker-pilot workflow run production-deploy\n  environment:\n    name: production\n    url: https://myapp.com\n  when: manual\n  only:\n    - main\n</code></pre>"},{"location":"advanced/automation/#jenkins-pipeline","title":"Jenkins Pipeline","text":"<pre><code>// Jenkinsfile\npipeline {\n    agent any\n\n    environment {\n        DOCKER_PILOT_CONFIG = credentials('docker-pilot-config')\n    }\n\n    stages {\n        stage('Setup') {\n            steps {\n                sh 'curl -fsSL https://get.docker-pilot.com | sh'\n                sh 'docker-pilot --version'\n            }\n        }\n\n        stage('Test') {\n            steps {\n                sh 'docker-pilot workflow run test'\n            }\n            post {\n                always {\n                    publishTestResults testResultsPattern: 'test-results.xml'\n                }\n            }\n        }\n\n        stage('Build') {\n            steps {\n                sh 'docker-pilot build --parallel'\n            }\n        }\n\n        stage('Deploy') {\n            when {\n                branch 'main'\n            }\n            steps {\n                input message: 'Deploy to production?'\n                sh 'docker-pilot workflow run production-deploy'\n            }\n        }\n    }\n\n    post {\n        failure {\n            sh 'docker-pilot run notify-failure'\n        }\n        success {\n            sh 'docker-pilot run notify-success'\n        }\n    }\n}\n</code></pre>"},{"location":"advanced/automation/#scripts-de-automacao","title":"Scripts de Automa\u00e7\u00e3o","text":""},{"location":"advanced/automation/#scripts-bash","title":"Scripts Bash","text":"<pre><code>#!/bin/bash\n# scripts/auto-deploy.sh\n\nset -e\n\necho \"\ud83d\ude80 Iniciando deploy autom\u00e1tico...\"\n\n# Verificar se h\u00e1 mudan\u00e7as\nif ! git diff --quiet HEAD~1; then\n    echo \"\ud83d\udcdd Mudan\u00e7as detectadas, prosseguindo com deploy\"\nelse\n    echo \"\u2139\ufe0f Nenhuma mudan\u00e7a detectada, pulando deploy\"\n    exit 0\nfi\n\n# Executar testes\necho \"\ud83e\uddea Executando testes...\"\nif docker-pilot workflow run test; then\n    echo \"\u2705 Testes passaram\"\nelse\n    echo \"\u274c Testes falharam, cancelando deploy\"\n    exit 1\nfi\n\n# Deploy\necho \"\ud83d\udea2 Fazendo deploy...\"\ndocker-pilot workflow run production-deploy\n\n# Verifica\u00e7\u00e3o p\u00f3s-deploy\necho \"\ud83d\udd0d Verificando deploy...\"\nsleep 30\nif curl -f https://myapp.com/health; then\n    echo \"\u2705 Deploy bem-sucedido!\"\n    docker-pilot run notify-success\nelse\n    echo \"\u274c Deploy falhou, fazendo rollback...\"\n    docker-pilot run rollback\n    docker-pilot run notify-failure\n    exit 1\nfi\n</code></pre>"},{"location":"advanced/automation/#scripts-python","title":"Scripts Python","text":"<pre><code>#!/usr/bin/env python3\n# scripts/auto-scaling.py\n\nimport subprocess\nimport time\nimport requests\nimport json\n\ndef get_metrics():\n    \"\"\"Obter m\u00e9tricas dos servi\u00e7os\"\"\"\n    result = subprocess.run(\n        ['docker-pilot', 'metrics', '--format', 'json'],\n        capture_output=True,\n        text=True\n    )\n    return json.loads(result.stdout)\n\ndef scale_service(service, replicas):\n    \"\"\"Escalar servi\u00e7o\"\"\"\n    subprocess.run([\n        'docker-pilot', 'scale', service, str(replicas)\n    ])\n    print(f\"Servi\u00e7o {service} escalado para {replicas} r\u00e9plicas\")\n\ndef auto_scale():\n    \"\"\"L\u00f3gica de auto-scaling\"\"\"\n    metrics = get_metrics()\n\n    for service, data in metrics.items():\n        cpu_usage = data.get('cpu_percent', 0)\n        current_replicas = data.get('replicas', 1)\n\n        if cpu_usage &gt; 80 and current_replicas &lt; 5:\n            # Escalar para cima\n            new_replicas = min(current_replicas + 1, 5)\n            scale_service(service, new_replicas)\n        elif cpu_usage &lt; 20 and current_replicas &gt; 1:\n            # Escalar para baixo\n            new_replicas = max(current_replicas - 1, 1)\n            scale_service(service, new_replicas)\n\nif __name__ == \"__main__\":\n    while True:\n        try:\n            auto_scale()\n        except Exception as e:\n            print(f\"Erro no auto-scaling: {e}\")\n\n        time.sleep(60)  # Verificar a cada minuto\n</code></pre>"},{"location":"advanced/automation/#automacao-de-monitoramento","title":"Automa\u00e7\u00e3o de Monitoramento","text":""},{"location":"advanced/automation/#health-checks-automatizados","title":"Health Checks Automatizados","text":"<pre><code># docker-pilot.yml\nautomation:\n  health_checks:\n    - name: \"api-health\"\n      url: \"http://localhost:3000/health\"\n      interval: 30  # segundos\n      timeout: 5\n      retries: 3\n      on_failure:\n        - \"docker-pilot restart api\"\n        - \"slack-notify 'API reiniciada ap\u00f3s falha no health check'\"\n\n    - name: \"database-health\"\n      command: \"docker-pilot exec database pg_isready -U postgres\"\n      interval: 60\n      on_failure:\n        - \"docker-pilot restart database\"\n        - \"sleep 30\"\n        - \"docker-pilot exec api npm run db:migrate\"\n</code></pre>"},{"location":"advanced/automation/#alertas-automatizados","title":"Alertas Automatizados","text":"<pre><code>automation:\n  alerts:\n    # Alerta de uso de CPU\n    - name: \"high-cpu\"\n      condition: \"cpu_usage &gt; 80\"\n      actions:\n        - \"docker-pilot scale api +1\"\n        - \"slack-notify 'Alto uso de CPU detectado, escalando API'\"\n\n    # Alerta de uso de mem\u00f3ria\n    - name: \"high-memory\"\n      condition: \"memory_usage &gt; 85\"\n      actions:\n        - \"docker-pilot restart api\"\n        - \"email-notify 'Reiniciando API devido a alto uso de mem\u00f3ria'\"\n\n    # Alerta de espa\u00e7o em disco\n    - name: \"low-disk\"\n      condition: \"disk_usage &gt; 90\"\n      actions:\n        - \"docker system prune -af\"\n        - \"docker-pilot run cleanup\"\n</code></pre>"},{"location":"advanced/automation/#rollback-automatico","title":"Rollback Autom\u00e1tico","text":""},{"location":"advanced/automation/#configuracao-de-rollback","title":"Configura\u00e7\u00e3o de Rollback","text":"<pre><code># docker-pilot.yml\nautomation:\n  rollback:\n    enabled: true\n    triggers:\n      - \"health_check_failure\"\n      - \"high_error_rate\"\n      - \"deployment_timeout\"\n\n    strategy: \"previous_version\"\n    timeout: 300  # segundos\n\n    post_rollback:\n      - \"docker-pilot run notify-rollback\"\n      - \"kubectl annotate deployment api rollback.reason='$ROLLBACK_REASON'\"\n</code></pre>"},{"location":"advanced/automation/#script-de-rollback","title":"Script de Rollback","text":"<pre><code>#!/bin/bash\n# scripts/auto-rollback.sh\n\nHEALTH_CHECK_URL=\"https://myapp.com/health\"\nMAX_FAILURES=3\nCURRENT_FAILURES=0\n\necho \"\ud83d\udd0d Monitorando sa\u00fade da aplica\u00e7\u00e3o...\"\n\nwhile true; do\n    if curl -f -s $HEALTH_CHECK_URL &gt; /dev/null; then\n        CURRENT_FAILURES=0\n        echo \"\u2705 Health check OK\"\n    else\n        CURRENT_FAILURES=$((CURRENT_FAILURES + 1))\n        echo \"\u274c Health check falhou ($CURRENT_FAILURES/$MAX_FAILURES)\"\n\n        if [ $CURRENT_FAILURES -ge $MAX_FAILURES ]; then\n            echo \"\ud83d\udd04 Iniciando rollback autom\u00e1tico...\"\n            docker-pilot run rollback\n            docker-pilot run notify-rollback\n            exit 1\n        fi\n    fi\n\n    sleep 30\ndone\n</code></pre>"},{"location":"advanced/automation/#ferramentas-de-automacao","title":"Ferramentas de Automa\u00e7\u00e3o","text":""},{"location":"advanced/automation/#make-integration","title":"Make Integration","text":"<pre><code># Makefile\n.PHONY: install dev test build deploy clean\n\ninstall:\n    docker-pilot workflow run install\n\ndev:\n    docker-pilot workflow run development\n\ntest:\n    docker-pilot workflow run test\n\nbuild:\n    docker-pilot build --parallel\n\ndeploy:\n    docker-pilot workflow run production-deploy\n\nclean:\n    docker-pilot run cleanup\n    docker system prune -af\n\n# Auto-deploy com verifica\u00e7\u00f5es\nauto-deploy:\n    @echo \"Verificando mudan\u00e7as...\"\n    @git fetch origin\n    @if ! git diff --quiet HEAD origin/main; then \\\n        echo \"Mudan\u00e7as detectadas, fazendo deploy...\"; \\\n        make test &amp;&amp; make build &amp;&amp; make deploy; \\\n    else \\\n        echo \"Nenhuma mudan\u00e7a detectada\"; \\\n    fi\n</code></pre>"},{"location":"advanced/automation/#yarnnpm-scripts","title":"Yarn/NPM Scripts","text":"<pre><code>{\n  \"scripts\": {\n    \"docker:dev\": \"docker-pilot workflow run development\",\n    \"docker:test\": \"docker-pilot workflow run test\",\n    \"docker:build\": \"docker-pilot build --parallel\",\n    \"docker:deploy\": \"docker-pilot workflow run production-deploy\",\n    \"docker:clean\": \"docker-pilot run cleanup\",\n    \"precommit\": \"docker-pilot workflow run test\",\n    \"postinstall\": \"docker-pilot pull --if-newer\"\n  }\n}\n</code></pre>"},{"location":"advanced/automation/#monitoramento-de-automacao","title":"Monitoramento de Automa\u00e7\u00e3o","text":""},{"location":"advanced/automation/#logs-de-automacao","title":"Logs de Automa\u00e7\u00e3o","text":"<pre><code># docker-pilot.yml\nautomation:\n  logging:\n    enabled: true\n    level: \"info\"\n    file: \"./logs/automation.log\"\n    rotate: true\n    max_size: \"10MB\"\n    max_files: 5\n\n    # Log structured data\n    structured: true\n    fields:\n      - \"timestamp\"\n      - \"event\"\n      - \"service\"\n      - \"duration\"\n      - \"status\"\n</code></pre>"},{"location":"advanced/automation/#dashboard-de-automacao","title":"Dashboard de Automa\u00e7\u00e3o","text":"<pre><code># Iniciar dashboard\ndocker-pilot automation dashboard\n\n# Ver status das automa\u00e7\u00f5es\ndocker-pilot automation status\n\n# Hist\u00f3rico de execu\u00e7\u00f5es\ndocker-pilot automation history\n\n# M\u00e9tricas de automa\u00e7\u00e3o\ndocker-pilot automation metrics\n</code></pre>"},{"location":"advanced/automation/#boas-praticas","title":"Boas Pr\u00e1ticas","text":""},{"location":"advanced/automation/#1-idempotencia","title":"1. Idempot\u00eancia","text":"<pre><code>hooks:\n  before_start:\n    # \u274c N\u00e3o idempotente\n    - \"npm install\"\n\n    # \u2705 Idempotente\n    - condition: \"[ ! -d node_modules ]\"\n      command: \"npm install\"\n</code></pre>"},{"location":"advanced/automation/#2-error-handling","title":"2. Error Handling","text":"<pre><code>workflows:\n  deploy:\n    steps:\n      - name: \"Deploy\"\n        commands:\n          - \"kubectl apply -f k8s/\"\n        rollback_on_error:\n          - \"kubectl rollout undo deployment/api\"\n        timeout: 300\n</code></pre>"},{"location":"advanced/automation/#3-testing","title":"3. Testing","text":"<pre><code># Testar automa\u00e7\u00f5es em ambiente seguro\ndocker-pilot workflow run production-deploy --dry-run\ndocker-pilot automation test --all\n</code></pre>"},{"location":"advanced/automation/#4-monitoramento","title":"4. Monitoramento","text":"<pre><code>automation:\n  notifications:\n    on_success:\n      - \"slack-notify 'Automa\u00e7\u00e3o conclu\u00edda com sucesso'\"\n    on_failure:\n      - \"email-notify 'Falha na automa\u00e7\u00e3o'\"\n      - \"pagerduty-alert 'Automa\u00e7\u00e3o cr\u00edtica falhou'\"\n</code></pre>"},{"location":"advanced/automation/#resolucao-de-problemas","title":"Resolu\u00e7\u00e3o de Problemas","text":""},{"location":"advanced/automation/#debug-de-automacoes","title":"Debug de Automa\u00e7\u00f5es","text":"<pre><code># Ver logs detalhados\ndocker-pilot automation logs --verbose\n\n# Testar hooks individualmente\ndocker-pilot hook test before_start\n\n# Validar workflows\ndocker-pilot workflow validate production-deploy\n</code></pre>"},{"location":"advanced/automation/#problemas-comuns","title":"Problemas Comuns","text":"<ol> <li>Timeouts: Ajustar valores de timeout</li> <li>Depend\u00eancias: Verificar ordem de execu\u00e7\u00e3o</li> <li>Permiss\u00f5es: Validar acesso a recursos</li> <li>Race conditions: Adicionar delays ou locks</li> </ol>"},{"location":"advanced/automation/#veja-tambem","title":"Veja Tamb\u00e9m","text":"<ul> <li>Comandos Personalizados</li> <li>Plugins</li> <li>Monitoramento</li> <li>Integra\u00e7\u00e3o Docker</li> </ul>"},{"location":"advanced/custom-commands/","title":"Custom Commands","text":"<p>Docker Pilot allows you to create and configure custom commands to automate specific tasks for your project.</p>"},{"location":"advanced/custom-commands/#overview","title":"Overview","text":"<p>Custom commands offer a flexible way to:</p> <ul> <li>Automate specific workflows</li> <li>Create shortcuts for command sequences</li> <li>Integrate with external tools</li> <li>Personalizar comportamentos por projeto</li> <li>Compartilhar scripts entre equipes</li> </ul>"},{"location":"advanced/custom-commands/#configuracao-basica","title":"Configura\u00e7\u00e3o B\u00e1sica","text":""},{"location":"advanced/custom-commands/#definindo-comandos-personalizados","title":"Definindo Comandos Personalizados","text":"<pre><code># docker-pilot.yml\ncustom_commands:\n  # Comando simples\n  setup:\n    description: \"Configurar ambiente de desenvolvimento\"\n    command: \"npm install &amp;&amp; npm run db:migrate\"\n\n  # Comando com m\u00faltiplas etapas\n  deploy:\n    description: \"Deploy para produ\u00e7\u00e3o\"\n    steps:\n      - \"docker-pilot build --no-cache\"\n      - \"docker-pilot push\"\n      - \"kubectl apply -f k8s/\"\n      - \"kubectl rollout status deployment/api\"\n\n  # Comando com op\u00e7\u00f5es\n  test:\n    description: \"Executar testes\"\n    command: \"npm test\"\n    options:\n      watch:\n        type: \"boolean\"\n        description: \"Executar em modo watch\"\n        default: false\n    script: |\n      if [ \"$WATCH\" = \"true\" ]; then\n        npm run test:watch\n      else\n        npm test\n      fi\n\n  # Comando com contexto Docker\n  db-backup:\n    description: \"Backup do banco de dados\"\n    service: \"database\"\n    command: \"pg_dump -U postgres myapp &gt; /backup/backup-$(date +%Y%m%d).sql\"\n    volumes:\n      - \"./backups:/backup\"\n</code></pre>"},{"location":"advanced/custom-commands/#executando-comandos-personalizados","title":"Executando Comandos Personalizados","text":"<pre><code># Executar comando personalizado\ndocker-pilot run setup\ndocker-pilot run deploy\ndocker-pilot run test\ndocker-pilot run test --watch\n\n# Listar comandos dispon\u00edveis\ndocker-pilot commands list\n\n# Mostrar ajuda de um comando\ndocker-pilot run test --help\n</code></pre>"},{"location":"advanced/custom-commands/#tipos-de-comandos","title":"Tipos de Comandos","text":""},{"location":"advanced/custom-commands/#1-comandos-shell-simples","title":"1. Comandos Shell Simples","text":"<pre><code>custom_commands:\n  install-deps:\n    description: \"Instalar depend\u00eancias\"\n    command: \"npm install &amp;&amp; composer install\"\n\n  clear-cache:\n    description: \"Limpar cache\"\n    command: \"redis-cli flushall &amp;&amp; rm -rf var/cache/*\"\n</code></pre>"},{"location":"advanced/custom-commands/#2-comandos-multi-etapa","title":"2. Comandos Multi-etapa","text":"<pre><code>custom_commands:\n  full-setup:\n    description: \"Setup completo do projeto\"\n    steps:\n      - name: \"Instalar depend\u00eancias\"\n        command: \"npm install\"\n      - name: \"Configurar banco\"\n        command: \"npm run db:create &amp;&amp; npm run db:migrate\"\n      - name: \"Seed inicial\"\n        command: \"npm run db:seed\"\n      - name: \"Iniciar servi\u00e7os\"\n        command: \"docker-pilot start --all\"\n</code></pre>"},{"location":"advanced/custom-commands/#3-comandos-com-scripts","title":"3. Comandos com Scripts","text":"<pre><code>custom_commands:\n  deploy-staging:\n    description: \"Deploy para staging\"\n    script: |\n      #!/bin/bash\n      set -e\n\n      echo \"\ud83d\ude80 Iniciando deploy para staging...\"\n\n      # Build das imagens\n      docker-pilot build --parallel\n\n      # Tag das imagens\n      docker tag myapp/api:latest myapp/api:staging-$(git rev-parse --short HEAD)\n\n      # Push para registry\n      docker push myapp/api:staging-$(git rev-parse --short HEAD)\n\n      # Deploy\n      kubectl set image deployment/api api=myapp/api:staging-$(git rev-parse --short HEAD)\n      kubectl rollout status deployment/api\n\n      echo \"\u2705 Deploy conclu\u00eddo!\"\n</code></pre>"},{"location":"advanced/custom-commands/#4-comandos-com-contexto-docker","title":"4. Comandos com Contexto Docker","text":"<pre><code>custom_commands:\n  db-shell:\n    description: \"Acessar shell do banco de dados\"\n    service: \"database\"\n    command: \"psql -U postgres myapp\"\n    interactive: true\n\n  api-logs:\n    description: \"Ver logs da API em tempo real\"\n    service: \"api\"\n    command: \"tail -f /var/log/app.log\"\n    tty: true\n</code></pre>"},{"location":"advanced/custom-commands/#5-comandos-condicionais","title":"5. Comandos Condicionais","text":"<pre><code>custom_commands:\n  test-and-deploy:\n    description: \"Testar e fazer deploy se passou\"\n    script: |\n      #!/bin/bash\n\n      echo \"Executando testes...\"\n      if npm test; then\n        echo \"\u2705 Testes passaram, fazendo deploy...\"\n        docker-pilot run deploy\n      else\n        echo \"\u274c Testes falharam, cancelando deploy\"\n        exit 1\n      fi\n</code></pre>"},{"location":"advanced/custom-commands/#configuracao-avancada","title":"Configura\u00e7\u00e3o Avan\u00e7ada","text":""},{"location":"advanced/custom-commands/#opcoes-de-comandos","title":"Op\u00e7\u00f5es de Comandos","text":"<pre><code>custom_commands:\n  migrate:\n    description: \"Executar migra\u00e7\u00f5es\"\n    options:\n      rollback:\n        type: \"boolean\"\n        description: \"Fazer rollback da \u00faltima migra\u00e7\u00e3o\"\n        default: false\n      steps:\n        type: \"number\"\n        description: \"N\u00famero de passos para rollback\"\n        default: 1\n      env:\n        type: \"string\"\n        description: \"Ambiente alvo\"\n        choices: [\"development\", \"staging\", \"production\"]\n        default: \"development\"\n    script: |\n      if [ \"$ROLLBACK\" = \"true\" ]; then\n        npm run db:rollback -- --steps=$STEPS --env=$ENV\n      else\n        npm run db:migrate -- --env=$ENV\n      fi\n</code></pre>"},{"location":"advanced/custom-commands/#variaveis-de-ambiente","title":"Vari\u00e1veis de Ambiente","text":"<pre><code>custom_commands:\n  backup:\n    description: \"Backup com timestamp\"\n    environment:\n      BACKUP_DIR: \"./backups\"\n      TIMESTAMP: \"$(date +%Y%m%d_%H%M%S)\"\n    script: |\n      mkdir -p $BACKUP_DIR\n      docker-pilot exec database pg_dump -U postgres myapp &gt; $BACKUP_DIR/backup_$TIMESTAMP.sql\n      echo \"Backup salvo em: $BACKUP_DIR/backup_$TIMESTAMP.sql\"\n</code></pre>"},{"location":"advanced/custom-commands/#pre-e-pos-comandos","title":"Pr\u00e9 e P\u00f3s Comandos","text":"<pre><code>custom_commands:\n  deploy:\n    description: \"Deploy com valida\u00e7\u00f5es\"\n    before:\n      - \"npm run lint\"\n      - \"npm test\"\n      - \"docker-pilot config validate\"\n    command: \"kubectl apply -f k8s/\"\n    after:\n      - \"kubectl rollout status deployment/api\"\n      - \"docker-pilot run health-check\"\n    on_error:\n      - \"kubectl rollout undo deployment/api\"\n      - \"docker-pilot notify 'Deploy falhou!'\"\n</code></pre>"},{"location":"advanced/custom-commands/#comandos-paralelos","title":"Comandos Paralelos","text":"<pre><code>custom_commands:\n  build-all:\n    description: \"Build paralelo de todos os servi\u00e7os\"\n    parallel:\n      - name: \"Build API\"\n        command: \"docker build -t myapp/api ./api\"\n      - name: \"Build Frontend\"\n        command: \"docker build -t myapp/frontend ./frontend\"\n      - name: \"Build Worker\"\n        command: \"docker build -t myapp/worker ./worker\"\n</code></pre>"},{"location":"advanced/custom-commands/#templates-de-comandos","title":"Templates de Comandos","text":""},{"location":"advanced/custom-commands/#template-de-deploy","title":"Template de Deploy","text":"<pre><code>custom_commands:\n  deploy-template:\n    description: \"Template de deploy parametriz\u00e1vel\"\n    options:\n      environment:\n        type: \"string\"\n        required: true\n        choices: [\"staging\", \"production\"]\n      version:\n        type: \"string\"\n        description: \"Vers\u00e3o para deploy\"\n        default: \"latest\"\n      dry_run:\n        type: \"boolean\"\n        description: \"Simular deploy sem executar\"\n        default: false\n\n    script: |\n      ENV=$ENVIRONMENT\n      VERSION=$VERSION\n      DRY_RUN=$DRY_RUN\n\n      echo \"\ud83d\ude80 Deploy para $ENV (vers\u00e3o: $VERSION)\"\n\n      if [ \"$DRY_RUN\" = \"true\" ]; then\n        echo \"\ud83d\udd0d Modo dry-run ativado\"\n        kubectl diff -f k8s/overlays/$ENV/\n      else\n        # Build com tag espec\u00edfica\n        docker build -t myapp/api:$VERSION ./api\n\n        # Push para registry\n        docker push myapp/api:$VERSION\n\n        # Update deployment\n        kubectl set image deployment/api api=myapp/api:$VERSION -n $ENV\n        kubectl rollout status deployment/api -n $ENV\n\n        echo \"\u2705 Deploy conclu\u00eddo!\"\n      fi\n</code></pre>"},{"location":"advanced/custom-commands/#template-de-teste","title":"Template de Teste","text":"<pre><code>custom_commands:\n  test-template:\n    description: \"Template de testes configur\u00e1vel\"\n    options:\n      type:\n        type: \"string\"\n        choices: [\"unit\", \"integration\", \"e2e\", \"all\"]\n        default: \"all\"\n      coverage:\n        type: \"boolean\"\n        description: \"Gerar relat\u00f3rio de cobertura\"\n        default: false\n      watch:\n        type: \"boolean\"\n        description: \"Executar em modo watch\"\n        default: false\n\n    script: |\n      TYPE=$TYPE\n      COVERAGE=$COVERAGE\n      WATCH=$WATCH\n\n      # Configurar comandos baseado no tipo\n      case $TYPE in\n        \"unit\")\n          CMD=\"npm run test:unit\"\n          ;;\n        \"integration\")\n          CMD=\"npm run test:integration\"\n          ;;\n        \"e2e\")\n          CMD=\"npm run test:e2e\"\n          ;;\n        \"all\")\n          CMD=\"npm test\"\n          ;;\n      esac\n\n      # Adicionar flags\n      if [ \"$COVERAGE\" = \"true\" ]; then\n        CMD=\"$CMD -- --coverage\"\n      fi\n\n      if [ \"$WATCH\" = \"true\" ]; then\n        CMD=\"$CMD -- --watch\"\n      fi\n\n      echo \"Executando: $CMD\"\n      eval $CMD\n</code></pre>"},{"location":"advanced/custom-commands/#comandos-por-ambiente","title":"Comandos por Ambiente","text":""},{"location":"advanced/custom-commands/#configuracao-por-ambiente","title":"Configura\u00e7\u00e3o por Ambiente","text":"<pre><code># docker-pilot.dev.yml\ncustom_commands:\n  start:\n    description: \"Iniciar ambiente de desenvolvimento\"\n    command: \"docker-pilot start --build database api\"\n    environment:\n      NODE_ENV: \"development\"\n      DEBUG: \"true\"\n\n# docker-pilot.prod.yml\ncustom_commands:\n  start:\n    description: \"Iniciar ambiente de produ\u00e7\u00e3o\"\n    steps:\n      - \"docker-pilot pull --all\"\n      - \"docker-pilot start --all\"\n    environment:\n      NODE_ENV: \"production\"\n</code></pre>"},{"location":"advanced/custom-commands/#comandos-especificos","title":"Comandos Espec\u00edficos","text":"<pre><code>custom_commands:\n  # Desenvolvimento\n  dev-setup:\n    description: \"Setup para desenvolvimento\"\n    environments: [\"development\"]\n    script: |\n      npm install\n      npm run db:reset\n      npm run db:seed:dev\n      docker-pilot start database api\n\n  # Produ\u00e7\u00e3o\n  prod-deploy:\n    description: \"Deploy para produ\u00e7\u00e3o\"\n    environments: [\"production\"]\n    confirmation: true\n    script: |\n      echo \"\u26a0\ufe0f  Deploy para PRODU\u00c7\u00c3O!\"\n      read -p \"Confirma deploy? (y/N): \" confirm\n      if [ \"$confirm\" = \"y\" ]; then\n        kubectl apply -f k8s/prod/\n      else\n        echo \"Deploy cancelado\"\n        exit 1\n      fi\n</code></pre>"},{"location":"advanced/custom-commands/#integracao-com-cicd","title":"Integra\u00e7\u00e3o com CI/CD","text":""},{"location":"advanced/custom-commands/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/deploy.yml\nname: Deploy\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: Setup Docker Pilot\n        run: npm install -g @docker-pilot/cli\n\n      - name: Run deploy command\n        run: docker-pilot run deploy --environment production\n</code></pre>"},{"location":"advanced/custom-commands/#gitlab-ci","title":"GitLab CI","text":"<pre><code># .gitlab-ci.yml\ndeploy:\n  stage: deploy\n  script:\n    - docker-pilot run deploy --environment production\n  only:\n    - main\n</code></pre>"},{"location":"advanced/custom-commands/#comandos-interativos","title":"Comandos Interativos","text":""},{"location":"advanced/custom-commands/#menu-de-selecao","title":"Menu de Sele\u00e7\u00e3o","text":"<pre><code>custom_commands:\n  interactive-deploy:\n    description: \"Deploy interativo\"\n    script: |\n      echo \"Selecione o ambiente:\"\n      echo \"1) Development\"\n      echo \"2) Staging\"\n      echo \"3) Production\"\n      read -p \"Op\u00e7\u00e3o: \" choice\n\n      case $choice in\n        1) ENV=\"development\" ;;\n        2) ENV=\"staging\" ;;\n        3) ENV=\"production\" ;;\n        *) echo \"Op\u00e7\u00e3o inv\u00e1lida\"; exit 1 ;;\n      esac\n\n      docker-pilot run deploy --environment $ENV\n</code></pre>"},{"location":"advanced/custom-commands/#confirmacao-de-acoes","title":"Confirma\u00e7\u00e3o de A\u00e7\u00f5es","text":"<pre><code>custom_commands:\n  destructive-action:\n    description: \"A\u00e7\u00e3o destrutiva com confirma\u00e7\u00e3o\"\n    confirmation: true\n    confirmation_message: \"Esta a\u00e7\u00e3o ir\u00e1 deletar todos os dados. Confirma?\"\n    script: |\n      echo \"Executando a\u00e7\u00e3o destrutiva...\"\n      docker-pilot exec database psql -c \"DROP DATABASE IF EXISTS myapp;\"\n      echo \"Dados deletados!\"\n</code></pre>"},{"location":"advanced/custom-commands/#comandos-com-dependencias","title":"Comandos com Depend\u00eancias","text":""},{"location":"advanced/custom-commands/#verificacao-de-dependencias","title":"Verifica\u00e7\u00e3o de Depend\u00eancias","text":"<pre><code>custom_commands:\n  deploy:\n    description: \"Deploy com verifica\u00e7\u00e3o de depend\u00eancias\"\n    requires:\n      - \"docker\"\n      - \"kubectl\"\n      - \"git\"\n    before:\n      - name: \"Verificar cluster\"\n        command: \"kubectl cluster-info\"\n      - name: \"Verificar registry\"\n        command: \"docker info\"\n    script: |\n      echo \"Todas as depend\u00eancias verificadas!\"\n      kubectl apply -f k8s/\n</code></pre>"},{"location":"advanced/custom-commands/#comandos-condicionais","title":"Comandos Condicionais","text":"<pre><code>custom_commands:\n  smart-deploy:\n    description: \"Deploy inteligente\"\n    script: |\n      # Verificar se h\u00e1 mudan\u00e7as\n      if git diff --quiet HEAD~1; then\n        echo \"Nenhuma mudan\u00e7a detectada, pulando deploy\"\n        exit 0\n      fi\n\n      # Verificar se testes passam\n      if ! npm test; then\n        echo \"Testes falharam, cancelando deploy\"\n        exit 1\n      fi\n\n      # Executar deploy\n      kubectl apply -f k8s/\n</code></pre>"},{"location":"advanced/custom-commands/#debugging-de-comandos","title":"Debugging de Comandos","text":""},{"location":"advanced/custom-commands/#modo-debug","title":"Modo Debug","text":"<pre><code># Executar comando em modo debug\ndocker-pilot run setup --debug\n\n# Ver script gerado\ndocker-pilot run setup --dry-run\n\n# Executar com verbose\ndocker-pilot run setup --verbose\n</code></pre>"},{"location":"advanced/custom-commands/#logs-de-comandos","title":"Logs de Comandos","text":"<pre><code>custom_commands:\n  logged-command:\n    description: \"Comando com logs detalhados\"\n    logging:\n      enabled: true\n      level: \"debug\"\n      file: \"./logs/commands.log\"\n    script: |\n      echo \"Iniciando comando...\"\n      # comando aqui\n      echo \"Comando conclu\u00eddo!\"\n</code></pre>"},{"location":"advanced/custom-commands/#compartilhamento-de-comandos","title":"Compartilhamento de Comandos","text":""},{"location":"advanced/custom-commands/#comandos-globais","title":"Comandos Globais","text":"<pre><code># ~/.docker-pilot/commands.yml\nglobal_commands:\n  git-clean:\n    description: \"Limpeza git completa\"\n    command: \"git clean -fd &amp;&amp; git reset --hard HEAD\"\n\n  system-info:\n    description: \"Informa\u00e7\u00f5es do sistema\"\n    script: |\n      echo \"Docker: $(docker --version)\"\n      echo \"Kubernetes: $(kubectl version --client --short)\"\n      echo \"Node: $(node --version)\"\n</code></pre>"},{"location":"advanced/custom-commands/#importacao-de-comandos","title":"Importa\u00e7\u00e3o de Comandos","text":"<pre><code># docker-pilot.yml\nimports:\n  - \"./commands/database.yml\"\n  - \"./commands/deployment.yml\"\n  - \"https://raw.githubusercontent.com/company/commands/main/common.yml\"\n</code></pre>"},{"location":"advanced/custom-commands/#boas-praticas","title":"Boas Pr\u00e1ticas","text":""},{"location":"advanced/custom-commands/#1-documentacao","title":"1. Documenta\u00e7\u00e3o","text":"<pre><code>custom_commands:\n  well-documented:\n    description: \"Comando bem documentado\"\n    long_description: |\n      Este comando executa uma s\u00e9rie de opera\u00e7\u00f5es para preparar\n      o ambiente de desenvolvimento:\n\n      1. Instala depend\u00eancias\n      2. Configura banco de dados\n      3. Executa migra\u00e7\u00f5es\n      4. Faz seed dos dados\n\n    examples:\n      - \"docker-pilot run well-documented\"\n      - \"docker-pilot run well-documented --skip-seed\"\n\n    options:\n      skip_seed:\n        type: \"boolean\"\n        description: \"Pular seed dos dados\"\n        default: false\n</code></pre>"},{"location":"advanced/custom-commands/#2-tratamento-de-erros","title":"2. Tratamento de Erros","text":"<pre><code>custom_commands:\n  robust-command:\n    description: \"Comando robusto\"\n    script: |\n      set -e  # Parar em caso de erro\n\n      # Fun\u00e7\u00e3o de cleanup\n      cleanup() {\n        echo \"Limpando recursos...\"\n        docker-pilot stop --all\n      }\n\n      # Registrar cleanup para execu\u00e7\u00e3o em caso de erro\n      trap cleanup EXIT\n\n      # Comando principal\n      echo \"Executando opera\u00e7\u00e3o...\"\n      npm install || { echo \"Erro na instala\u00e7\u00e3o\"; exit 1; }\n\n      echo \"Sucesso!\"\n</code></pre>"},{"location":"advanced/custom-commands/#3-validacao-de-input","title":"3. Valida\u00e7\u00e3o de Input","text":"<pre><code>custom_commands:\n  validated-command:\n    description: \"Comando com valida\u00e7\u00e3o\"\n    options:\n      environment:\n        type: \"string\"\n        required: true\n        pattern: \"^(dev|staging|prod)$\"\n        error_message: \"Ambiente deve ser: dev, staging ou prod\"\n\n    script: |\n      if [ -z \"$ENVIRONMENT\" ]; then\n        echo \"Erro: Environment \u00e9 obrigat\u00f3rio\"\n        exit 1\n      fi\n\n      echo \"Deploy para $ENVIRONMENT\"\n</code></pre>"},{"location":"advanced/custom-commands/#veja-tambem","title":"Veja Tamb\u00e9m","text":"<ul> <li>Comandos</li> <li>Plugins</li> <li>Configura\u00e7\u00e3o</li> <li>Automa\u00e7\u00e3o</li> </ul>"},{"location":"advanced/docker-integration/","title":"Macro Syntax Error","text":"<p>File: <code>advanced\\docker-integration.md</code></p> <p>Line 611 in Markdown file: unexpected '.' <pre><code>docker-pilot stats --stream --format \"table {{.Container}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\"\n</code></pre></p>"},{"location":"advanced/monitoring/","title":"Macro Syntax Error","text":"<p>File: <code>advanced\\monitoring.md</code></p> <p>Line 284 in Markdown file: unexpected '.' <pre><code>      message: \"Alto uso de CPU detectado: {{.value}}%\"\n</code></pre></p>"},{"location":"advanced/plugins/","title":"Plugins","text":"<p>Docker Pilot has a robust plugin system that allows you to extend its functionality in a modular and flexible way.</p>"},{"location":"advanced/plugins/#overview","title":"Overview","text":"<p>Docker Pilot plugins allow you to:</p> <ul> <li>Add new commands</li> <li>Integrate with external tools</li> <li>Customize behaviors</li> <li>Automate specific tasks</li> <li>Create custom workflows</li> </ul>"},{"location":"advanced/plugins/#plugin-architecture","title":"Plugin Architecture","text":""},{"location":"advanced/plugins/#plugin-types","title":"Plugin Types","text":"<ol> <li>Command Plugins: Add new CLI commands</li> <li>Hook Plugins: Execute at specific lifecycle points</li> <li>Integration Plugins: Connect with external tools</li> <li>UI Plugins: Modify the user interface</li> <li>Monitoring Plugins: Add monitoring capabilities</li> </ol>"},{"location":"advanced/plugins/#plugin-structure","title":"Plugin Structure","text":"<pre><code>my-plugin/\n\u251c\u2500\u2500 plugin.yml           # Plugin manifest\n\u251c\u2500\u2500 index.js            # Entry point\n\u251c\u2500\u2500 commands/           # Plugin commands\n\u2502   \u251c\u2500\u2500 deploy.js\n\u2502   \u2514\u2500\u2500 status.js\n\u251c\u2500\u2500 hooks/              # Plugin hooks\n\u2502   \u251c\u2500\u2500 pre-start.js\n\u2502   \u2514\u2500\u2500 post-deploy.js\n\u251c\u2500\u2500 templates/          # Templates\n\u2502   \u2514\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 assets/             # Static resources\n\u2502   \u2514\u2500\u2500 logo.png\n\u2514\u2500\u2500 package.json        # Node.js dependencies\n</code></pre>"},{"location":"advanced/plugins/#official-plugins","title":"Official Plugins","text":""},{"location":"advanced/plugins/#backup-plugin","title":"Backup Plugin","text":"<p>Adds advanced backup and restore functionality.</p> <pre><code># Instalar plugin de backup\ndocker-pilot plugin install @docker-pilot/backup\n\n# Usar plugin\ndocker-pilot backup create --name \"backup-$(date +%Y%m%d)\"\ndocker-pilot backup list\ndocker-pilot backup restore \"backup-20231201\"\n</code></pre> <p>Configura\u00e7\u00e3o:</p> <pre><code># docker-pilot.yml\nplugins:\n  backup:\n    enabled: true\n    config:\n      storage: \"s3\"\n      bucket: \"meus-backups\"\n      region: \"us-east-1\"\n      encryption: true\n      retention: 30  # dias\n</code></pre>"},{"location":"advanced/plugins/#plugin-de-monitoramento","title":"Plugin de Monitoramento","text":"<p>Monitora performance e sa\u00fade dos servi\u00e7os.</p> <pre><code># Instalar plugin de monitoramento\ndocker-pilot plugin install @docker-pilot/monitoring\n\n# Usar plugin\ndocker-pilot monitor dashboard\ndocker-pilot monitor alerts\ndocker-pilot monitor export --format json\n</code></pre> <p>Configura\u00e7\u00e3o:</p> <pre><code># docker-pilot.yml\nplugins:\n  monitoring:\n    enabled: true\n    config:\n      metrics:\n        - cpu\n        - memory\n        - network\n        - disk\n      alerts:\n        cpu_threshold: 80\n        memory_threshold: 85\n        disk_threshold: 90\n      dashboard:\n        port: 3030\n        auth: true\n</code></pre>"},{"location":"advanced/plugins/#plugin-de-notificacoes","title":"Plugin de Notifica\u00e7\u00f5es","text":"<p>Envia notifica\u00e7\u00f5es para diferentes canais.</p> <pre><code># Instalar plugin de notifica\u00e7\u00f5es\ndocker-pilot plugin install @docker-pilot/notifications\n\n# Configurar notifica\u00e7\u00f5es\ndocker-pilot notifications setup slack\ndocker-pilot notifications test\n</code></pre> <p>Configura\u00e7\u00e3o:</p> <pre><code># docker-pilot.yml\nplugins:\n  notifications:\n    enabled: true\n    config:\n      channels:\n        slack:\n          webhook_url: \"https://hooks.slack.com/...\"\n          channel: \"#devops\"\n        email:\n          smtp_server: \"smtp.gmail.com\"\n          from: \"noreply@empresa.com\"\n        discord:\n          webhook_url: \"https://discord.com/api/webhooks/...\"\n</code></pre>"},{"location":"advanced/plugins/#plugin-de-deploy","title":"Plugin de Deploy","text":"<p>Facilita deploys para diferentes ambientes.</p> <pre><code># Instalar plugin de deploy\ndocker-pilot plugin install @docker-pilot/deploy\n\n# Fazer deploy\ndocker-pilot deploy staging\ndocker-pilot deploy production --confirm\n</code></pre> <p>Configura\u00e7\u00e3o:</p> <pre><code># docker-pilot.yml\nplugins:\n  deploy:\n    enabled: true\n    config:\n      environments:\n        staging:\n          registry: \"registry.staging.com\"\n          namespace: \"staging\"\n          auto_deploy: true\n        production:\n          registry: \"registry.prod.com\"\n          namespace: \"production\"\n          auto_deploy: false\n          require_confirmation: true\n</code></pre>"},{"location":"advanced/plugins/#plugins-da-comunidade","title":"Plugins da Comunidade","text":""},{"location":"advanced/plugins/#plugin-kubernetes","title":"Plugin Kubernetes","text":"<p>Integra\u00e7\u00e3o com Kubernetes.</p> <pre><code># Instalar plugin k8s\ndocker-pilot plugin install kubernetes-integration\n\n# Gerar manifests K8s\ndocker-pilot k8s generate\ndocker-pilot k8s apply --environment staging\n</code></pre>"},{"location":"advanced/plugins/#plugin-aws","title":"Plugin AWS","text":"<p>Integra\u00e7\u00e3o com servi\u00e7os AWS.</p> <pre><code># Instalar plugin AWS\ndocker-pilot plugin install aws-integration\n\n# Deploy para ECS\ndocker-pilot aws ecs deploy\ndocker-pilot aws ecr push\n</code></pre>"},{"location":"advanced/plugins/#plugin-cicd","title":"Plugin CI/CD","text":"<p>Integra\u00e7\u00e3o com pipelines de CI/CD.</p> <pre><code># Instalar plugin CI/CD\ndocker-pilot plugin install cicd-integration\n\n# Gerar pipeline\ndocker-pilot cicd generate --provider github-actions\ndocker-pilot cicd generate --provider gitlab-ci\n</code></pre>"},{"location":"advanced/plugins/#desenvolvendo-plugins","title":"Desenvolvendo Plugins","text":""},{"location":"advanced/plugins/#criando-um-plugin-basico","title":"Criando um Plugin B\u00e1sico","text":"<ol> <li>Criar estrutura b\u00e1sica:</li> </ol> <pre><code>mkdir meu-plugin\ncd meu-plugin\nnpm init -y\n</code></pre> <ol> <li>Criar manifesto do plugin:</li> </ol> <pre><code># plugin.yml\nname: \"meu-plugin\"\nversion: \"1.0.0\"\ndescription: \"Meu plugin personalizado\"\nauthor: \"Seu Nome\"\nhomepage: \"https://github.com/usuario/meu-plugin\"\n\n# Metadados\nmetadata:\n  category: \"utility\"\n  tags:\n    - \"custom\"\n    - \"automation\"\n\n# Compatibilidade\ncompatibility:\n  docker_pilot: \"&gt;=1.0.0\"\n  node: \"&gt;=14.0.0\"\n\n# Configura\u00e7\u00e3o\nconfig:\n  schema:\n    type: \"object\"\n    properties:\n      api_key:\n        type: \"string\"\n        description: \"API key para integra\u00e7\u00e3o\"\n      timeout:\n        type: \"number\"\n        default: 30\n        description: \"Timeout em segundos\"\n\n# Comandos\ncommands:\n  - name: \"hello\"\n    description: \"Comando de exemplo\"\n    handler: \"./commands/hello.js\"\n  - name: \"status\"\n    description: \"Verificar status\"\n    handler: \"./commands/status.js\"\n\n# Hooks\nhooks:\n  before_start:\n    - \"./hooks/pre-start.js\"\n  after_deploy:\n    - \"./hooks/post-deploy.js\"\n\n# Permiss\u00f5es\npermissions:\n  - \"read_config\"\n  - \"execute_commands\"\n  - \"access_network\"\n</code></pre> <ol> <li>Implementar comandos:</li> </ol> <pre><code>// commands/hello.js\nmodule.exports = {\n  name: 'hello',\n  description: 'Comando de exemplo',\n\n  // Op\u00e7\u00f5es do comando\n  options: [\n    {\n      name: 'name',\n      alias: 'n',\n      type: 'string',\n      description: 'Nome para sauda\u00e7\u00e3o',\n      default: 'World'\n    }\n  ],\n\n  // Handler do comando\n  async handler(options, context) {\n    const { name } = options;\n    const { logger, config } = context;\n\n    logger.info(`Hello, ${name}!`);\n\n    // Acessar configura\u00e7\u00e3o do plugin\n    const apiKey = config.get('api_key');\n    if (apiKey) {\n      logger.debug('API key configurada');\n    }\n\n    return {\n      success: true,\n      message: `Hello, ${name}!`\n    };\n  }\n};\n</code></pre> <ol> <li>Implementar hooks:</li> </ol> <pre><code>// hooks/pre-start.js\nmodule.exports = {\n  name: 'pre-start',\n  description: 'Executado antes de iniciar servi\u00e7os',\n\n  async handler(context) {\n    const { logger, services, config } = context;\n\n    logger.info('Executando verifica\u00e7\u00f5es pr\u00e9-inicializa\u00e7\u00e3o...');\n\n    // Verificar se servi\u00e7os est\u00e3o configurados corretamente\n    for (const service of services) {\n      if (!service.healthcheck) {\n        logger.warn(`Servi\u00e7o ${service.name} n\u00e3o possui healthcheck`);\n      }\n    }\n\n    return {\n      success: true\n    };\n  }\n};\n</code></pre>"},{"location":"advanced/plugins/#api-do-plugin","title":"API do Plugin","text":""},{"location":"advanced/plugins/#context-object","title":"Context Object","text":"<p>O objeto <code>context</code> fornecido aos handlers cont\u00e9m:</p> <pre><code>{\n  // Logger configurado\n  logger: {\n    debug: (message) =&gt; {},\n    info: (message) =&gt; {},\n    warn: (message) =&gt; {},\n    error: (message) =&gt; {}\n  },\n\n  // Configura\u00e7\u00e3o do plugin\n  config: {\n    get: (key) =&gt; {},\n    set: (key, value) =&gt; {},\n    has: (key) =&gt; {}\n  },\n\n  // Servi\u00e7os do projeto\n  services: [\n    {\n      name: 'api',\n      image: 'myapp/api',\n      ports: ['3000:3000'],\n      // ...\n    }\n  ],\n\n  // Utilit\u00e1rios Docker\n  docker: {\n    exec: (container, command) =&gt; {},\n    logs: (container, options) =&gt; {},\n    inspect: (container) =&gt; {}\n  },\n\n  // Sistema de arquivos\n  fs: {\n    readFile: (path) =&gt; {},\n    writeFile: (path, content) =&gt; {},\n    exists: (path) =&gt; {}\n  },\n\n  // HTTP client\n  http: {\n    get: (url, options) =&gt; {},\n    post: (url, data, options) =&gt; {}\n  }\n}\n</code></pre>"},{"location":"advanced/plugins/#plugin-avancado","title":"Plugin Avan\u00e7ado","text":"<pre><code>// index.js\nimport path  from \"path\";\n\nclass MeuPlugin {\n  constructor(context) {\n    this.context = context;\n    this.config = context.config;\n    this.logger = context.logger;\n  }\n\n  // Inicializa\u00e7\u00e3o do plugin\n  async initialize() {\n    this.logger.info('Inicializando Meu Plugin...');\n\n    // Validar configura\u00e7\u00e3o\n    if (!this.config.get('api_key')) {\n      throw new Error('API key \u00e9 obrigat\u00f3ria');\n    }\n\n    // Configurar recursos\n    await this.setupResources();\n  }\n\n  // Configurar recursos\n  async setupResources() {\n    // Criar diret\u00f3rios necess\u00e1rios\n    const dataDir = path.join(process.cwd(), '.meu-plugin');\n    if (!this.context.fs.exists(dataDir)) {\n      await this.context.fs.mkdir(dataDir, { recursive: true });\n    }\n  }\n\n  // Limpeza do plugin\n  async cleanup() {\n    this.logger.info('Limpando recursos do plugin...');\n    // Limpeza de recursos\n  }\n\n  // Comando personalizado\n  async executeCustomCommand(args) {\n    this.logger.info('Executando comando personalizado...');\n\n    // L\u00f3gica do comando\n    const result = await this.processData(args);\n\n    return {\n      success: true,\n      data: result\n    };\n  }\n\n  // Processamento interno\n  async processData(data) {\n    // Implementar l\u00f3gica espec\u00edfica\n    return data;\n  }\n}\n\nmodule.exports = MeuPlugin;\n</code></pre>"},{"location":"advanced/plugins/#instalacao-de-plugins","title":"Instala\u00e7\u00e3o de Plugins","text":""},{"location":"advanced/plugins/#metodos-de-instalacao","title":"M\u00e9todos de Instala\u00e7\u00e3o","text":"<ol> <li> <p>NPM Registry: <pre><code>docker-pilot plugin install @docker-pilot/backup\ndocker-pilot plugin install meu-plugin-personalizado\n</code></pre></p> </li> <li> <p>Git Repository: <pre><code>docker-pilot plugin install https://github.com/usuario/meu-plugin.git\ndocker-pilot plugin install git+ssh://git@github.com/usuario/meu-plugin.git\n</code></pre></p> </li> <li> <p>Local Path: <pre><code>docker-pilot plugin install ./plugins/meu-plugin\ndocker-pilot plugin install /caminho/absoluto/para/plugin\n</code></pre></p> </li> <li> <p>Tarball: <pre><code>docker-pilot plugin install https://example.com/meu-plugin.tar.gz\ndocker-pilot plugin install ./meu-plugin.tar.gz\n</code></pre></p> </li> </ol>"},{"location":"advanced/plugins/#gerenciamento-de-plugins","title":"Gerenciamento de Plugins","text":"<pre><code># Listar plugins instalados\ndocker-pilot plugin list\n\n# Mostrar informa\u00e7\u00f5es de um plugin\ndocker-pilot plugin info meu-plugin\n\n# Habilitar/desabilitar plugin\ndocker-pilot plugin enable meu-plugin\ndocker-pilot plugin disable meu-plugin\n\n# Atualizar plugin\ndocker-pilot plugin update meu-plugin\ndocker-pilot plugin update --all\n\n# Remover plugin\ndocker-pilot plugin remove meu-plugin\n\n# Verificar atualiza\u00e7\u00f5es\ndocker-pilot plugin outdated\n</code></pre>"},{"location":"advanced/plugins/#configuracao-de-plugins","title":"Configura\u00e7\u00e3o de Plugins","text":""},{"location":"advanced/plugins/#configuracao-global","title":"Configura\u00e7\u00e3o Global","text":"<pre><code># ~/.docker-pilot/config.yml\nplugins:\n  # Diret\u00f3rio de plugins\n  directory: \"~/.docker-pilot/plugins\"\n\n  # Auto-carregamento\n  auto_load: true\n\n  # Registry de plugins\n  registry: \"https://registry.docker-pilot.com\"\n\n  # Cache\n  cache:\n    enabled: true\n    ttl: 3600\n\n  # Plugins habilitados globalmente\n  global:\n    - \"@docker-pilot/backup\"\n    - \"@docker-pilot/monitoring\"\n</code></pre>"},{"location":"advanced/plugins/#configuracao-por-projeto","title":"Configura\u00e7\u00e3o por Projeto","text":"<pre><code># docker-pilot.yml\nplugins:\n  # Plugins espec\u00edficos do projeto\n  enabled:\n    - \"meu-plugin\"\n    - \"@docker-pilot/deploy\"\n\n  # Configura\u00e7\u00e3o dos plugins\n  config:\n    meu-plugin:\n      api_key: \"${PLUGIN_API_KEY}\"\n      timeout: 30\n\n    deploy:\n      environments:\n        staging:\n          registry: \"staging.registry.com\"\n        production:\n          registry: \"prod.registry.com\"\n</code></pre>"},{"location":"advanced/plugins/#marketplace-de-plugins","title":"Marketplace de Plugins","text":""},{"location":"advanced/plugins/#navegacao","title":"Navega\u00e7\u00e3o","text":"<pre><code># Buscar plugins\ndocker-pilot plugin search backup\ndocker-pilot plugin search --category monitoring\n\n# Mostrar detalhes\ndocker-pilot plugin view @docker-pilot/backup\n\n# Avaliar plugin\ndocker-pilot plugin rate @docker-pilot/backup 5\n</code></pre>"},{"location":"advanced/plugins/#publicacao","title":"Publica\u00e7\u00e3o","text":"<pre><code># Validar plugin\ndocker-pilot plugin validate\n\n# Publicar plugin\ndocker-pilot plugin publish\n\n# Atualizar vers\u00e3o\ndocker-pilot plugin publish --version 1.1.0\n</code></pre>"},{"location":"advanced/plugins/#debugging-de-plugins","title":"Debugging de Plugins","text":""},{"location":"advanced/plugins/#logs-de-plugin","title":"Logs de Plugin","text":"<pre><code># Logs espec\u00edficos do plugin\ndocker-pilot plugin logs meu-plugin\n\n# Logs em tempo real\ndocker-pilot plugin logs meu-plugin --follow\n\n# N\u00edvel de debug\ndocker-pilot --log-level debug plugin logs meu-plugin\n</code></pre>"},{"location":"advanced/plugins/#modo-debug","title":"Modo Debug","text":"<pre><code># Executar plugin em modo debug\ndocker-pilot --debug plugin run meu-plugin comando\n\n# Validar plugin\ndocker-pilot plugin validate ./meu-plugin --verbose\n</code></pre>"},{"location":"advanced/plugins/#seguranca-de-plugins","title":"Seguran\u00e7a de Plugins","text":""},{"location":"advanced/plugins/#permissoes","title":"Permiss\u00f5es","text":"<p>Os plugins devem declarar permiss\u00f5es necess\u00e1rias:</p> <pre><code># plugin.yml\npermissions:\n  - \"read_config\"        # Ler configura\u00e7\u00e3o\n  - \"write_config\"       # Escrever configura\u00e7\u00e3o\n  - \"execute_commands\"   # Executar comandos\n  - \"access_network\"     # Acesso \u00e0 rede\n  - \"read_filesystem\"    # Ler sistema de arquivos\n  - \"write_filesystem\"   # Escrever sistema de arquivos\n  - \"access_docker\"      # Acesso ao Docker daemon\n</code></pre>"},{"location":"advanced/plugins/#sandbox","title":"Sandbox","text":"<p>Plugins s\u00e3o executados em ambiente sandboxed:</p> <ul> <li>Acesso limitado ao sistema de arquivos</li> <li>Rede controlada</li> <li>Recursos limitados</li> <li>Permiss\u00f5es expl\u00edcitas</li> </ul>"},{"location":"advanced/plugins/#verificacao","title":"Verifica\u00e7\u00e3o","text":"<pre><code># Verificar assinatura do plugin\ndocker-pilot plugin verify meu-plugin\n\n# Auditoria de seguran\u00e7a\ndocker-pilot plugin audit meu-plugin\n</code></pre>"},{"location":"advanced/plugins/#exemplos-praticos","title":"Exemplos Pr\u00e1ticos","text":""},{"location":"advanced/plugins/#plugin-de-integracao-com-slack","title":"Plugin de Integra\u00e7\u00e3o com Slack","text":"<pre><code>// commands/notify.js\nmodule.exports = {\n  name: 'notify',\n  description: 'Enviar notifica\u00e7\u00e3o para Slack',\n\n  options: [\n    {\n      name: 'message',\n      alias: 'm',\n      type: 'string',\n      description: 'Mensagem para enviar',\n      required: true\n    },\n    {\n      name: 'channel',\n      alias: 'c',\n      type: 'string',\n      description: 'Canal do Slack'\n    }\n  ],\n\n  async handler(options, context) {\n    const { message, channel } = options;\n    const { config, http, logger } = context;\n\n    const webhookUrl = config.get('webhook_url');\n    const defaultChannel = config.get('default_channel');\n\n    try {\n      await http.post(webhookUrl, {\n        text: message,\n        channel: channel || defaultChannel\n      });\n\n      logger.info('Notifica\u00e7\u00e3o enviada com sucesso');\n      return { success: true };\n    } catch (error) {\n      logger.error('Erro ao enviar notifica\u00e7\u00e3o:', error.message);\n      return { success: false, error: error.message };\n    }\n  }\n};\n</code></pre>"},{"location":"advanced/plugins/#plugin-de-backup-customizado","title":"Plugin de Backup Customizado","text":"<pre><code>// commands/backup.js\nimport tar  from \"tar\";\nconst fs = require('fs').promises;\n\nmodule.exports = {\n  name: 'backup',\n  description: 'Criar backup customizado',\n\n  async handler(options, context) {\n    const { logger, docker, config } = context;\n\n    const backupPath = config.get('backup_path') || './backups';\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const backupFile = `${backupPath}/backup-${timestamp}.tar.gz`;\n\n    try {\n      // Criar diret\u00f3rio de backup\n      await fs.mkdir(backupPath, { recursive: true });\n\n      // Parar servi\u00e7os temporariamente\n      logger.info('Parando servi\u00e7os...');\n      await docker.exec('docker-pilot', ['stop', '--all']);\n\n      // Criar backup dos volumes\n      logger.info('Criando backup...');\n      await tar.create({\n        gzip: true,\n        file: backupFile\n      }, ['./data', './config']);\n\n      // Reiniciar servi\u00e7os\n      logger.info('Reiniciando servi\u00e7os...');\n      await docker.exec('docker-pilot', ['start', '--all']);\n\n      logger.info(`Backup criado: ${backupFile}`);\n      return { success: true, backup_file: backupFile };\n\n    } catch (error) {\n      logger.error('Erro no backup:', error.message);\n      return { success: false, error: error.message };\n    }\n  }\n};\n</code></pre>"},{"location":"advanced/plugins/#contribuindo","title":"Contribuindo","text":""},{"location":"advanced/plugins/#como-contribuir","title":"Como Contribuir","text":"<ol> <li>Fork o reposit\u00f3rio</li> <li>Criar branch para feature</li> <li>Desenvolver plugin</li> <li>Escrever testes</li> <li>Documentar plugin</li> <li>Enviar pull request</li> </ol>"},{"location":"advanced/plugins/#diretrizes","title":"Diretrizes","text":"<ul> <li>Seguir padr\u00f5es de c\u00f3digo</li> <li>Incluir testes unit\u00e1rios</li> <li>Documentar adequadamente</li> <li>Usar semantic versioning</li> <li>Suportar i18n quando aplic\u00e1vel</li> </ul>"},{"location":"advanced/plugins/#templates","title":"Templates","text":"<p>O Docker Pilot fornece templates para diferentes tipos de plugins:</p> <pre><code># Criar plugin a partir de template\ndocker-pilot plugin create --template command meu-comando\ndocker-pilot plugin create --template integration minha-integracao\ndocker-pilot plugin create --template monitoring meu-monitor\n</code></pre>"},{"location":"advanced/plugins/#veja-tambem","title":"Veja Tamb\u00e9m","text":"<ul> <li>Comandos</li> <li>Configura\u00e7\u00e3o</li> <li>Desenvolvimento</li> <li>API Reference</li> </ul>"},{"location":"api/commands/","title":"Commands API","text":"<p>Docker Pilot offers a comprehensive set of commands for managing your Docker services and containers efficiently.</p>"},{"location":"api/commands/#main-commands","title":"Main Commands","text":""},{"location":"api/commands/#docker-pilot-start","title":"docker-pilot start","text":"<p>Start one or more services.</p> <pre><code>docker-pilot start &lt;service-name&gt;\ndocker-pilot start &lt;service1&gt; &lt;service2&gt; &lt;service3&gt;\ndocker-pilot start --all\n</code></pre> <p>Options: - <code>--detach, -d</code>: Run in detached mode - <code>--build</code>: Rebuild images before starting - <code>--force-recreate</code>: Force recreation of containers - <code>--no-deps</code>: Don't start linked services - <code>--timeout &lt;seconds&gt;</code>: Shutdown timeout (default: 10s)</p> <p>Examples: <pre><code># Start specific service\ndocker-pilot start database\n\n# Start multiple services\ndocker-pilot start api frontend database\n\n# Start all services\ndocker-pilot start --all\n\n# Start with rebuild\ndocker-pilot start api --build\n</code></pre></p>"},{"location":"api/commands/#docker-pilot-stop","title":"docker-pilot stop","text":"<p>Stop one or more services.</p> <pre><code>docker-pilot stop &lt;service-name&gt;\ndocker-pilot stop &lt;service1&gt; &lt;service2&gt;\ndocker-pilot stop --all\n</code></pre> <p>Options: - <code>--timeout &lt;seconds&gt;</code>: Shutdown timeout (default: 10s) - <code>--force</code>: For\u00e7ar parada (kill ao inv\u00e9s de stop)</p> <p>Exemplos: <pre><code># Parar servi\u00e7o espec\u00edfico\ndocker-pilot stop database\n\n# Parar todos os servi\u00e7os\ndocker-pilot stop --all\n\n# Parar com timeout personalizado\ndocker-pilot stop api --timeout 30\n</code></pre></p>"},{"location":"api/commands/#docker-pilot-restart","title":"docker-pilot restart","text":"<p>Reinicia um ou mais servi\u00e7os.</p> <pre><code>docker-pilot restart &lt;service-name&gt;\ndocker-pilot restart --all\n</code></pre> <p>Op\u00e7\u00f5es: - <code>--timeout &lt;seconds&gt;</code>: Timeout para parada (padr\u00e3o: 10s) - <code>--build</code>: Reconstruir imagens antes de reiniciar - <code>--force-recreate</code>: For\u00e7ar recria\u00e7\u00e3o dos cont\u00eaineres</p> <p>Exemplos: <pre><code># Reiniciar servi\u00e7o espec\u00edfico\ndocker-pilot restart api\n\n# Reiniciar com rebuild\ndocker-pilot restart api --build\n</code></pre></p>"},{"location":"api/commands/#docker-pilot-status","title":"docker-pilot status","text":"<p>Mostra o status dos servi\u00e7os.</p> <pre><code>docker-pilot status\ndocker-pilot status &lt;service-name&gt;\n</code></pre> <p>Op\u00e7\u00f5es: - <code>--format &lt;table|json|yaml&gt;</code>: Formato de sa\u00edda - <code>--watch, -w</code>: Modo watch (atualiza\u00e7\u00e3o cont\u00ednua) - <code>--refresh &lt;seconds&gt;</code>: Intervalo de atualiza\u00e7\u00e3o no modo watch</p> <p>Exemplos: <pre><code># Status de todos os servi\u00e7os\ndocker-pilot status\n\n# Status em formato JSON\ndocker-pilot status --format json\n\n# Modo watch com atualiza\u00e7\u00e3o a cada 2 segundos\ndocker-pilot status --watch --refresh 2\n</code></pre></p>"},{"location":"api/commands/#docker-pilot-logs","title":"docker-pilot logs","text":"<p>Visualiza logs dos servi\u00e7os.</p> <pre><code>docker-pilot logs &lt;service-name&gt;\ndocker-pilot logs --all\n</code></pre> <p>Op\u00e7\u00f5es: - <code>--follow, -f</code>: Seguir logs em tempo real - <code>--tail &lt;number&gt;</code>: Mostrar apenas as \u00faltimas N linhas - <code>--since &lt;timestamp&gt;</code>: Mostrar logs desde timestamp - <code>--until &lt;timestamp&gt;</code>: Mostrar logs at\u00e9 timestamp - <code>--timestamps</code>: Incluir timestamps - <code>--no-color</code>: Desabilitar cores</p> <p>Exemplos: <pre><code># Logs de um servi\u00e7o\ndocker-pilot logs api\n\n# Logs em tempo real\ndocker-pilot logs api --follow\n\n# \u00daltimas 100 linhas\ndocker-pilot logs api --tail 100\n\n# Logs desde ontem\ndocker-pilot logs api --since \"24h\"\n</code></pre></p>"},{"location":"api/commands/#comandos-de-configuracao","title":"Comandos de Configura\u00e7\u00e3o","text":""},{"location":"api/commands/#docker-pilot-config","title":"docker-pilot config","text":"<p>Gerencia configura\u00e7\u00f5es do projeto.</p> <pre><code>docker-pilot config &lt;subcommand&gt;\n</code></pre> <p>Subcomandos:</p>"},{"location":"api/commands/#docker-pilot-config-init","title":"docker-pilot config init","text":"<p>Inicializa configura\u00e7\u00e3o em um novo projeto.</p> <pre><code>docker-pilot config init\ndocker-pilot config init --template &lt;template-name&gt;\n</code></pre> <p>Templates dispon\u00edveis: - <code>web</code>: Aplica\u00e7\u00e3o web (frontend + backend + database) - <code>api</code>: API REST - <code>microservices</code>: Arquitetura de microsservi\u00e7os - <code>basic</code>: Configura\u00e7\u00e3o b\u00e1sica</p>"},{"location":"api/commands/#docker-pilot-config-validate","title":"docker-pilot config validate","text":"<p>Valida arquivos de configura\u00e7\u00e3o.</p> <pre><code>docker-pilot config validate\ndocker-pilot config validate &lt;config-file&gt;\n</code></pre>"},{"location":"api/commands/#docker-pilot-config-show","title":"docker-pilot config show","text":"<p>Mostra configura\u00e7\u00e3o atual.</p> <pre><code>docker-pilot config show\ndocker-pilot config show --format &lt;yaml|json&gt;\n</code></pre>"},{"location":"api/commands/#docker-pilot-config-set","title":"docker-pilot config set","text":"<p>Define valores de configura\u00e7\u00e3o.</p> <pre><code>docker-pilot config set &lt;key&gt; &lt;value&gt;\n</code></pre> <p>Exemplos: <pre><code>docker-pilot config set project.name \"My Project\"\ndocker-pilot config set services.api.port 3000\n</code></pre></p>"},{"location":"api/commands/#docker-pilot-config-get","title":"docker-pilot config get","text":"<p>Obt\u00e9m valores de configura\u00e7\u00e3o.</p> <pre><code>docker-pilot config get &lt;key&gt;\n</code></pre>"},{"location":"api/commands/#comandos-de-build","title":"Comandos de Build","text":""},{"location":"api/commands/#docker-pilot-build","title":"docker-pilot build","text":"<p>Constr\u00f3i imagens dos servi\u00e7os.</p> <pre><code>docker-pilot build\ndocker-pilot build &lt;service-name&gt;\n</code></pre> <p>Op\u00e7\u00f5es: - <code>--no-cache</code>: N\u00e3o usar cache de build - <code>--pull</code>: Sempre puxar imagens base mais recentes - <code>--parallel</code>: Build em paralelo - <code>--progress &lt;auto|plain|tty&gt;</code>: Tipo de sa\u00edda do progresso</p> <p>Exemplos: <pre><code># Build de todos os servi\u00e7os\ndocker-pilot build\n\n# Build sem cache\ndocker-pilot build --no-cache\n\n# Build paralelo\ndocker-pilot build --parallel\n</code></pre></p>"},{"location":"api/commands/#docker-pilot-push","title":"docker-pilot push","text":"<p>Envia imagens para registry.</p> <pre><code>docker-pilot push\ndocker-pilot push &lt;service-name&gt;\n</code></pre> <p>Op\u00e7\u00f5es: - <code>--registry &lt;url&gt;</code>: Registry de destino - <code>--tag &lt;tag&gt;</code>: Tag a ser aplicada</p>"},{"location":"api/commands/#comandos-de-rede","title":"Comandos de Rede","text":""},{"location":"api/commands/#docker-pilot-network","title":"docker-pilot network","text":"<p>Gerencia redes Docker.</p> <pre><code>docker-pilot network &lt;subcommand&gt;\n</code></pre> <p>Subcomandos:</p>"},{"location":"api/commands/#docker-pilot-network-list","title":"docker-pilot network list","text":"<p>Lista redes do projeto.</p> <pre><code>docker-pilot network list\n</code></pre>"},{"location":"api/commands/#docker-pilot-network-create","title":"docker-pilot network create","text":"<p>Cria nova rede.</p> <pre><code>docker-pilot network create &lt;network-name&gt;\n</code></pre>"},{"location":"api/commands/#docker-pilot-network-remove","title":"docker-pilot network remove","text":"<p>Remove rede.</p> <pre><code>docker-pilot network remove &lt;network-name&gt;\n</code></pre>"},{"location":"api/commands/#comandos-de-volume","title":"Comandos de Volume","text":""},{"location":"api/commands/#docker-pilot-volume","title":"docker-pilot volume","text":"<p>Gerencia volumes Docker.</p> <pre><code>docker-pilot volume &lt;subcommand&gt;\n</code></pre> <p>Subcomandos:</p>"},{"location":"api/commands/#docker-pilot-volume-list","title":"docker-pilot volume list","text":"<p>Lista volumes do projeto.</p> <pre><code>docker-pilot volume list\n</code></pre>"},{"location":"api/commands/#docker-pilot-volume-create","title":"docker-pilot volume create","text":"<p>Cria novo volume.</p> <pre><code>docker-pilot volume create &lt;volume-name&gt;\n</code></pre>"},{"location":"api/commands/#docker-pilot-volume-remove","title":"docker-pilot volume remove","text":"<p>Remove volume.</p> <pre><code>docker-pilot volume remove &lt;volume-name&gt;\n</code></pre>"},{"location":"api/commands/#docker-pilot-volume-backup","title":"docker-pilot volume backup","text":"<p>Faz backup de volume.</p> <pre><code>docker-pilot volume backup &lt;volume-name&gt; &lt;backup-path&gt;\n</code></pre>"},{"location":"api/commands/#docker-pilot-volume-restore","title":"docker-pilot volume restore","text":"<p>Restaura volume de backup.</p> <pre><code>docker-pilot volume restore &lt;volume-name&gt; &lt;backup-path&gt;\n</code></pre>"},{"location":"api/commands/#comandos-de-plugin","title":"Comandos de Plugin","text":""},{"location":"api/commands/#docker-pilot-plugin","title":"docker-pilot plugin","text":"<p>Gerencia plugins do Docker Pilot.</p> <pre><code>docker-pilot plugin &lt;subcommand&gt;\n</code></pre> <p>Subcomandos:</p>"},{"location":"api/commands/#docker-pilot-plugin-list","title":"docker-pilot plugin list","text":"<p>Lista plugins instalados.</p> <pre><code>docker-pilot plugin list\n</code></pre>"},{"location":"api/commands/#docker-pilot-plugin-install","title":"docker-pilot plugin install","text":"<p>Instala novo plugin.</p> <pre><code>docker-pilot plugin install &lt;plugin-name&gt;\ndocker-pilot plugin install &lt;git-url&gt;\ndocker-pilot plugin install &lt;local-path&gt;\n</code></pre>"},{"location":"api/commands/#docker-pilot-plugin-remove","title":"docker-pilot plugin remove","text":"<p>Remove plugin.</p> <pre><code>docker-pilot plugin remove &lt;plugin-name&gt;\n</code></pre>"},{"location":"api/commands/#docker-pilot-plugin-enable","title":"docker-pilot plugin enable","text":"<p>Habilita plugin.</p> <pre><code>docker-pilot plugin enable &lt;plugin-name&gt;\n</code></pre>"},{"location":"api/commands/#docker-pilot-plugin-disable","title":"docker-pilot plugin disable","text":"<p>Desabilita plugin.</p> <pre><code>docker-pilot plugin disable &lt;plugin-name&gt;\n</code></pre>"},{"location":"api/commands/#comandos-de-monitoramento","title":"Comandos de Monitoramento","text":""},{"location":"api/commands/#docker-pilot-monitor","title":"docker-pilot monitor","text":"<p>Inicia monitoramento de servi\u00e7os.</p> <pre><code>docker-pilot monitor\ndocker-pilot monitor &lt;service-name&gt;\n</code></pre> <p>Op\u00e7\u00f5es: - <code>--metrics</code>: Mostrar m\u00e9tricas detalhadas - <code>--alerts</code>: Mostrar apenas alertas - <code>--export &lt;file&gt;</code>: Exportar dados para arquivo</p>"},{"location":"api/commands/#docker-pilot-health","title":"docker-pilot health","text":"<p>Verifica sa\u00fade dos servi\u00e7os.</p> <pre><code>docker-pilot health\ndocker-pilot health &lt;service-name&gt;\n</code></pre> <p>Op\u00e7\u00f5es: - <code>--format &lt;table|json|yaml&gt;</code>: Formato de sa\u00edda - <code>--timeout &lt;seconds&gt;</code>: Timeout para verifica\u00e7\u00e3o</p>"},{"location":"api/commands/#comandos-de-backup","title":"Comandos de Backup","text":""},{"location":"api/commands/#docker-pilot-backup","title":"docker-pilot backup","text":"<p>Faz backup do projeto.</p> <pre><code>docker-pilot backup &lt;backup-path&gt;\n</code></pre> <p>Op\u00e7\u00f5es: - <code>--include-volumes</code>: Incluir volumes - <code>--include-images</code>: Incluir imagens - <code>--compress</code>: Comprimir backup</p>"},{"location":"api/commands/#docker-pilot-restore","title":"docker-pilot restore","text":"<p>Restaura projeto de backup.</p> <pre><code>docker-pilot restore &lt;backup-path&gt;\n</code></pre> <p>Op\u00e7\u00f5es: - <code>--force</code>: For\u00e7ar restaura\u00e7\u00e3o - <code>--exclude-volumes</code>: Excluir volumes</p>"},{"location":"api/commands/#comandos-de-utilitarios","title":"Comandos de Utilit\u00e1rios","text":""},{"location":"api/commands/#docker-pilot-exec","title":"docker-pilot exec","text":"<p>Executa comando em cont\u00eainer.</p> <pre><code>docker-pilot exec &lt;service-name&gt; &lt;command&gt;\n</code></pre> <p>Op\u00e7\u00f5es: - <code>--interactive, -i</code>: Modo interativo - <code>--tty, -t</code>: Alocar TTY - <code>--user &lt;user&gt;</code>: Usu\u00e1rio para execu\u00e7\u00e3o</p> <p>Exemplos: <pre><code># Shell interativo\ndocker-pilot exec api bash\n\n# Comando espec\u00edfico\ndocker-pilot exec database psql -U postgres\n</code></pre></p>"},{"location":"api/commands/#docker-pilot-shell","title":"docker-pilot shell","text":"<p>Abre shell em cont\u00eainer.</p> <pre><code>docker-pilot shell &lt;service-name&gt;\n</code></pre> <p>Op\u00e7\u00f5es: - <code>--shell &lt;shell&gt;</code>: Tipo de shell (bash, sh, zsh) - <code>--user &lt;user&gt;</code>: Usu\u00e1rio</p>"},{"location":"api/commands/#docker-pilot-clean","title":"docker-pilot clean","text":"<p>Limpa recursos n\u00e3o utilizados.</p> <pre><code>docker-pilot clean\n</code></pre> <p>Op\u00e7\u00f5es: - <code>--all</code>: Limpar tudo (imagens, volumes, redes) - <code>--images</code>: Limpar apenas imagens - <code>--volumes</code>: Limpar apenas volumes - <code>--networks</code>: Limpar apenas redes - <code>--force</code>: N\u00e3o pedir confirma\u00e7\u00e3o</p>"},{"location":"api/commands/#docker-pilot-update","title":"docker-pilot update","text":"<p>Atualiza Docker Pilot.</p> <pre><code>docker-pilot update\n</code></pre> <p>Op\u00e7\u00f5es: - <code>--check</code>: Apenas verificar atualiza\u00e7\u00f5es - <code>--beta</code>: Instalar vers\u00e3o beta</p>"},{"location":"api/commands/#docker-pilot-version","title":"docker-pilot version","text":"<p>Mostra informa\u00e7\u00f5es de vers\u00e3o.</p> <pre><code>docker-pilot version\n</code></pre> <p>Op\u00e7\u00f5es: - <code>--short</code>: Mostrar apenas n\u00famero da vers\u00e3o - <code>--build</code>: Incluir informa\u00e7\u00f5es de build</p>"},{"location":"api/commands/#comandos-globais","title":"Comandos Globais","text":"<p>Op\u00e7\u00f5es dispon\u00edveis para todos os comandos:</p> <ul> <li><code>--help, -h</code>: Mostrar ajuda</li> <li><code>--version, -v</code>: Mostrar vers\u00e3o</li> <li><code>--config &lt;file&gt;</code>: Arquivo de configura\u00e7\u00e3o personalizado</li> <li><code>--project-dir &lt;dir&gt;</code>: Diret\u00f3rio do projeto</li> <li><code>--env-file &lt;file&gt;</code>: Arquivo de vari\u00e1veis de ambiente</li> <li><code>--verbose</code>: Modo verboso</li> <li><code>--quiet, -q</code>: Modo silencioso</li> <li><code>--no-color</code>: Desabilitar cores</li> <li><code>--log-level &lt;level&gt;</code>: N\u00edvel de log (debug, info, warn, error)</li> </ul>"},{"location":"api/commands/#autocompletar","title":"Autocompletar","text":"<p>Configure autocompletar para seu shell:</p>"},{"location":"api/commands/#bash","title":"Bash","text":"<pre><code># Adicionar ao ~/.bashrc\neval \"$(docker-pilot completion bash)\"\n</code></pre>"},{"location":"api/commands/#zsh","title":"Zsh","text":"<pre><code># Adicionar ao ~/.zshrc\neval \"$(docker-pilot completion zsh)\"\n</code></pre>"},{"location":"api/commands/#powershell","title":"PowerShell","text":"<pre><code># Adicionar ao perfil do PowerShell\ndocker-pilot completion powershell | Out-String | Invoke-Expression\n</code></pre>"},{"location":"api/commands/#fish","title":"Fish","text":"<pre><code># Adicionar ao ~/.config/fish/config.fish\ndocker-pilot completion fish | source\n</code></pre>"},{"location":"api/commands/#aliases-uteis","title":"Aliases \u00dateis","text":"<p>Configure aliases para comandos frequentes:</p> <pre><code># ~/.bashrc ou ~/.zshrc\nalias dp=\"docker-pilot\"\nalias dps=\"docker-pilot status\"\nalias dpl=\"docker-pilot logs\"\nalias dpstart=\"docker-pilot start\"\nalias dpstop=\"docker-pilot stop\"\nalias dprestart=\"docker-pilot restart\"\n</code></pre>"},{"location":"api/commands/#veja-tambem","title":"Veja Tamb\u00e9m","text":"<ul> <li>Menu Interativo</li> <li>CLI Usage</li> <li>Configura\u00e7\u00e3o</li> <li>Exemplos</li> </ul>"},{"location":"api/core/","title":"Core API","text":"<p>Main API documentation for Docker Pilot.</p>"},{"location":"api/core/#main-classes","title":"Main Classes","text":""},{"location":"api/core/#dockerpilot","title":"DockerPilot","text":"<p>Main class that orchestrates all Docker Pilot functionalities.</p> <pre><code>class DockerPilot {\n  constructor(options: DockerPilotOptions)\n\n  // Main methods\n  async start(services?: string[]): Promise&lt;void&gt;\n  async stop(services?: string[]): Promise&lt;void&gt;\n  async restart(services?: string[]): Promise&lt;void&gt;\n  async status(services?: string[]): Promise&lt;ServiceStatus[]&gt;\n  async logs(service: string, options?: LogOptions): Promise&lt;void&gt;\n  async exec(service: string, command: string, options?: ExecOptions): Promise&lt;void&gt;\n  async build(services?: string[], options?: BuildOptions): Promise&lt;void&gt;\n  async push(services?: string[], options?: PushOptions): Promise&lt;void&gt;\n  async pull(services?: string[], options?: PullOptions): Promise&lt;void&gt;\n\n  // Configuration management\n  async loadConfig(path?: string): Promise&lt;void&gt;\n  async validateConfig(): Promise&lt;ValidationResult&gt;\n\n  // Workflows\n  async runWorkflow(name: string, options?: WorkflowOptions): Promise&lt;void&gt;\n  async listWorkflows(): Promise&lt;Workflow[]&gt;\n\n  // Custom commands\n  async runCustomCommand(name: string, args?: any): Promise&lt;void&gt;\n  async listCustomCommands(): Promise&lt;CustomCommand[]&gt;\n\n  // Monitoring\n  async getMetrics(services?: string[]): Promise&lt;Metrics&gt;\n  async getHealth(services?: string[]): Promise&lt;HealthStatus[]&gt;\n\n  // Plugins\n  async loadPlugin(plugin: string | Plugin): Promise&lt;void&gt;\n  async unloadPlugin(name: string): Promise&lt;void&gt;\n  async listPlugins(): Promise&lt;Plugin[]&gt;\n}\n</code></pre>"},{"location":"api/core/#constructor-options","title":"Constructor Options","text":"<pre><code>interface DockerPilotOptions {\n  configPath?: string\n  projectDir?: string\n  environment?: string\n  verbose?: boolean\n  dryRun?: boolean\n  logLevel?: 'debug' | 'info' | 'warn' | 'error'\n  plugins?: string[]\n}\n</code></pre>"},{"location":"api/core/#exemplo-de-uso","title":"Exemplo de Uso","text":"<pre><code>import { DockerPilot } from '@docker-pilot/core'\n\nconst pilot = new DockerPilot({\n  configPath: './docker-pilot.yml',\n  environment: 'development',\n  verbose: true\n})\n\n// Carregar configura\u00e7\u00e3o\nawait pilot.loadConfig()\n\n// Iniciar servi\u00e7os\nawait pilot.start(['api', 'database'])\n\n// Verificar status\nconst status = await pilot.status()\nconsole.log(status)\n\n// Executar workflow\nawait pilot.runWorkflow('deploy-staging')\n</code></pre>"},{"location":"api/core/#servicemanager","title":"ServiceManager","text":"<p>Gerencia opera\u00e7\u00f5es espec\u00edficas de servi\u00e7os.</p> <pre><code>class ServiceManager {\n  constructor(docker: Docker, config: Config)\n\n  // Opera\u00e7\u00f5es de servi\u00e7o\n  async startService(name: string, options?: ServiceOptions): Promise&lt;void&gt;\n  async stopService(name: string, options?: ServiceOptions): Promise&lt;void&gt;\n  async restartService(name: string, options?: ServiceOptions): Promise&lt;void&gt;\n  async removeService(name: string, options?: ServiceOptions): Promise&lt;void&gt;\n\n  // Status e informa\u00e7\u00f5es\n  async getServiceStatus(name: string): Promise&lt;ServiceStatus&gt;\n  async getServiceLogs(name: string, options?: LogOptions): Promise&lt;string&gt;\n  async getServiceMetrics(name: string): Promise&lt;ServiceMetrics&gt;\n\n  // Execu\u00e7\u00e3o de comandos\n  async execInService(name: string, command: string, options?: ExecOptions): Promise&lt;ExecResult&gt;\n\n  // Scaling\n  async scaleService(name: string, replicas: number): Promise&lt;void&gt;\n\n  // Health checks\n  async checkServiceHealth(name: string): Promise&lt;HealthCheck&gt;\n\n  // Listagem\n  async listServices(filters?: ServiceFilters): Promise&lt;Service[]&gt;\n  async findService(name: string): Promise&lt;Service | null&gt;\n}\n</code></pre>"},{"location":"api/core/#interfaces-de-servico","title":"Interfaces de Servi\u00e7o","text":"<pre><code>interface Service {\n  name: string\n  image: string\n  status: 'running' | 'stopped' | 'starting' | 'stopping'\n  ports: Port[]\n  volumes: Volume[]\n  environment: Record&lt;string, string&gt;\n  networks: string[]\n  healthcheck?: HealthCheckConfig\n  labels: Record&lt;string, string&gt;\n  created: Date\n  updated: Date\n}\n\ninterface ServiceStatus {\n  name: string\n  status: string\n  uptime: number\n  restartCount: number\n  ports: Port[]\n  health: 'healthy' | 'unhealthy' | 'starting' | 'none'\n}\n\ninterface ServiceMetrics {\n  name: string\n  cpu: number\n  memory: {\n    usage: number\n    limit: number\n    percent: number\n  }\n  network: {\n    rx: number\n    tx: number\n  }\n  disk: {\n    read: number\n    write: number\n  }\n}\n</code></pre>"},{"location":"api/core/#configmanager","title":"ConfigManager","text":"<p>Gerencia configura\u00e7\u00f5es do projeto.</p> <pre><code>class ConfigManager {\n  constructor(options?: ConfigOptions)\n\n  // Carregamento de configura\u00e7\u00e3o\n  async load(path?: string): Promise&lt;Config&gt;\n  async loadFromString(content: string, format?: 'yaml' | 'json'): Promise&lt;Config&gt;\n  async reload(): Promise&lt;Config&gt;\n\n  // Valida\u00e7\u00e3o\n  async validate(config?: Config): Promise&lt;ValidationResult&gt;\n  async validateSchema(config: Config, schema: object): Promise&lt;ValidationResult&gt;\n\n  // Manipula\u00e7\u00e3o\n  get(key: string): any\n  set(key: string, value: any): void\n  has(key: string): boolean\n  delete(key: string): void\n\n  // Serializa\u00e7\u00e3o\n  toYAML(): string\n  toJSON(): string\n\n  // Merge e override\n  merge(other: Config): Config\n  override(overrides: Partial&lt;Config&gt;): Config\n\n  // Resolu\u00e7\u00e3o de vari\u00e1veis\n  resolveVariables(): Config\n\n  // Eventos\n  on(event: 'change' | 'reload', callback: (config: Config) =&gt; void): void\n  off(event: string, callback: Function): void\n}\n</code></pre>"},{"location":"api/core/#estrutura-de-configuracao","title":"Estrutura de Configura\u00e7\u00e3o","text":"<pre><code>interface Config {\n  version: string\n  project: ProjectConfig\n  services: Record&lt;string, ServiceConfig&gt;\n  networks?: Record&lt;string, NetworkConfig&gt;\n  volumes?: Record&lt;string, VolumeConfig&gt;\n  workflows?: Record&lt;string, WorkflowConfig&gt;\n  custom_commands?: Record&lt;string, CustomCommandConfig&gt;\n  monitoring?: MonitoringConfig\n  automation?: AutomationConfig\n  plugins?: PluginConfig\n  environments?: Record&lt;string, EnvironmentConfig&gt;\n}\n\ninterface ProjectConfig {\n  name: string\n  description?: string\n  version?: string\n  author?: string\n  license?: string\n  repository?: string\n  tags?: string[]\n}\n\ninterface ServiceConfig {\n  image?: string\n  build?: BuildConfig | string\n  container_name?: string\n  hostname?: string\n  ports?: string[]\n  volumes?: string[]\n  environment?: Record&lt;string, string&gt; | string[]\n  env_file?: string | string[]\n  depends_on?: string[] | Record&lt;string, DependsOnConfig&gt;\n  networks?: string[] | Record&lt;string, NetworkServiceConfig&gt;\n  healthcheck?: HealthCheckConfig\n  restart?: RestartPolicy\n  deploy?: DeployConfig\n  labels?: Record&lt;string, string&gt;\n  profiles?: string[]\n}\n</code></pre>"},{"location":"api/core/#commandrunner","title":"CommandRunner","text":"<p>Executa comandos do sistema e Docker.</p> <pre><code>class CommandRunner {\n  constructor(options?: CommandRunnerOptions)\n\n  // Execu\u00e7\u00e3o de comandos\n  async run(command: string, options?: RunOptions): Promise&lt;RunResult&gt;\n  async runInBackground(command: string, options?: RunOptions): Promise&lt;BackgroundProcess&gt;\n  async runWithStream(command: string, options?: StreamOptions): Promise&lt;void&gt;\n\n  // Comandos Docker\n  async dockerCommand(args: string[], options?: DockerOptions): Promise&lt;RunResult&gt;\n  async dockerCompose(args: string[], options?: ComposeOptions): Promise&lt;RunResult&gt;\n\n  // Utilit\u00e1rios\n  async which(command: string): Promise&lt;string | null&gt;\n  async checkCommand(command: string): Promise&lt;boolean&gt;\n\n  // Process management\n  async killProcess(pid: number): Promise&lt;void&gt;\n  async getProcesses(): Promise&lt;Process[]&gt;\n\n  // Stream handling\n  createReadStream(command: string, options?: StreamOptions): NodeJS.ReadableStream\n  createWriteStream(command: string, options?: StreamOptions): NodeJS.WritableStream\n}\n</code></pre>"},{"location":"api/core/#interfaces-de-comando","title":"Interfaces de Comando","text":"<pre><code>interface RunOptions {\n  cwd?: string\n  env?: Record&lt;string, string&gt;\n  timeout?: number\n  stdio?: 'pipe' | 'inherit' | 'ignore'\n  shell?: boolean\n  input?: string\n}\n\ninterface RunResult {\n  stdout: string\n  stderr: string\n  exitCode: number\n  signal?: string\n  killed: boolean\n  duration: number\n}\n\ninterface BackgroundProcess {\n  pid: number\n  kill(): Promise&lt;void&gt;\n  wait(): Promise&lt;RunResult&gt;\n  isRunning(): boolean\n}\n</code></pre>"},{"location":"api/core/#utilitarios","title":"Utilit\u00e1rios","text":""},{"location":"api/core/#logger","title":"Logger","text":"<p>Sistema de logging integrado.</p> <pre><code>class Logger {\n  constructor(options?: LoggerOptions)\n\n  // M\u00e9todos de log\n  debug(message: string, ...args: any[]): void\n  info(message: string, ...args: any[]): void\n  warn(message: string, ...args: any[]): void\n  error(message: string, ...args: any[]): void\n\n  // Contexto\n  child(context: Record&lt;string, any&gt;): Logger\n  withContext(context: Record&lt;string, any&gt;): Logger\n\n  // Formata\u00e7\u00e3o\n  setLevel(level: LogLevel): void\n  setFormat(format: LogFormat): void\n\n  // Outputs\n  addOutput(output: LogOutput): void\n  removeOutput(output: LogOutput): void\n\n  // Filtros\n  addFilter(filter: LogFilter): void\n  removeFilter(filter: LogFilter): void\n}\n\ninterface LoggerOptions {\n  level?: LogLevel\n  format?: LogFormat\n  outputs?: LogOutput[]\n  context?: Record&lt;string, any&gt;\n}\n\ntype LogLevel = 'debug' | 'info' | 'warn' | 'error'\ntype LogFormat = 'json' | 'text' | 'pretty'\n</code></pre>"},{"location":"api/core/#eventemitter","title":"EventEmitter","text":"<p>Sistema de eventos interno.</p> <pre><code>class EventEmitter {\n  // Registro de eventos\n  on(event: string, listener: Function): void\n  once(event: string, listener: Function): void\n  off(event: string, listener: Function): void\n\n  // Emiss\u00e3o de eventos\n  emit(event: string, ...args: any[]): boolean\n\n  // Utilit\u00e1rios\n  listenerCount(event: string): number\n  eventNames(): string[]\n  removeAllListeners(event?: string): void\n}\n</code></pre>"},{"location":"api/core/#validator","title":"Validator","text":"<p>Valida\u00e7\u00e3o de configura\u00e7\u00f5es e dados.</p> <pre><code>class Validator {\n  constructor(schema?: object)\n\n  // Valida\u00e7\u00e3o\n  validate(data: any, schema?: object): ValidationResult\n  validateAsync(data: any, schema?: object): Promise&lt;ValidationResult&gt;\n\n  // Schema management\n  addSchema(name: string, schema: object): void\n  getSchema(name: string): object | null\n  removeSchema(name: string): void\n\n  // Formatters\n  formatErrors(result: ValidationResult): string\n  formatWarnings(result: ValidationResult): string\n}\n\ninterface ValidationResult {\n  valid: boolean\n  errors: ValidationError[]\n  warnings: ValidationWarning[]\n}\n\ninterface ValidationError {\n  path: string\n  message: string\n  value: any\n  schema: any\n}\n</code></pre>"},{"location":"api/core/#interfaces-globais","title":"Interfaces Globais","text":""},{"location":"api/core/#principais-tipos","title":"Principais Tipos","text":"<pre><code>// Resultado de opera\u00e7\u00f5es\ntype OperationResult&lt;T = any&gt; = {\n  success: boolean\n  data?: T\n  error?: Error\n  duration: number\n}\n\n// Op\u00e7\u00f5es de filtro\ninterface FilterOptions {\n  name?: string | RegExp\n  status?: string[]\n  labels?: Record&lt;string, string&gt;\n  created?: DateRange\n  updated?: DateRange\n}\n\n// Range de datas\ninterface DateRange {\n  from?: Date\n  to?: Date\n}\n\n// Configura\u00e7\u00e3o de porta\ninterface Port {\n  host: number\n  container: number\n  protocol?: 'tcp' | 'udp'\n}\n\n// Configura\u00e7\u00e3o de volume\ninterface Volume {\n  host: string\n  container: string\n  mode?: 'ro' | 'rw'\n}\n\n// Configura\u00e7\u00e3o de rede\ninterface NetworkConfig {\n  driver: string\n  driver_opts?: Record&lt;string, string&gt;\n  ipam?: IPAMConfig\n  external?: boolean\n  name?: string\n  labels?: Record&lt;string, string&gt;\n}\n\n// Health check\ninterface HealthCheckConfig {\n  test: string[]\n  interval?: string\n  timeout?: string\n  retries?: number\n  start_period?: string\n}\n</code></pre>"},{"location":"api/core/#eventos-do-sistema","title":"Eventos do Sistema","text":"<pre><code>// Eventos de servi\u00e7o\ninterface ServiceEvents {\n  'service:starting': { name: string }\n  'service:started': { name: string }\n  'service:stopping': { name: string }\n  'service:stopped': { name: string }\n  'service:error': { name: string, error: Error }\n}\n\n// Eventos de configura\u00e7\u00e3o\ninterface ConfigEvents {\n  'config:loaded': { config: Config }\n  'config:changed': { config: Config, changes: any[] }\n  'config:error': { error: Error }\n}\n\n// Eventos de workflow\ninterface WorkflowEvents {\n  'workflow:started': { name: string }\n  'workflow:completed': { name: string, result: any }\n  'workflow:failed': { name: string, error: Error }\n  'workflow:step': { workflow: string, step: string, status: string }\n}\n</code></pre>"},{"location":"api/core/#exemplos-avancados","title":"Exemplos Avan\u00e7ados","text":""},{"location":"api/core/#criando-um-plugin","title":"Criando um Plugin","text":"<pre><code>import { Plugin, PluginContext } from '@docker-pilot/core'\n\nclass MyPlugin implements Plugin {\n  name = 'my-plugin'\n  version = '1.0.0'\n\n  async initialize(context: PluginContext): Promise&lt;void&gt; {\n    // Registrar comandos\n    context.registerCommand('my-command', this.myCommand.bind(this))\n\n    // Registrar hooks\n    context.registerHook('before_start', this.beforeStart.bind(this))\n\n    // Escutar eventos\n    context.on('service:started', this.onServiceStarted.bind(this))\n  }\n\n  async myCommand(args: any[], context: PluginContext): Promise&lt;void&gt; {\n    const { logger, config, docker } = context\n    logger.info('Executando meu comando personalizado')\n\n    // L\u00f3gica do comando\n  }\n\n  async beforeStart(services: string[], context: PluginContext): Promise&lt;void&gt; {\n    const { logger } = context\n    logger.info(`Preparando para iniciar servi\u00e7os: ${services.join(', ')}`)\n  }\n\n  async onServiceStarted(event: { name: string }, context: PluginContext): Promise&lt;void&gt; {\n    const { logger } = context\n    logger.info(`Servi\u00e7o iniciado: ${event.name}`)\n  }\n\n  async cleanup(context: PluginContext): Promise&lt;void&gt; {\n    // Limpeza do plugin\n  }\n}\n\nexport default MyPlugin\n</code></pre>"},{"location":"api/core/#uso-programatico","title":"Uso Program\u00e1tico","text":"<pre><code>import { DockerPilot } from '@docker-pilot/core'\n\nasync function deployApplication() {\n  const pilot = new DockerPilot({\n    configPath: './docker-pilot.yml',\n    environment: 'production'\n  })\n\n  try {\n    // Carregar configura\u00e7\u00e3o\n    await pilot.loadConfig()\n\n    // Validar configura\u00e7\u00e3o\n    const validation = await pilot.validateConfig()\n    if (!validation.valid) {\n      throw new Error(`Configura\u00e7\u00e3o inv\u00e1lida: ${validation.errors.join(', ')}`)\n    }\n\n    // Fazer backup antes do deploy\n    await pilot.runCustomCommand('backup-db')\n\n    // Build das imagens\n    await pilot.build(undefined, { noCache: true })\n\n    // Push para registry\n    await pilot.push()\n\n    // Deploy via workflow\n    await pilot.runWorkflow('production-deploy')\n\n    // Verificar sa\u00fade dos servi\u00e7os\n    const health = await pilot.getHealth()\n    const unhealthy = health.filter(h =&gt; h.status !== 'healthy')\n\n    if (unhealthy.length &gt; 0) {\n      throw new Error(`Servi\u00e7os n\u00e3o saud\u00e1veis: ${unhealthy.map(h =&gt; h.name).join(', ')}`)\n    }\n\n    console.log('Deploy conclu\u00eddo com sucesso!')\n\n  } catch (error) {\n    console.error('Erro no deploy:', error)\n\n    // Rollback em caso de erro\n    await pilot.runWorkflow('rollback')\n    throw error\n  }\n}\n\n// Executar deploy\ndeployApplication()\n  .then(() =&gt; console.log('Processo finalizado'))\n  .catch(error =&gt; {\n    console.error('Deploy falhou:', error)\n    process.exit(1)\n  })\n</code></pre>"},{"location":"api/core/#veja-tambem","title":"Veja Tamb\u00e9m","text":"<ul> <li>Commands API</li> <li>Utilities API</li> <li>Types API</li> <li>Plugin Development</li> </ul>"},{"location":"api/types/","title":"Types API","text":"<p>This module contains all TypeScript type definitions used in Docker Pilot.</p>"},{"location":"api/types/#overview","title":"Overview","text":"<p>Docker Pilot's type system is designed to provide complete type safety, facilitating development and reducing runtime errors. All types are exported from a central module for easy import.</p>"},{"location":"api/types/#core-types","title":"Core Types","text":""},{"location":"api/types/#dockerpilotconfig","title":"DockerPilotConfig","text":"<p>Main application configuration.</p> <pre><code>interface DockerPilotConfig {\n  /** Docker settings */\n  docker: DockerConfig;\n\n  /** Logging settings */\n  logging: LoggingConfig;\n\n  /** Interface settings */\n  ui: UIConfig;\n\n  /** Plugin settings */\n  plugins: PluginConfig;\n\n  /** Language settings */\n  i18n: I18nConfig;\n\n  /** Advanced settings */\n  advanced?: AdvancedConfig;\n}\n</code></pre>"},{"location":"api/types/#dockerconfig","title":"DockerConfig","text":"<p>Docker-specific configurations.</p> <pre><code>interface DockerConfig {\n  /** Docker host (socket or TCP) */\n  host: string;\n\n  /** Timeout for operations in ms */\n  timeout: number;\n\n  /** Number of retries for failed operations */\n  retries: number;\n\n  /** Vers\u00e3o m\u00ednima do Docker requerida */\n  minVersion?: string;\n\n  /** Configura\u00e7\u00f5es do Docker Compose */\n  compose?: ComposeConfig;\n\n  /** Configura\u00e7\u00f5es do Docker Swarm */\n  swarm?: SwarmConfig;\n}\n</code></pre>"},{"location":"api/types/#loggingconfig","title":"LoggingConfig","text":"<p>Configura\u00e7\u00f5es de logging.</p> <pre><code>interface LoggingConfig {\n  /** N\u00edvel de log */\n  level: LogLevel;\n\n  /** Formato de sa\u00edda */\n  format: LogFormat;\n\n  /** Transportes de log */\n  transports: LogTransport[];\n\n  /** Arquivo de log */\n  file?: string;\n\n  /** Rota\u00e7\u00e3o de logs */\n  rotation?: LogRotationConfig;\n}\n</code></pre>"},{"location":"api/types/#tipos-de-container","title":"Tipos de Container","text":""},{"location":"api/types/#container","title":"Container","text":"<p>Representa\u00e7\u00e3o de um container Docker.</p> <pre><code>interface Container {\n  /** ID \u00fanico do container */\n  id: string;\n\n  /** Nome do container */\n  name: string;\n\n  /** Imagem utilizada */\n  image: string;\n\n  /** Status atual */\n  status: ContainerStatus;\n\n  /** Estado do container */\n  state: ContainerState;\n\n  /** Timestamp de cria\u00e7\u00e3o */\n  created: Date;\n\n  /** Timestamp de in\u00edcio */\n  started?: Date;\n\n  /** Portas mapeadas */\n  ports: PortMapping[];\n\n  /** Volumes montados */\n  mounts: VolumeMount[];\n\n  /** Vari\u00e1veis de ambiente */\n  environment: Record&lt;string, string&gt;;\n\n  /** Labels do container */\n  labels: Record&lt;string, string&gt;;\n\n  /** Configura\u00e7\u00f5es de rede */\n  networks: NetworkConnection[];\n\n  /** Estat\u00edsticas de recursos */\n  stats?: ContainerStats;\n}\n</code></pre>"},{"location":"api/types/#containerstatus","title":"ContainerStatus","text":"<p>Status poss\u00edveis de um container.</p> <pre><code>type ContainerStatus =\n  | 'created'\n  | 'running'\n  | 'paused'\n  | 'restarting'\n  | 'removing'\n  | 'exited'\n  | 'dead';\n</code></pre>"},{"location":"api/types/#containerstate","title":"ContainerState","text":"<p>Estado detalhado do container.</p> <pre><code>interface ContainerState {\n  /** Status atual */\n  status: ContainerStatus;\n\n  /** Container est\u00e1 rodando */\n  running: boolean;\n\n  /** Container est\u00e1 pausado */\n  paused: boolean;\n\n  /** Container est\u00e1 reiniciando */\n  restarting: boolean;\n\n  /** Container foi morto por OOM */\n  oomKilled: boolean;\n\n  /** PID do processo principal */\n  pid: number;\n\n  /** C\u00f3digo de sa\u00edda */\n  exitCode?: number;\n\n  /** Mensagem de erro */\n  error?: string;\n\n  /** Timestamp de in\u00edcio */\n  startedAt?: Date;\n\n  /** Timestamp de finaliza\u00e7\u00e3o */\n  finishedAt?: Date;\n}\n</code></pre>"},{"location":"api/types/#containercreateoptions","title":"ContainerCreateOptions","text":"<p>Op\u00e7\u00f5es para cria\u00e7\u00e3o de container.</p> <pre><code>interface ContainerCreateOptions {\n  /** Nome do container */\n  name?: string;\n\n  /** Hostname do container */\n  hostname?: string;\n\n  /** Comando a ser executado */\n  cmd?: string[];\n\n  /** Entrypoint do container */\n  entrypoint?: string[];\n\n  /** Vari\u00e1veis de ambiente */\n  env?: string[] | Record&lt;string, string&gt;;\n\n  /** Diret\u00f3rio de trabalho */\n  workingDir?: string;\n\n  /** Usu\u00e1rio do container */\n  user?: string;\n\n  /** TTY e stdin */\n  tty?: boolean;\n  stdin?: boolean;\n\n  /** Mapeamento de portas */\n  ports?: PortMapping[];\n\n  /** Volumes a montar */\n  volumes?: VolumeMount[];\n\n  /** Redes a conectar */\n  networks?: string[];\n\n  /** Labels do container */\n  labels?: Record&lt;string, string&gt;;\n\n  /** Configura\u00e7\u00f5es de recursos */\n  resources?: ResourceConfig;\n\n  /** Pol\u00edtica de rein\u00edcio */\n  restart?: RestartPolicy;\n\n  /** Configura\u00e7\u00f5es de seguran\u00e7a */\n  security?: SecurityConfig;\n}\n</code></pre>"},{"location":"api/types/#containerstats","title":"ContainerStats","text":"<p>Estat\u00edsticas de uso de recursos.</p> <pre><code>interface ContainerStats {\n  /** Uso de CPU */\n  cpu: {\n    usage: number;\n    systemUsage: number;\n    cores: number;\n    throttling: {\n      periods: number;\n      throttledPeriods: number;\n      throttledTime: number;\n    };\n  };\n\n  /** Uso de mem\u00f3ria */\n  memory: {\n    usage: number;\n    limit: number;\n    maxUsage: number;\n    cache: number;\n    rss: number;\n    swap: number;\n  };\n\n  /** I/O de rede */\n  network: Record&lt;string, {\n    rxBytes: number;\n    rxPackets: number;\n    rxErrors: number;\n    rxDropped: number;\n    txBytes: number;\n    txPackets: number;\n    txErrors: number;\n    txDropped: number;\n  }&gt;;\n\n  /** I/O de disco */\n  blockIO: {\n    read: number;\n    write: number;\n    readOps: number;\n    writeOps: number;\n  };\n\n  /** PIDs */\n  pids: {\n    current: number;\n    limit: number;\n  };\n\n  /** Timestamp das estat\u00edsticas */\n  timestamp: Date;\n}\n</code></pre>"},{"location":"api/types/#tipos-de-imagem","title":"Tipos de Imagem","text":""},{"location":"api/types/#image","title":"Image","text":"<p>Representa\u00e7\u00e3o de uma imagem Docker.</p> <pre><code>interface Image {\n  /** ID da imagem */\n  id: string;\n\n  /** Tags da imagem */\n  tags: string[];\n\n  /** Digest da imagem */\n  digest?: string;\n\n  /** Tamanho em bytes */\n  size: number;\n\n  /** Tamanho virtual */\n  virtualSize: number;\n\n  /** Timestamp de cria\u00e7\u00e3o */\n  created: Date;\n\n  /** ID da imagem pai */\n  parent?: string;\n\n  /** Arquitetura */\n  architecture: string;\n\n  /** Sistema operacional */\n  os: string;\n\n  /** Configura\u00e7\u00e3o da imagem */\n  config: ImageConfig;\n\n  /** Metadados */\n  metadata: ImageMetadata;\n\n  /** Labels da imagem */\n  labels: Record&lt;string, string&gt;;\n}\n</code></pre>"},{"location":"api/types/#imageconfig","title":"ImageConfig","text":"<p>Configura\u00e7\u00e3o de uma imagem.</p> <pre><code>interface ImageConfig {\n  /** Usu\u00e1rio padr\u00e3o */\n  user?: string;\n\n  /** Portas expostas */\n  exposedPorts?: Record&lt;string, {}&gt;;\n\n  /** Vari\u00e1veis de ambiente */\n  env?: string[];\n\n  /** Comando padr\u00e3o */\n  cmd?: string[];\n\n  /** Entrypoint */\n  entrypoint?: string[];\n\n  /** Diret\u00f3rio de trabalho */\n  workingDir?: string;\n\n  /** Volumes */\n  volumes?: Record&lt;string, {}&gt;;\n\n  /** Labels */\n  labels?: Record&lt;string, string&gt;;\n}\n</code></pre>"},{"location":"api/types/#imagebuildoptions","title":"ImageBuildOptions","text":"<p>Op\u00e7\u00f5es para build de imagem.</p> <pre><code>interface ImageBuildOptions {\n  /** Nome e tag da imagem */\n  tag?: string;\n\n  /** Caminho para Dockerfile */\n  dockerfile?: string;\n\n  /** Contexto de build */\n  context: string;\n\n  /** Argumentos de build */\n  buildArgs?: Record&lt;string, string&gt;;\n\n  /** Labels da imagem */\n  labels?: Record&lt;string, string&gt;;\n\n  /** N\u00e3o usar cache */\n  noCache?: boolean;\n\n  /** For\u00e7ar remo\u00e7\u00e3o de containers intermedi\u00e1rios */\n  forceRm?: boolean;\n\n  /** Sempre puxar imagem base */\n  pull?: boolean;\n\n  /** Plataforma de destino */\n  platform?: string;\n\n  /** Callback de progresso */\n  onProgress?: (progress: BuildProgress) =&gt; void;\n}\n</code></pre>"},{"location":"api/types/#buildprogress","title":"BuildProgress","text":"<p>Progresso do build de imagem.</p> <pre><code>interface BuildProgress {\n  /** ID do step */\n  id?: string;\n\n  /** Texto do progresso */\n  stream?: string;\n\n  /** Status do progresso */\n  status?: string;\n\n  /** Detalhes do progresso */\n  progressDetail?: {\n    current: number;\n    total: number;\n  };\n\n  /** Informa\u00e7\u00f5es auxiliares */\n  aux?: any;\n\n  /** Erro, se houver */\n  error?: string;\n}\n</code></pre>"},{"location":"api/types/#tipos-de-volume","title":"Tipos de Volume","text":""},{"location":"api/types/#volume","title":"Volume","text":"<p>Representa\u00e7\u00e3o de um volume Docker.</p> <pre><code>interface Volume {\n  /** Nome do volume */\n  name: string;\n\n  /** Driver do volume */\n  driver: string;\n\n  /** Ponto de montagem */\n  mountpoint: string;\n\n  /** Timestamp de cria\u00e7\u00e3o */\n  created: Date;\n\n  /** Status do volume */\n  status?: Record&lt;string, any&gt;;\n\n  /** Labels do volume */\n  labels: Record&lt;string, string&gt;;\n\n  /** Op\u00e7\u00f5es do volume */\n  options: Record&lt;string, string&gt;;\n\n  /** Escopo do volume */\n  scope: 'local' | 'global';\n\n  /** Uso do volume */\n  usage?: VolumeUsage;\n}\n</code></pre>"},{"location":"api/types/#volumemount","title":"VolumeMount","text":"<p>Montagem de volume em container.</p> <pre><code>interface VolumeMount {\n  /** Tipo de montagem */\n  type: 'bind' | 'volume' | 'tmpfs';\n\n  /** Origem (host ou volume) */\n  source: string;\n\n  /** Destino no container */\n  destination: string;\n\n  /** Modo de montagem */\n  mode?: string;\n\n  /** Read-only */\n  readOnly?: boolean;\n\n  /** Propaga\u00e7\u00e3o */\n  propagation?: 'rprivate' | 'private' | 'rshared' | 'shared' | 'rslave' | 'slave';\n\n  /** Configura\u00e7\u00f5es espec\u00edficas */\n  bindOptions?: BindOptions;\n  volumeOptions?: VolumeOptions;\n  tmpfsOptions?: TmpfsOptions;\n}\n</code></pre>"},{"location":"api/types/#volumecreateoptions","title":"VolumeCreateOptions","text":"<p>Op\u00e7\u00f5es para cria\u00e7\u00e3o de volume.</p> <pre><code>interface VolumeCreateOptions {\n  /** Nome do volume */\n  name?: string;\n\n  /** Driver do volume */\n  driver?: string;\n\n  /** Op\u00e7\u00f5es do driver */\n  driverOpts?: Record&lt;string, string&gt;;\n\n  /** Labels do volume */\n  labels?: Record&lt;string, string&gt;;\n}\n</code></pre>"},{"location":"api/types/#tipos-de-rede","title":"Tipos de Rede","text":""},{"location":"api/types/#network","title":"Network","text":"<p>Representa\u00e7\u00e3o de uma rede Docker.</p> <pre><code>interface Network {\n  /** ID da rede */\n  id: string;\n\n  /** Nome da rede */\n  name: string;\n\n  /** Driver da rede */\n  driver: string;\n\n  /** Escopo da rede */\n  scope: 'local' | 'global' | 'swarm';\n\n  /** IPv6 habilitado */\n  enableIPv6: boolean;\n\n  /** Configura\u00e7\u00e3o IPAM */\n  ipam: IPAMConfig;\n\n  /** Containers conectados */\n  containers: Record&lt;string, NetworkContainer&gt;;\n\n  /** Op\u00e7\u00f5es da rede */\n  options: Record&lt;string, string&gt;;\n\n  /** Labels da rede */\n  labels: Record&lt;string, string&gt;;\n\n  /** Timestamp de cria\u00e7\u00e3o */\n  created: Date;\n\n  /** Attachable (Swarm) */\n  attachable?: boolean;\n\n  /** Ingress (Swarm) */\n  ingress?: boolean;\n}\n</code></pre>"},{"location":"api/types/#networkconnection","title":"NetworkConnection","text":"<p>Conex\u00e3o de container \u00e0 rede.</p> <pre><code>interface NetworkConnection {\n  /** Nome da rede */\n  networkName: string;\n\n  /** ID da rede */\n  networkId: string;\n\n  /** Endere\u00e7o IP */\n  ipAddress: string;\n\n  /** Prefixo da rede */\n  ipPrefixLen: number;\n\n  /** Gateway */\n  gateway: string;\n\n  /** Endere\u00e7os IP globais IPv6 */\n  globalIPv6Address?: string;\n\n  /** Prefixo IPv6 */\n  globalIPv6PrefixLen?: number;\n\n  /** Gateway IPv6 */\n  ipv6Gateway?: string;\n\n  /** Endere\u00e7o MAC */\n  macAddress?: string;\n\n  /** Aliases DNS */\n  aliases?: string[];\n}\n</code></pre>"},{"location":"api/types/#networkcreateoptions","title":"NetworkCreateOptions","text":"<p>Op\u00e7\u00f5es para cria\u00e7\u00e3o de rede.</p> <pre><code>interface NetworkCreateOptions {\n  /** Nome da rede */\n  name: string;\n\n  /** Driver da rede */\n  driver?: string;\n\n  /** Habilitar IPv6 */\n  enableIPv6?: boolean;\n\n  /** Configura\u00e7\u00e3o IPAM */\n  ipam?: IPAMConfig;\n\n  /** Rede interna */\n  internal?: boolean;\n\n  /** Attachable */\n  attachable?: boolean;\n\n  /** Ingress */\n  ingress?: boolean;\n\n  /** Op\u00e7\u00f5es do driver */\n  options?: Record&lt;string, string&gt;;\n\n  /** Labels da rede */\n  labels?: Record&lt;string, string&gt;;\n}\n</code></pre>"},{"location":"api/types/#tipos-de-comando","title":"Tipos de Comando","text":""},{"location":"api/types/#command","title":"Command","text":"<p>Interface base para comandos.</p> <pre><code>interface Command {\n  /** Nome do comando */\n  readonly name: string;\n\n  /** Descri\u00e7\u00e3o do comando */\n  readonly description: string;\n\n  /** Categoria do comando */\n  readonly category: CommandCategory;\n\n  /** Aliases do comando */\n  readonly aliases?: string[];\n\n  /** Op\u00e7\u00f5es suportadas */\n  readonly options?: CommandOption[];\n\n  /** Argumentos requeridos */\n  readonly args?: CommandArgument[];\n\n  /** Executa o comando */\n  execute(context: CommandContext): Promise&lt;CommandResult&gt;;\n\n  /** Obt\u00e9m ajuda do comando */\n  getHelp(): string;\n\n  /** Valida argumentos */\n  validate(args: string[], options: CommandOptions): ValidationResult;\n}\n</code></pre>"},{"location":"api/types/#commandcategory","title":"CommandCategory","text":"<p>Categorias de comandos.</p> <pre><code>type CommandCategory =\n  | 'container'\n  | 'image'\n  | 'volume'\n  | 'network'\n  | 'compose'\n  | 'swarm'\n  | 'system'\n  | 'plugin'\n  | 'custom';\n</code></pre>"},{"location":"api/types/#commandcontext","title":"CommandContext","text":"<p>Contexto de execu\u00e7\u00e3o do comando.</p> <pre><code>interface CommandContext {\n  /** Argumentos do comando */\n  args: string[];\n\n  /** Op\u00e7\u00f5es do comando */\n  options: CommandOptions;\n\n  /** Configura\u00e7\u00e3o atual */\n  config: DockerPilotConfig;\n\n  /** Logger */\n  logger: Logger;\n\n  /** Cliente Docker */\n  docker: DockerClient;\n\n  /** Interface de usu\u00e1rio */\n  ui: UIInterface;\n\n  /** Diret\u00f3rio de trabalho */\n  cwd: string;\n\n  /** Vari\u00e1veis de ambiente */\n  env: Record&lt;string, string&gt;;\n}\n</code></pre>"},{"location":"api/types/#commandresult","title":"CommandResult","text":"<p>Resultado da execu\u00e7\u00e3o do comando.</p> <pre><code>interface CommandResult {\n  /** Sucesso da execu\u00e7\u00e3o */\n  success: boolean;\n\n  /** C\u00f3digo de sa\u00edda */\n  exitCode: number;\n\n  /** Dados de sa\u00edda */\n  data?: any;\n\n  /** Mensagem de resultado */\n  message?: string;\n\n  /** Erro, se houver */\n  error?: Error;\n\n  /** Tempo de execu\u00e7\u00e3o */\n  executionTime: number;\n\n  /** Metadados adicionais */\n  metadata?: Record&lt;string, any&gt;;\n}\n</code></pre>"},{"location":"api/types/#commandoption","title":"CommandOption","text":"<p>Defini\u00e7\u00e3o de op\u00e7\u00e3o de comando.</p> <pre><code>interface CommandOption {\n  /** Nome da op\u00e7\u00e3o */\n  name: string;\n\n  /** Nome curto */\n  short?: string;\n\n  /** Descri\u00e7\u00e3o */\n  description: string;\n\n  /** Tipo de valor */\n  type: 'boolean' | 'string' | 'number' | 'array';\n\n  /** Valor padr\u00e3o */\n  default?: any;\n\n  /** Obrigat\u00f3ria */\n  required?: boolean;\n\n  /** Valores aceitos */\n  choices?: string[];\n\n  /** Validador personalizado */\n  validator?: (value: any) =&gt; boolean;\n}\n</code></pre>"},{"location":"api/types/#tipos-de-configuracao","title":"Tipos de Configura\u00e7\u00e3o","text":""},{"location":"api/types/#pluginconfig","title":"PluginConfig","text":"<p>Configura\u00e7\u00e3o de plugins.</p> <pre><code>interface PluginConfig {\n  /** Plugins habilitados */\n  enabled: string[];\n\n  /** Diret\u00f3rio de plugins */\n  directory: string;\n\n  /** Configura\u00e7\u00f5es espec\u00edficas */\n  settings: Record&lt;string, any&gt;;\n\n  /** Auto-carregamento */\n  autoLoad: boolean;\n\n  /** Plugins remotos */\n  remote?: RemotePluginConfig[];\n}\n</code></pre>"},{"location":"api/types/#uiconfig","title":"UIConfig","text":"<p>Configura\u00e7\u00e3o da interface.</p> <pre><code>interface UIConfig {\n  /** Tema da interface */\n  theme: 'dark' | 'light' | 'auto';\n\n  /** Cores personalizadas */\n  colors: ColorScheme;\n\n  /** Menu interativo habilitado */\n  interactive: boolean;\n\n  /** Anima\u00e7\u00f5es habilitadas */\n  animations: boolean;\n\n  /** Formato de sa\u00edda padr\u00e3o */\n  defaultFormat: OutputFormat;\n\n  /** Pagina\u00e7\u00e3o */\n  pagination: PaginationConfig;\n}\n</code></pre>"},{"location":"api/types/#i18nconfig","title":"I18nConfig","text":"<p>Configura\u00e7\u00e3o de internacionaliza\u00e7\u00e3o.</p> <pre><code>interface I18nConfig {\n  /** Idioma padr\u00e3o */\n  defaultLanguage: string;\n\n  /** Idiomas dispon\u00edveis */\n  availableLanguages: string[];\n\n  /** Fallback de idioma */\n  fallbackLanguage: string;\n\n  /** Diret\u00f3rio de tradu\u00e7\u00f5es */\n  translationsDir: string;\n\n  /** Namespace padr\u00e3o */\n  defaultNamespace: string;\n\n  /** Interpola\u00e7\u00e3o */\n  interpolation: InterpolationConfig;\n}\n</code></pre>"},{"location":"api/types/#tipos-de-plugin","title":"Tipos de Plugin","text":""},{"location":"api/types/#plugin","title":"Plugin","text":"<p>Interface base para plugins.</p> <pre><code>interface Plugin {\n  /** Nome do plugin */\n  readonly name: string;\n\n  /** Vers\u00e3o do plugin */\n  readonly version: string;\n\n  /** Descri\u00e7\u00e3o do plugin */\n  readonly description: string;\n\n  /** Autor do plugin */\n  readonly author: string;\n\n  /** Depend\u00eancias */\n  readonly dependencies?: string[];\n\n  /** Inicializa o plugin */\n  initialize(context: PluginContext): Promise&lt;void&gt;;\n\n  /** Finaliza o plugin */\n  destroy(): Promise&lt;void&gt;;\n\n  /** Comandos fornecidos */\n  getCommands?(): Command[];\n\n  /** Hooks fornecidos */\n  getHooks?(): PluginHooks;\n\n  /** Configura\u00e7\u00f5es do plugin */\n  getConfig?(): PluginConfiguration;\n}\n</code></pre>"},{"location":"api/types/#plugincontext","title":"PluginContext","text":"<p>Contexto fornecido ao plugin.</p> <pre><code>interface PluginContext {\n  /** Configura\u00e7\u00e3o do Docker Pilot */\n  config: DockerPilotConfig;\n\n  /** Logger */\n  logger: Logger;\n\n  /** Registro de comandos */\n  commandRegistry: CommandRegistry;\n\n  /** Cliente Docker */\n  docker: DockerClient;\n\n  /** Sistema de eventos */\n  eventBus: EventBus;\n\n  /** Utilit\u00e1rios */\n  utils: PluginUtils;\n}\n</code></pre>"},{"location":"api/types/#pluginhooks","title":"PluginHooks","text":"<p>Hooks fornecidos pelo plugin.</p> <pre><code>interface PluginHooks {\n  /** Antes da execu\u00e7\u00e3o do comando */\n  beforeCommand?: (context: CommandContext) =&gt; Promise&lt;void&gt;;\n\n  /** Depois da execu\u00e7\u00e3o do comando */\n  afterCommand?: (context: CommandContext, result: CommandResult) =&gt; Promise&lt;void&gt;;\n\n  /** Em caso de erro */\n  onError?: (context: CommandContext, error: Error) =&gt; Promise&lt;void&gt;;\n\n  /** Inicializa\u00e7\u00e3o da aplica\u00e7\u00e3o */\n  onAppStart?: () =&gt; Promise&lt;void&gt;;\n\n  /** Finaliza\u00e7\u00e3o da aplica\u00e7\u00e3o */\n  onAppStop?: () =&gt; Promise&lt;void&gt;;\n}\n</code></pre>"},{"location":"api/types/#tipos-de-evento","title":"Tipos de Evento","text":""},{"location":"api/types/#event","title":"Event","text":"<p>Evento do sistema.</p> <pre><code>interface Event {\n  /** Tipo do evento */\n  type: EventType;\n\n  /** Dados do evento */\n  data: any;\n\n  /** Timestamp */\n  timestamp: Date;\n\n  /** Origem do evento */\n  source: string;\n\n  /** ID \u00fanico */\n  id: string;\n\n  /** Metadados */\n  metadata?: Record&lt;string, any&gt;;\n}\n</code></pre>"},{"location":"api/types/#eventtype","title":"EventType","text":"<p>Tipos de eventos suportados.</p> <pre><code>type EventType =\n  | 'container.start'\n  | 'container.stop'\n  | 'container.create'\n  | 'container.remove'\n  | 'image.pull'\n  | 'image.build'\n  | 'image.remove'\n  | 'volume.create'\n  | 'volume.remove'\n  | 'network.create'\n  | 'network.remove'\n  | 'command.execute'\n  | 'command.complete'\n  | 'command.error'\n  | 'plugin.load'\n  | 'plugin.unload'\n  | 'config.change'\n  | 'app.start'\n  | 'app.stop';\n</code></pre>"},{"location":"api/types/#eventhandler","title":"EventHandler","text":"<p>Handler de evento.</p> <pre><code>type EventHandler&lt;T = any&gt; = (event: Event&lt;T&gt;) =&gt; Promise&lt;void&gt; | void;\n</code></pre>"},{"location":"api/types/#tipos-de-validacao","title":"Tipos de Valida\u00e7\u00e3o","text":""},{"location":"api/types/#validationresult","title":"ValidationResult","text":"<p>Resultado de valida\u00e7\u00e3o.</p> <pre><code>interface ValidationResult {\n  /** Valida\u00e7\u00e3o passou */\n  valid: boolean;\n\n  /** Erros encontrados */\n  errors: ValidationError[];\n\n  /** Avisos */\n  warnings: ValidationWarning[];\n\n  /** Dados validados */\n  data?: any;\n}\n</code></pre>"},{"location":"api/types/#validationerror","title":"ValidationError","text":"<p>Erro de valida\u00e7\u00e3o.</p> <pre><code>interface ValidationError {\n  /** Campo com erro */\n  field: string;\n\n  /** Mensagem de erro */\n  message: string;\n\n  /** C\u00f3digo do erro */\n  code: string;\n\n  /** Valor inv\u00e1lido */\n  value: any;\n\n  /** Regra violada */\n  rule: string;\n}\n</code></pre>"},{"location":"api/types/#validationrule","title":"ValidationRule","text":"<p>Regra de valida\u00e7\u00e3o.</p> <pre><code>interface ValidationRule {\n  /** Nome da regra */\n  name: string;\n\n  /** Fun\u00e7\u00e3o de valida\u00e7\u00e3o */\n  validator: (value: any, context?: any) =&gt; boolean;\n\n  /** Mensagem de erro */\n  message: string;\n\n  /** Par\u00e2metros da regra */\n  params?: Record&lt;string, any&gt;;\n}\n</code></pre>"},{"location":"api/types/#tipos-de-utilitario","title":"Tipos de Utilit\u00e1rio","text":""},{"location":"api/types/#loglevel","title":"LogLevel","text":"<p>N\u00edveis de log.</p> <pre><code>enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  FATAL = 4\n}\n</code></pre>"},{"location":"api/types/#outputformat","title":"OutputFormat","text":"<p>Formatos de sa\u00edda.</p> <pre><code>type OutputFormat =\n  | 'table'\n  | 'list'\n  | 'json'\n  | 'yaml'\n  | 'csv'\n  | 'xml';\n</code></pre>"},{"location":"api/types/#resourceconfig","title":"ResourceConfig","text":"<p>Configura\u00e7\u00e3o de recursos.</p> <pre><code>interface ResourceConfig {\n  /** Limite de mem\u00f3ria */\n  memory?: number;\n\n  /** Limite de swap */\n  memorySwap?: number;\n\n  /** Limite de CPU */\n  cpuShares?: number;\n\n  /** CPUs espec\u00edficas */\n  cpusetCpus?: string;\n\n  /** N\u00f3s de mem\u00f3ria */\n  cpusetMems?: string;\n\n  /** Per\u00edodo de CPU */\n  cpuPeriod?: number;\n\n  /** Quota de CPU */\n  cpuQuota?: number;\n\n  /** Limite de PIDs */\n  pidsLimit?: number;\n\n  /** OOM killer */\n  oomKillDisable?: boolean;\n\n  /** Dispositivos */\n  devices?: DeviceMapping[];\n\n  /** Ulimits */\n  ulimits?: Ulimit[];\n}\n</code></pre>"},{"location":"api/types/#devicemapping","title":"DeviceMapping","text":"<p>Mapeamento de dispositivo.</p> <pre><code>interface DeviceMapping {\n  /** Caminho no host */\n  pathOnHost: string;\n\n  /** Caminho no container */\n  pathInContainer: string;\n\n  /** Permiss\u00f5es */\n  cgroupPermissions: string;\n}\n</code></pre>"},{"location":"api/types/#portmapping","title":"PortMapping","text":"<p>Mapeamento de porta.</p> <pre><code>interface PortMapping {\n  /** Porta no container */\n  containerPort: number;\n\n  /** Porta no host */\n  hostPort?: number;\n\n  /** IP do host */\n  hostIp?: string;\n\n  /** Protocolo */\n  protocol: 'tcp' | 'udp' | 'sctp';\n}\n</code></pre>"},{"location":"api/types/#restartpolicy","title":"RestartPolicy","text":"<p>Pol\u00edtica de rein\u00edcio.</p> <pre><code>interface RestartPolicy {\n  /** Nome da pol\u00edtica */\n  name: 'no' | 'always' | 'unless-stopped' | 'on-failure';\n\n  /** Tentativas m\u00e1ximas (para on-failure) */\n  maximumRetryCount?: number;\n}\n</code></pre>"},{"location":"api/types/#tipos-compostos","title":"Tipos Compostos","text":""},{"location":"api/types/#composeconfig","title":"ComposeConfig","text":"<p>Configura\u00e7\u00e3o do Docker Compose.</p> <pre><code>interface ComposeConfig {\n  /** Vers\u00e3o do compose */\n  version: string;\n\n  /** Servi\u00e7os */\n  services: Record&lt;string, ComposeService&gt;;\n\n  /** Volumes */\n  volumes?: Record&lt;string, ComposeVolume&gt;;\n\n  /** Redes */\n  networks?: Record&lt;string, ComposeNetwork&gt;;\n\n  /** Segredos */\n  secrets?: Record&lt;string, ComposeSecret&gt;;\n\n  /** Configura\u00e7\u00f5es */\n  configs?: Record&lt;string, ComposeConfig&gt;;\n}\n</code></pre>"},{"location":"api/types/#composeservice","title":"ComposeService","text":"<p>Servi\u00e7o do Docker Compose.</p> <pre><code>interface ComposeService {\n  /** Imagem */\n  image?: string;\n\n  /** Build */\n  build?: string | ComposeBuild;\n\n  /** Comando */\n  command?: string | string[];\n\n  /** Portas */\n  ports?: (string | PortMapping)[];\n\n  /** Volumes */\n  volumes?: (string | VolumeMount)[];\n\n  /** Vari\u00e1veis de ambiente */\n  environment?: string[] | Record&lt;string, string&gt;;\n\n  /** Depend\u00eancias */\n  depends_on?: string[] | Record&lt;string, ComposeDependency&gt;;\n\n  /** Redes */\n  networks?: string[] | Record&lt;string, ComposeNetworkConfig&gt;;\n\n  /** Pol\u00edtica de rein\u00edcio */\n  restart?: string;\n\n  /** Recursos */\n  deploy?: ComposeDeployConfig;\n}\n</code></pre>"},{"location":"api/types/#uniao-de-tipos","title":"Uni\u00e3o de Tipos","text":""},{"location":"api/types/#dockerresource","title":"DockerResource","text":"<p>Qualquer recurso Docker.</p> <pre><code>type DockerResource = Container | Image | Volume | Network;\n</code></pre>"},{"location":"api/types/#commandinput","title":"CommandInput","text":"<p>Entrada de comando.</p> <pre><code>type CommandInput = string | string[] | CommandOptions;\n</code></pre>"},{"location":"api/types/#configvalue","title":"ConfigValue","text":"<p>Valor de configura\u00e7\u00e3o.</p> <pre><code>type ConfigValue = string | number | boolean | object | null | undefined;\n</code></pre>"},{"location":"api/types/#logtransport","title":"LogTransport","text":"<p>Transporte de log.</p> <pre><code>type LogTransport = ConsoleTransport | FileTransport | WebhookTransport | CustomTransport;\n</code></pre>"},{"location":"api/types/#exportacao-de-tipos","title":"Exporta\u00e7\u00e3o de Tipos","text":""},{"location":"api/types/#indice-principal","title":"\u00cdndice Principal","text":"<pre><code>// Core types\nexport * from './core';\nexport * from './config';\n\n// Docker types\nexport * from './container';\nexport * from './image';\nexport * from './volume';\nexport * from './network';\n\n// Command types\nexport * from './command';\nexport * from './plugin';\n\n// Utility types\nexport * from './validation';\nexport * from './logging';\nexport * from './event';\n\n// Compose types\nexport * from './compose';\n\n// Type guards\nexport * from './guards';\n\n// Utility types\nexport type Partial&lt;T&gt; = { [P in keyof T]?: T[P] };\nexport type Required&lt;T&gt; = { [P in keyof T]-?: T[P] };\nexport type Pick&lt;T, K extends keyof T&gt; = { [P in K]: T[P] };\nexport type Omit&lt;T, K extends keyof T&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;;\nexport type Record&lt;K extends keyof any, T&gt; = { [P in K]: T };\n</code></pre>"},{"location":"api/types/#type-guards","title":"Type Guards","text":"<p>Fun\u00e7\u00f5es para verifica\u00e7\u00e3o de tipos em runtime.</p>"},{"location":"api/types/#container-guards","title":"Container Guards","text":"<pre><code>export function isContainer(obj: any): obj is Container {\n  return obj &amp;&amp; typeof obj.id === 'string' &amp;&amp; typeof obj.name === 'string';\n}\n\nexport function isContainerRunning(container: Container): boolean {\n  return container.state.running;\n}\n</code></pre>"},{"location":"api/types/#command-guards","title":"Command Guards","text":"<pre><code>export function isCommand(obj: any): obj is Command {\n  return obj &amp;&amp; typeof obj.name === 'string' &amp;&amp; typeof obj.execute === 'function';\n}\n\nexport function isCommandResult(obj: any): obj is CommandResult {\n  return obj &amp;&amp; typeof obj.success === 'boolean';\n}\n</code></pre>"},{"location":"api/types/#validation-guards","title":"Validation Guards","text":"<pre><code>export function isValidationResult(obj: any): obj is ValidationResult {\n  return obj &amp;&amp; typeof obj.valid === 'boolean' &amp;&amp; Array.isArray(obj.errors);\n}\n</code></pre>"},{"location":"api/types/#tipos-auxiliares","title":"Tipos Auxiliares","text":""},{"location":"api/types/#mapped-types","title":"Mapped Types","text":"<pre><code>// Torna todas as propriedades opcionais e aninhadas\nexport type DeepPartial&lt;T&gt; = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial&lt;T[P]&gt; : T[P];\n};\n\n// Torna todas as propriedades obrigat\u00f3rias e aninhadas\nexport type DeepRequired&lt;T&gt; = {\n  [P in keyof T]-?: T[P] extends object ? DeepRequired&lt;T[P]&gt; : T[P];\n};\n\n// Extrai os nomes das propriedades de fun\u00e7\u00e3o\nexport type FunctionPropertyNames&lt;T&gt; = {\n  [K in keyof T]: T[K] extends Function ? K : never;\n}[keyof T];\n\n// Extrai apenas as propriedades de fun\u00e7\u00e3o\nexport type FunctionProperties&lt;T&gt; = Pick&lt;T, FunctionPropertyNames&lt;T&gt;&gt;;\n</code></pre>"},{"location":"api/types/#conditional-types","title":"Conditional Types","text":"<pre><code>// Extrai tipo de retorno de Promise\nexport type Awaited&lt;T&gt; = T extends Promise&lt;infer U&gt; ? U : T;\n\n// Extrai tipo de elementos de array\nexport type ArrayElement&lt;T&gt; = T extends (infer U)[] ? U : never;\n\n// Verifica se tipo \u00e9 uma string literal\nexport type IsStringLiteral&lt;T&gt; = T extends string\n  ? string extends T\n    ? false\n    : true\n  : false;\n</code></pre>"},{"location":"api/types/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"api/types/#exemplo-1-usando-tipos-para-validacao","title":"Exemplo 1: Usando Tipos para Valida\u00e7\u00e3o","text":"<pre><code>import { Container, ContainerCreateOptions, ValidationResult } from '@docker-pilot/types';\n\nfunction validateCreateOptions(options: ContainerCreateOptions): ValidationResult {\n  const errors: ValidationError[] = [];\n\n  if (options.name &amp;&amp; !isValidContainerName(options.name)) {\n    errors.push({\n      field: 'name',\n      message: 'Nome de container inv\u00e1lido',\n      code: 'INVALID_NAME',\n      value: options.name,\n      rule: 'container-name'\n    });\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors,\n    warnings: []\n  };\n}\n</code></pre>"},{"location":"api/types/#exemplo-2-implementando-comando-tipado","title":"Exemplo 2: Implementando Comando Tipado","text":"<pre><code>import { Command, CommandContext, CommandResult } from '@docker-pilot/types';\n\nclass ListCommand implements Command {\n  readonly name = 'list';\n  readonly description = 'Lista containers';\n  readonly category = 'container' as const;\n\n  async execute(context: CommandContext): Promise&lt;CommandResult&gt; {\n    try {\n      const containers = await context.docker.listContainers();\n\n      return {\n        success: true,\n        exitCode: 0,\n        data: containers,\n        executionTime: Date.now() - context.startTime\n      };\n    } catch (error) {\n      return {\n        success: false,\n        exitCode: 1,\n        error: error as Error,\n        executionTime: Date.now() - context.startTime\n      };\n    }\n  }\n\n  getHelp(): string {\n    return 'Lista todos os containers Docker';\n  }\n\n  validate(): ValidationResult {\n    return { valid: true, errors: [], warnings: [] };\n  }\n}\n</code></pre>"},{"location":"api/types/#exemplo-3-plugin-com-tipos","title":"Exemplo 3: Plugin com Tipos","text":"<pre><code>import { Plugin, PluginContext, Command } from '@docker-pilot/types';\n\nclass MyPlugin implements Plugin {\n  readonly name = 'my-plugin';\n  readonly version = '1.0.0';\n  readonly description = 'Plugin de exemplo';\n  readonly author = 'Docker Pilot Team';\n\n  async initialize(context: PluginContext): Promise&lt;void&gt; {\n    context.logger.info(`Plugin ${this.name} inicializado`);\n  }\n\n  async destroy(): Promise&lt;void&gt; {\n    // Cleanup\n  }\n\n  getCommands(): Command[] {\n    return [new MyCommand()];\n  }\n}\n</code></pre>"},{"location":"api/utilities/","title":"Utilities API","text":"<p>This module contains essential utilities for Docker Pilot functionality.</p>"},{"location":"api/utilities/#overview","title":"Overview","text":"<p>Docker Pilot utilities provide auxiliary functionalities for file manipulation, logging, validation, and Docker integration. They are designed to be reusable and efficient.</p>"},{"location":"api/utilities/#dockerutils","title":"DockerUtils","text":"<p>Utilities for Docker interaction.</p>"},{"location":"api/utilities/#dockerutils-class","title":"DockerUtils Class","text":"<pre><code>class DockerUtils {\n  static async isDockerRunning(): Promise&lt;boolean&gt;;\n  static async getDockerVersion(): Promise&lt;string&gt;;\n  static async listContainers(options?: ListOptions): Promise&lt;Container[]&gt;;\n  static async listImages(options?: ListOptions): Promise&lt;Image[]&gt;;\n  static async listVolumes(): Promise&lt;Volume[]&gt;;\n  static async listNetworks(): Promise&lt;Network[]&gt;;\n}\n</code></pre>"},{"location":"api/utilities/#main-methods","title":"Main Methods","text":""},{"location":"api/utilities/#isdockerrunning","title":"isDockerRunning()","text":"<p>Checks if Docker is running.</p> <pre><code>const isRunning = await DockerUtils.isDockerRunning();\nif (!isRunning) {\n  throw new Error('Docker is not running');\n}\n</code></pre>"},{"location":"api/utilities/#getdockerversion","title":"getDockerVersion()","text":"<p>Gets the installed Docker version.</p> <pre><code>const version = await DockerUtils.getDockerVersion();\nconsole.log(`Docker version: ${version}`);\n</code></pre>"},{"location":"api/utilities/#listcontainers","title":"listContainers()","text":"<p>Lists containers with filter options.</p> <pre><code>interface ListOptions {\n  all?: boolean;\n  running?: boolean;\n  filters?: Record&lt;string, string&gt;;\n  format?: string;\n}\n\nconst containers = await DockerUtils.listContainers({\n  all: true,\n  filters: { status: 'running' }\n});\n</code></pre>"},{"location":"api/utilities/#getcontainerinfo","title":"getContainerInfo()","text":"<p>Obt\u00e9m informa\u00e7\u00f5es detalhadas de um container.</p> <pre><code>const info = await DockerUtils.getContainerInfo('container-name');\nconsole.log(info);\n</code></pre>"},{"location":"api/utilities/#executeincontainer","title":"executeInContainer()","text":"<p>Executa comandos dentro de um container.</p> <pre><code>const result = await DockerUtils.executeInContainer(\n  'container-name',\n  ['ls', '-la', '/app']\n);\n</code></pre>"},{"location":"api/utilities/#utilitarios-de-imagem","title":"Utilit\u00e1rios de Imagem","text":""},{"location":"api/utilities/#pullimage","title":"pullImage()","text":"<p>Baixa uma imagem Docker.</p> <pre><code>await DockerUtils.pullImage('nginx:latest', {\n  onProgress: (progress) =&gt; console.log(progress)\n});\n</code></pre>"},{"location":"api/utilities/#buildimage","title":"buildImage()","text":"<p>Constr\u00f3i uma imagem Docker.</p> <pre><code>await DockerUtils.buildImage('/path/to/dockerfile', {\n  tag: 'myapp:latest',\n  noCache: true,\n  buildArgs: { NODE_ENV: 'production' }\n});\n</code></pre>"},{"location":"api/utilities/#removeimage","title":"removeImage()","text":"<p>Remove uma imagem Docker.</p> <pre><code>await DockerUtils.removeImage('image-id', {\n  force: true,\n  noPrune: false\n});\n</code></pre>"},{"location":"api/utilities/#utilitarios-de-volume","title":"Utilit\u00e1rios de Volume","text":""},{"location":"api/utilities/#createvolume","title":"createVolume()","text":"<p>Cria um volume Docker.</p> <pre><code>const volume = await DockerUtils.createVolume('my-volume', {\n  driver: 'local',\n  labels: { app: 'myapp' }\n});\n</code></pre>"},{"location":"api/utilities/#removevolume","title":"removeVolume()","text":"<p>Remove um volume Docker.</p> <pre><code>await DockerUtils.removeVolume('my-volume', {\n  force: true\n});\n</code></pre>"},{"location":"api/utilities/#utilitarios-de-rede","title":"Utilit\u00e1rios de Rede","text":""},{"location":"api/utilities/#createnetwork","title":"createNetwork()","text":"<p>Cria uma rede Docker.</p> <pre><code>const network = await DockerUtils.createNetwork('my-network', {\n  driver: 'bridge',\n  subnet: '172.20.0.0/16'\n});\n</code></pre>"},{"location":"api/utilities/#connecttonetwork","title":"connectToNetwork()","text":"<p>Conecta um container a uma rede.</p> <pre><code>await DockerUtils.connectToNetwork('my-network', 'container-name');\n</code></pre>"},{"location":"api/utilities/#fileutils","title":"FileUtils","text":"<p>Utilit\u00e1rios para manipula\u00e7\u00e3o de arquivos.</p>"},{"location":"api/utilities/#classe-fileutils","title":"Classe FileUtils","text":"<pre><code>class FileUtils {\n  static async exists(path: string): Promise&lt;boolean&gt;;\n  static async read(path: string): Promise&lt;string&gt;;\n  static async write(path: string, content: string): Promise&lt;void&gt;;\n  static async copy(source: string, destination: string): Promise&lt;void&gt;;\n  static async move(source: string, destination: string): Promise&lt;void&gt;;\n  static async delete(path: string): Promise&lt;void&gt;;\n  static async createDir(path: string): Promise&lt;void&gt;;\n  static async listDir(path: string): Promise&lt;string[]&gt;;\n}\n</code></pre>"},{"location":"api/utilities/#metodos-principais","title":"M\u00e9todos Principais","text":""},{"location":"api/utilities/#exists","title":"exists()","text":"<p>Verifica se um arquivo ou diret\u00f3rio existe.</p> <pre><code>const exists = await FileUtils.exists('/path/to/file');\nif (!exists) {\n  throw new Error('Arquivo n\u00e3o encontrado');\n}\n</code></pre>"},{"location":"api/utilities/#read","title":"read()","text":"<p>L\u00ea o conte\u00fado de um arquivo.</p> <pre><code>const content = await FileUtils.read('/path/to/file.txt');\nconsole.log(content);\n</code></pre>"},{"location":"api/utilities/#write","title":"write()","text":"<p>Escreve conte\u00fado em um arquivo.</p> <pre><code>await FileUtils.write('/path/to/file.txt', 'Hello World');\n</code></pre>"},{"location":"api/utilities/#copy","title":"copy()","text":"<p>Copia um arquivo ou diret\u00f3rio.</p> <pre><code>await FileUtils.copy('/source/file.txt', '/destination/file.txt');\n</code></pre>"},{"location":"api/utilities/#createdir","title":"createDir()","text":"<p>Cria um diret\u00f3rio recursivamente.</p> <pre><code>await FileUtils.createDir('/path/to/new/directory');\n</code></pre>"},{"location":"api/utilities/#utilitarios-para-docker-files","title":"Utilit\u00e1rios para Docker Files","text":""},{"location":"api/utilities/#finddockerfile","title":"findDockerfile()","text":"<p>Encontra Dockerfile em um diret\u00f3rio.</p> <pre><code>const dockerfilePath = await FileUtils.findDockerfile('/project/path');\n</code></pre>"},{"location":"api/utilities/#parsedockerfile","title":"parseDockerfile()","text":"<p>Analisa um Dockerfile e retorna instru\u00e7\u00f5es.</p> <pre><code>const instructions = await FileUtils.parseDockerfile('/path/to/Dockerfile');\n</code></pre>"},{"location":"api/utilities/#generatedockerignore","title":"generateDockerignore()","text":"<p>Gera um arquivo .dockerignore.</p> <pre><code>await FileUtils.generateDockerignore('/project/path', [\n  'node_modules',\n  '*.log',\n  '.git'\n]);\n</code></pre>"},{"location":"api/utilities/#utilitarios-para-compose-files","title":"Utilit\u00e1rios para Compose Files","text":""},{"location":"api/utilities/#findcomposefile","title":"findComposeFile()","text":"<p>Encontra arquivo docker-compose.yml.</p> <pre><code>const composePath = await FileUtils.findComposeFile('/project/path');\n</code></pre>"},{"location":"api/utilities/#parsecomposefile","title":"parseComposeFile()","text":"<p>Analisa um arquivo docker-compose.yml.</p> <pre><code>const composeConfig = await FileUtils.parseComposeFile('/path/to/compose.yml');\n</code></pre>"},{"location":"api/utilities/#validatecomposefile","title":"validateComposeFile()","text":"<p>Valida um arquivo docker-compose.yml.</p> <pre><code>const isValid = await FileUtils.validateComposeFile('/path/to/compose.yml');\n</code></pre>"},{"location":"api/utilities/#logger","title":"Logger","text":"<p>Sistema de logging avan\u00e7ado.</p>"},{"location":"api/utilities/#classe-logger","title":"Classe Logger","text":"<pre><code>class Logger {\n  static debug(message: string, meta?: any): void;\n  static info(message: string, meta?: any): void;\n  static warn(message: string, meta?: any): void;\n  static error(message: string, error?: Error, meta?: any): void;\n  static setLevel(level: LogLevel): void;\n  static addTransport(transport: LogTransport): void;\n}\n</code></pre>"},{"location":"api/utilities/#niveis-de-log","title":"N\u00edveis de Log","text":"<pre><code>enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  FATAL = 4\n}\n</code></pre>"},{"location":"api/utilities/#uso-basico","title":"Uso B\u00e1sico","text":"<pre><code>Logger.info('Aplica\u00e7\u00e3o iniciada');\nLogger.debug('Configura\u00e7\u00e3o carregada', { config });\nLogger.warn('Recurso deprecated usado');\nLogger.error('Erro ao conectar', error);\n</code></pre>"},{"location":"api/utilities/#transportes-de-log","title":"Transportes de Log","text":""},{"location":"api/utilities/#consoletransport","title":"ConsoleTransport","text":"<p>Sa\u00edda para console com cores.</p> <pre><code>const consoleTransport = new ConsoleTransport({\n  level: LogLevel.INFO,\n  colors: true,\n  timestamp: true\n});\n\nLogger.addTransport(consoleTransport);\n</code></pre>"},{"location":"api/utilities/#filetransport","title":"FileTransport","text":"<p>Sa\u00edda para arquivo.</p> <pre><code>const fileTransport = new FileTransport({\n  filename: 'app.log',\n  level: LogLevel.ERROR,\n  maxSize: '10MB',\n  maxFiles: 5\n});\n\nLogger.addTransport(fileTransport);\n</code></pre>"},{"location":"api/utilities/#webhooktransport","title":"WebhookTransport","text":"<p>Sa\u00edda para webhook/API.</p> <pre><code>const webhookTransport = new WebhookTransport({\n  url: 'https://api.example.com/logs',\n  headers: { 'Authorization': 'Bearer token' },\n  level: LogLevel.ERROR\n});\n\nLogger.addTransport(webhookTransport);\n</code></pre>"},{"location":"api/utilities/#formatacao-personalizada","title":"Formata\u00e7\u00e3o Personalizada","text":"<pre><code>const customFormat = (log: LogEntry) =&gt; {\n  return `[${log.timestamp}] ${log.level.toUpperCase()}: ${log.message}`;\n};\n\nLogger.setFormatter(customFormat);\n</code></pre>"},{"location":"api/utilities/#validationutils","title":"ValidationUtils","text":"<p>Utilit\u00e1rios para valida\u00e7\u00e3o de dados.</p>"},{"location":"api/utilities/#classe-validationutils","title":"Classe ValidationUtils","text":"<pre><code>class ValidationUtils {\n  static isValidContainerName(name: string): boolean;\n  static isValidImageName(name: string): boolean;\n  static isValidTag(tag: string): boolean;\n  static isValidPort(port: string | number): boolean;\n  static isValidPath(path: string): boolean;\n  static isValidUrl(url: string): boolean;\n  static isValidEmail(email: string): boolean;\n}\n</code></pre>"},{"location":"api/utilities/#validacoes-docker","title":"Valida\u00e7\u00f5es Docker","text":""},{"location":"api/utilities/#isvalidcontainername","title":"isValidContainerName()","text":"<p>Valida nome de container.</p> <pre><code>const isValid = ValidationUtils.isValidContainerName('my-app-1');\n// true - nome v\u00e1lido\n\nconst isInvalid = ValidationUtils.isValidContainerName('My_App!');\n// false - caracteres inv\u00e1lidos\n</code></pre>"},{"location":"api/utilities/#isvalidimagename","title":"isValidImageName()","text":"<p>Valida nome de imagem.</p> <pre><code>const isValid = ValidationUtils.isValidImageName('nginx:latest');\n// true\n\nconst isInvalid = ValidationUtils.isValidImageName('NGINX:LATEST');\n// false - mai\u00fasculas n\u00e3o permitidas\n</code></pre>"},{"location":"api/utilities/#isvalidtag","title":"isValidTag()","text":"<p>Valida tag de imagem.</p> <pre><code>const isValid = ValidationUtils.isValidTag('v1.0.0');\n// true\n\nconst isInvalid = ValidationUtils.isValidTag('v1.0.0@latest');\n// false - caracteres inv\u00e1lidos\n</code></pre>"},{"location":"api/utilities/#validacoes-de-rede","title":"Valida\u00e7\u00f5es de Rede","text":""},{"location":"api/utilities/#isvalidport","title":"isValidPort()","text":"<p>Valida n\u00famero de porta.</p> <pre><code>const isValid = ValidationUtils.isValidPort(8080);\n// true\n\nconst isInvalid = ValidationUtils.isValidPort(70000);\n// false - porta fora do range\n</code></pre>"},{"location":"api/utilities/#isvalidipaddress","title":"isValidIPAddress()","text":"<p>Valida endere\u00e7o IP.</p> <pre><code>const isValid = ValidationUtils.isValidIPAddress('192.168.1.1');\n// true\n\nconst isInvalid = ValidationUtils.isValidIPAddress('999.999.999.999');\n// false - IP inv\u00e1lido\n</code></pre>"},{"location":"api/utilities/#validador-de-schema","title":"Validador de Schema","text":""},{"location":"api/utilities/#validate","title":"validate()","text":"<p>Valida objeto contra schema.</p> <pre><code>const schema = {\n  name: { type: 'string', required: true },\n  port: { type: 'number', min: 1, max: 65535 },\n  enabled: { type: 'boolean', default: true }\n};\n\nconst result = ValidationUtils.validate(data, schema);\nif (!result.valid) {\n  console.error('Erros de valida\u00e7\u00e3o:', result.errors);\n}\n</code></pre>"},{"location":"api/utilities/#validador-de-configuracao","title":"Validador de Configura\u00e7\u00e3o","text":""},{"location":"api/utilities/#validateconfig","title":"validateConfig()","text":"<p>Valida configura\u00e7\u00e3o do Docker Pilot.</p> <pre><code>const config = {\n  docker: {\n    host: 'unix:///var/run/docker.sock',\n    timeout: 30000\n  },\n  logging: {\n    level: 'info',\n    file: 'docker-pilot.log'\n  }\n};\n\nconst isValid = ValidationUtils.validateConfig(config);\n</code></pre>"},{"location":"api/utilities/#processutils","title":"ProcessUtils","text":"<p>Utilit\u00e1rios para execu\u00e7\u00e3o de processos.</p>"},{"location":"api/utilities/#classe-processutils","title":"Classe ProcessUtils","text":"<pre><code>class ProcessUtils {\n  static async exec(command: string, options?: ExecOptions): Promise&lt;ExecResult&gt;;\n  static async spawn(command: string, args: string[], options?: SpawnOptions): Promise&lt;ChildProcess&gt;;\n  static async execWithTimeout(command: string, timeout: number): Promise&lt;ExecResult&gt;;\n  static killProcess(pid: number, signal?: string): void;\n}\n</code></pre>"},{"location":"api/utilities/#execucao-de-comandos","title":"Execu\u00e7\u00e3o de Comandos","text":""},{"location":"api/utilities/#exec","title":"exec()","text":"<p>Executa comando e retorna resultado.</p> <pre><code>const result = await ProcessUtils.exec('docker ps -a');\nconsole.log(result.stdout);\n\nif (result.stderr) {\n  console.error(result.stderr);\n}\n</code></pre>"},{"location":"api/utilities/#spawn","title":"spawn()","text":"<p>Inicia processo filho com streaming.</p> <pre><code>const child = await ProcessUtils.spawn('docker', ['logs', '-f', 'container']);\n\nchild.stdout.on('data', (data) =&gt; {\n  console.log(data.toString());\n});\n\nchild.stderr.on('data', (data) =&gt; {\n  console.error(data.toString());\n});\n</code></pre>"},{"location":"api/utilities/#execwithtimeout","title":"execWithTimeout()","text":"<p>Executa comando com timeout.</p> <pre><code>try {\n  const result = await ProcessUtils.execWithTimeout('docker build .', 300000); // 5 minutos\n  console.log('Build conclu\u00eddo:', result.stdout);\n} catch (error) {\n  if (error.code === 'TIMEOUT') {\n    console.error('Build excedeu o tempo limite');\n  }\n}\n</code></pre>"},{"location":"api/utilities/#utilitarios-de-sistema","title":"Utilit\u00e1rios de Sistema","text":""},{"location":"api/utilities/#getsysteminfo","title":"getSystemInfo()","text":"<p>Obt\u00e9m informa\u00e7\u00f5es do sistema.</p> <pre><code>const info = await ProcessUtils.getSystemInfo();\nconsole.log({\n  platform: info.platform,\n  arch: info.arch,\n  memory: info.memory,\n  cpus: info.cpus\n});\n</code></pre>"},{"location":"api/utilities/#checkcommand","title":"checkCommand()","text":"<p>Verifica se um comando est\u00e1 dispon\u00edvel.</p> <pre><code>const dockerAvailable = await ProcessUtils.checkCommand('docker');\nif (!dockerAvailable) {\n  throw new Error('Docker n\u00e3o est\u00e1 instalado');\n}\n</code></pre>"},{"location":"api/utilities/#stringutils","title":"StringUtils","text":"<p>Utilit\u00e1rios para manipula\u00e7\u00e3o de strings.</p>"},{"location":"api/utilities/#classe-stringutils","title":"Classe StringUtils","text":"<pre><code>class StringUtils {\n  static slugify(text: string): string;\n  static truncate(text: string, length: number): string;\n  static camelCase(text: string): string;\n  static kebabCase(text: string): string;\n  static snakeCase(text: string): string;\n  static capitalize(text: string): string;\n  static randomString(length: number): string;\n}\n</code></pre>"},{"location":"api/utilities/#metodos-de-formatacao","title":"M\u00e9todos de Formata\u00e7\u00e3o","text":""},{"location":"api/utilities/#slugify","title":"slugify()","text":"<p>Converte texto para slug.</p> <pre><code>const slug = StringUtils.slugify('My Docker App');\n// 'my-docker-app'\n</code></pre>"},{"location":"api/utilities/#truncate","title":"truncate()","text":"<p>Trunca texto com ellipsis.</p> <pre><code>const truncated = StringUtils.truncate('Long container name', 10);\n// 'Long co...'\n</code></pre>"},{"location":"api/utilities/#camelcase","title":"camelCase()","text":"<p>Converte para camelCase.</p> <pre><code>const camel = StringUtils.camelCase('docker-pilot-app');\n// 'dockerPilotApp'\n</code></pre>"},{"location":"api/utilities/#utilitarios-de-template","title":"Utilit\u00e1rios de Template","text":""},{"location":"api/utilities/#template","title":"template()","text":"<p>Processa template com vari\u00e1veis.</p> <pre><code>const template = 'Container {{ name }} is {{ status }}';\nconst result = StringUtils.template(template, {\n  name: 'nginx',\n  status: 'running'\n});\n// 'Container nginx is running'\n</code></pre>"},{"location":"api/utilities/#escapeshell","title":"escapeShell()","text":"<p>Escapa string para shell.</p> <pre><code>const escaped = StringUtils.escapeShell('file with spaces.txt');\n// '\"file with spaces.txt\"'\n</code></pre>"},{"location":"api/utilities/#timeutils","title":"TimeUtils","text":"<p>Utilit\u00e1rios para manipula\u00e7\u00e3o de tempo.</p>"},{"location":"api/utilities/#classe-timeutils","title":"Classe TimeUtils","text":"<pre><code>class TimeUtils {\n  static formatDuration(ms: number): string;\n  static formatDate(date: Date, format?: string): string;\n  static parseDate(dateString: string): Date;\n  static addTime(date: Date, amount: number, unit: TimeUnit): Date;\n  static sleep(ms: number): Promise&lt;void&gt;;\n}\n</code></pre>"},{"location":"api/utilities/#formatacao-de-tempo","title":"Formata\u00e7\u00e3o de Tempo","text":""},{"location":"api/utilities/#formatduration","title":"formatDuration()","text":"<p>Formata dura\u00e7\u00e3o em formato leg\u00edvel.</p> <pre><code>const duration = TimeUtils.formatDuration(125000);\n// '2m 5s'\n</code></pre>"},{"location":"api/utilities/#formatdate","title":"formatDate()","text":"<p>Formata data.</p> <pre><code>const formatted = TimeUtils.formatDate(new Date(), 'YYYY-MM-DD HH:mm:ss');\n// '2024-01-15 10:30:45'\n</code></pre>"},{"location":"api/utilities/#sleep","title":"sleep()","text":"<p>Pausa execu\u00e7\u00e3o por tempo determinado.</p> <pre><code>await TimeUtils.sleep(1000); // 1 segundo\nconsole.log('Executado ap\u00f3s 1 segundo');\n</code></pre>"},{"location":"api/utilities/#colorutils","title":"ColorUtils","text":"<p>Utilit\u00e1rios para coloriza\u00e7\u00e3o de terminal.</p>"},{"location":"api/utilities/#classe-colorutils","title":"Classe ColorUtils","text":"<pre><code>class ColorUtils {\n  static red(text: string): string;\n  static green(text: string): string;\n  static yellow(text: string): string;\n  static blue(text: string): string;\n  static cyan(text: string): string;\n  static magenta(text: string): string;\n  static gray(text: string): string;\n  static bold(text: string): string;\n  static underline(text: string): string;\n}\n</code></pre>"},{"location":"api/utilities/#uso-com-logs","title":"Uso com Logs","text":"<pre><code>console.log(ColorUtils.green('\u2713 Container iniciado com sucesso'));\nconsole.log(ColorUtils.red('\u2717 Erro ao parar container'));\nconsole.log(ColorUtils.yellow('\u26a0 Aviso: Container j\u00e1 est\u00e1 rodando'));\nconsole.log(ColorUtils.blue('\u2139 Informa\u00e7\u00e3o: 5 containers rodando'));\n</code></pre>"},{"location":"api/utilities/#utilitarios-de-formatacao","title":"Utilit\u00e1rios de Formata\u00e7\u00e3o","text":""},{"location":"api/utilities/#colorize","title":"colorize()","text":"<p>Coloriza texto baseado em tipo.</p> <pre><code>const colorized = ColorUtils.colorize('running', 'status');\n// Verde para 'running', vermelho para 'exited', etc.\n</code></pre>"},{"location":"api/utilities/#progressbar","title":"progressBar()","text":"<p>Cria barra de progresso colorida.</p> <pre><code>const bar = ColorUtils.progressBar(0.75, 20);\n// [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2591] 75%\n</code></pre>"},{"location":"api/utilities/#exemplos-de-uso-combinado","title":"Exemplos de Uso Combinado","text":""},{"location":"api/utilities/#exemplo-1-verificacao-e-inicializacao","title":"Exemplo 1: Verifica\u00e7\u00e3o e Inicializa\u00e7\u00e3o","text":"<pre><code>import { DockerUtils, Logger, ValidationUtils } from '@docker-pilot/utils';\n\nasync function initializeApp() {\n  try {\n    // Verificar se Docker est\u00e1 rodando\n    if (!await DockerUtils.isDockerRunning()) {\n      throw new Error('Docker n\u00e3o est\u00e1 em execu\u00e7\u00e3o');\n    }\n\n    // Obter vers\u00e3o\n    const version = await DockerUtils.getDockerVersion();\n    Logger.info(`Docker vers\u00e3o: ${version}`);\n\n    // Validar configura\u00e7\u00e3o\n    if (!ValidationUtils.validateConfig(config)) {\n      throw new Error('Configura\u00e7\u00e3o inv\u00e1lida');\n    }\n\n    Logger.info('Aplica\u00e7\u00e3o inicializada com sucesso');\n  } catch (error) {\n    Logger.error('Erro na inicializa\u00e7\u00e3o', error);\n    process.exit(1);\n  }\n}\n</code></pre>"},{"location":"api/utilities/#exemplo-2-deploy-automatizado","title":"Exemplo 2: Deploy Automatizado","text":"<pre><code>import { DockerUtils, FileUtils, ProcessUtils, Logger } from '@docker-pilot/utils';\n\nasync function deployApp(appPath: string, imageName: string) {\n  try {\n    // Verificar se Dockerfile existe\n    const dockerfilePath = await FileUtils.findDockerfile(appPath);\n    if (!dockerfilePath) {\n      throw new Error('Dockerfile n\u00e3o encontrado');\n    }\n\n    // Build da imagem\n    Logger.info('Iniciando build da imagem...');\n    await DockerUtils.buildImage(appPath, {\n      tag: imageName,\n      noCache: false\n    });\n\n    // Push para registry\n    Logger.info('Enviando imagem para registry...');\n    await DockerUtils.pushImage(imageName);\n\n    // Deploy\n    Logger.info('Fazendo deploy...');\n    const containers = await DockerUtils.listContainers({\n      filters: { label: `app=${imageName}` }\n    });\n\n    for (const container of containers) {\n      await DockerUtils.stopContainer(container.id);\n      await DockerUtils.removeContainer(container.id);\n    }\n\n    const newContainer = await DockerUtils.runContainer(imageName, {\n      detach: true,\n      labels: { app: imageName },\n      ports: { '3000': '3000' }\n    });\n\n    Logger.info(`Deploy conclu\u00eddo. Container: ${newContainer.id}`);\n  } catch (error) {\n    Logger.error('Erro no deploy', error);\n    throw error;\n  }\n}\n</code></pre>"},{"location":"api/utilities/#exemplo-3-monitoramento","title":"Exemplo 3: Monitoramento","text":"<pre><code>import { DockerUtils, TimeUtils, Logger, ColorUtils } from '@docker-pilot/utils';\n\nasync function monitorContainers() {\n  while (true) {\n    try {\n      const containers = await DockerUtils.listContainers({ all: true });\n\n      console.clear();\n      console.log(ColorUtils.bold('=== Status dos Containers ===\\n'));\n\n      for (const container of containers) {\n        const status = container.state === 'running'\n          ? ColorUtils.green('\u25cf')\n          : ColorUtils.red('\u25cf');\n\n        const uptime = container.state === 'running'\n          ? TimeUtils.formatDuration(Date.now() - container.startedAt)\n          : 'Parado';\n\n        console.log(`${status} ${container.name} - ${uptime}`);\n      }\n\n      await TimeUtils.sleep(5000); // Atualiza a cada 5 segundos\n    } catch (error) {\n      Logger.error('Erro no monitoramento', error);\n      await TimeUtils.sleep(10000);\n    }\n  }\n}\n</code></pre>"},{"location":"api/utilities/#configuracao-de-utilitarios","title":"Configura\u00e7\u00e3o de Utilit\u00e1rios","text":""},{"location":"api/utilities/#utilsconfig","title":"UtilsConfig","text":"<p>Configura\u00e7\u00e3o global para utilit\u00e1rios.</p> <pre><code>interface UtilsConfig {\n  docker: {\n    timeout: number;\n    retries: number;\n    host?: string;\n  };\n  logging: {\n    level: LogLevel;\n    transports: LogTransport[];\n  };\n  validation: {\n    strict: boolean;\n    customRules: ValidationRule[];\n  };\n}\n</code></pre>"},{"location":"api/utilities/#inicializacao","title":"Inicializa\u00e7\u00e3o","text":"<pre><code>import { UtilsConfig } from '@docker-pilot/utils';\n\nconst config: UtilsConfig = {\n  docker: {\n    timeout: 30000,\n    retries: 3,\n    host: 'unix:///var/run/docker.sock'\n  },\n  logging: {\n    level: LogLevel.INFO,\n    transports: [\n      new ConsoleTransport(),\n      new FileTransport({ filename: 'app.log' })\n    ]\n  },\n  validation: {\n    strict: true,\n    customRules: []\n  }\n};\n\nawait UtilsConfig.initialize(config);\n</code></pre>"},{"location":"development/architecture/","title":"Docker Pilot Architecture","text":"<p>This document describes the overall architecture of Docker Pilot, its main components and how they interact with each other.</p>"},{"location":"development/architecture/#overview","title":"Overview","text":"<p>Docker Pilot is a CLI application built in TypeScript that provides a simplified and intuitive interface for managing Docker resources. The architecture is modular, extensible and follows clean design principles.</p>"},{"location":"development/architecture/#architectural-principles","title":"Architectural Principles","text":""},{"location":"development/architecture/#1-modularity","title":"1. Modularity","text":"<ul> <li>Well-defined and independent components</li> <li>Low coupling between modules</li> <li>High cohesion within modules</li> </ul>"},{"location":"development/architecture/#2-extensibility","title":"2. Extensibility","text":"<ul> <li>Plugin system for custom functionality</li> <li>Well-defined interface for extensions</li> <li>Hooks to intercept operations</li> </ul>"},{"location":"development/architecture/#3-testability","title":"3. Testability","text":"<ul> <li>Dependency inversion</li> <li>Well-defined mocks and interfaces</li> <li>Clear separation between logic and infrastructure</li> </ul>"},{"location":"development/architecture/#4-configurability","title":"4. Configurability","text":"<ul> <li>Flexible configuration via files and environment variables</li> <li>Different profiles for different environments</li> <li>Robust configuration validation</li> </ul>"},{"location":"development/architecture/#high-level-architecture","title":"High-Level Architecture","text":""},{"location":"development/architecture/#main-components","title":"Main Components","text":""},{"location":"development/architecture/#1-core-engine-dockerpilot","title":"1. Core Engine (DockerPilot)","text":"<p>The application core that coordinates all other components.</p> <pre><code>class DockerPilot {\n  private commandRunner: CommandRunner;\n  private configManager: ConfigManager;\n  private serviceManager: ServiceManager;\n  private pluginManager: PluginManager;\n\n  async initialize(): Promise&lt;void&gt;;\n  async run(args: string[]): Promise&lt;void&gt;;\n  async shutdown(): Promise&lt;void&gt;;\n}\n</code></pre> <p>Responsibilities: - Application initialization - Component coordination - Lifecycle management - Global error handling</p>"},{"location":"development/architecture/#2-command-system","title":"2. Command System","text":"<p>System responsible for defining, registering and executing commands.</p> <pre><code>interface Command {\n  name: string;\n  description: string;\n  category: CommandCategory;\n  execute(context: CommandContext): Promise&lt;CommandResult&gt;;\n}\n\nclass CommandRunner {\n  private registry: CommandRegistry;\n\n  async execute(commandName: string, args: string[]): Promise&lt;CommandResult&gt;;\n  async executeInteractive(): Promise&lt;void&gt;;\n}\n</code></pre> <p>Components: - CommandRegistry: Centralized command registry - CommandRunner: Command executor - CommandContext: Execution context - CommandValidator: Argument validation</p>"},{"location":"development/architecture/#3-docker-integration","title":"3. Docker Integration","text":"<p>Docker Engine integration layer.</p> <pre><code>class DockerClient {\n  async listContainers(options?: ListOptions): Promise&lt;Container[]&gt;;\n  async createContainer(options: CreateOptions): Promise&lt;string&gt;;\n  async startContainer(id: string): Promise&lt;void&gt;;\n  // ... other methods\n}\n\nclass DockerUtils {\n  static async isDockerRunning(): Promise&lt;boolean&gt;;\n  static async getDockerVersion(): Promise&lt;string&gt;;\n  static parseDockerfile(path: string): DockerInstruction[];\n}\n</code></pre> <p>Components: - DockerClient: Docker API client - DockerUtils: Docker utilities - ResourceManagers: Specific managers (Container, Image, etc.)</p>"},{"location":"development/architecture/#4-configuration-management","title":"4. Configuration Management","text":"<p>Configuration management system.</p> <pre><code>class ConfigManager {\n  private config: DockerPilotConfig;\n\n  async load(): Promise&lt;void&gt;;\n  async save(): Promise&lt;void&gt;;\n  get&lt;T&gt;(key: string): T;\n  set&lt;T&gt;(key: string, value: T): void;\n  validate(): ValidationResult;\n}\n</code></pre> <p>Features: - Multiple configuration sources - Schema validation - Hierarchical configuration - Hot reload of configurations</p>"},{"location":"development/architecture/#5-plugin-system","title":"5. Plugin System","text":"<p>Extensible plugin system.</p> <pre><code>interface Plugin {\n  name: string;\n  version: string;\n  initialize(context: PluginContext): Promise&lt;void&gt;;\n  getCommands?(): Command[];\n  getHooks?(): PluginHooks;\n}\n\nclass PluginManager {\n  async loadPlugin(pluginPath: string): Promise&lt;void&gt;;\n  async unloadPlugin(pluginName: string): Promise&lt;void&gt;;\n  getLoadedPlugins(): Plugin[];\n}\n</code></pre> <p>Features: - Dynamic loading - Plugin isolation - Well-defined API - Hooks for extensibility</p>"},{"location":"development/architecture/#data-flow","title":"Data Flow","text":""},{"location":"development/architecture/#1-initialization","title":"1. Initialization","text":""},{"location":"development/architecture/#2-command-execution","title":"2. Command Execution","text":""},{"location":"development/architecture/#3-plugin-loading","title":"3. Plugin Loading","text":""},{"location":"development/architecture/#design-patterns-used","title":"Design Patterns Used","text":""},{"location":"development/architecture/#1-command-pattern","title":"1. Command Pattern","text":"<p>Each operation is encapsulated as a command, allowing: - Decoupling between invoker and receiver - Easy addition of new commands - Undo/redo support (future) - Logging and auditing of operations</p>"},{"location":"development/architecture/#2-strategy-pattern","title":"2. Strategy Pattern","text":"<p>For different execution and formatting strategies: <pre><code>interface OutputFormatter {\n  format(data: any): string;\n}\n\nclass TableFormatter implements OutputFormatter {\n  format(data: any): string {\n    // implementation\n  }\n}\n\nclass JsonFormatter implements OutputFormatter {\n  format(data: any): string {\n    return JSON.stringify(data, null, 2);\n  }\n}\n</code></pre></p>"},{"location":"development/architecture/#3-observer-pattern","title":"3. Observer Pattern","text":"<p>For event system and hooks: <pre><code>class EventBus {\n  private listeners: Map&lt;string, EventHandler[]&gt; = new Map();\n\n  on(event: string, handler: EventHandler): void;\n  emit(event: string, data: any): void;\n  off(event: string, handler: EventHandler): void;\n}\n</code></pre></p>"},{"location":"development/architecture/#4-factory-pattern","title":"4. Factory Pattern","text":"<p>For creating complex objects: <pre><code>class CommandFactory {\n  static create(type: CommandType, options: CommandOptions): Command {\n    switch (type) {\n      case 'container': return new ContainerCommand(options);\n      case 'image': return new ImageCommand(options);\n      default: throw new Error(`Unknown command type: ${type}`);\n    }\n  }\n}\n</code></pre></p>"},{"location":"development/architecture/#5-dependency-injection","title":"5. Dependency Injection","text":"<p>For inversion of control: <pre><code>class ContainerManager {\n  constructor(\n    private dockerClient: DockerClient,\n    private logger: Logger,\n    private validator: Validator\n  ) {}\n}\n</code></pre></p>"},{"location":"development/architecture/#directory-structure","title":"Directory Structure","text":"<pre><code>src/\n\u251c\u2500\u2500 core/                   # Main components\n\u2502   \u251c\u2500\u2500 DockerPilot.ts     # Main application class\n\u2502   \u251c\u2500\u2500 CommandRunner.ts   # Command executor\n\u2502   \u251c\u2500\u2500 ConfigManager.ts   # Configuration manager\n\u2502   \u2514\u2500\u2500 ServiceManager.ts  # Service manager\n\u251c\u2500\u2500 commands/              # Command implementations\n\u2502   \u251c\u2500\u2500 base/              # Base classes for commands\n\u2502   \u251c\u2500\u2500 container/         # Container commands\n\u2502   \u251c\u2500\u2500 image/             # Image commands\n\u2502   \u251c\u2500\u2500 volume/            # Volume commands\n\u2502   \u251c\u2500\u2500 network/           # Network commands\n\u2502   \u2514\u2500\u2500 compose/           # Compose commands\n\u251c\u2500\u2500 docker/                # Docker integration\n\u2502   \u251c\u2500\u2500 DockerClient.ts    # Docker client\n\u2502   \u251c\u2500\u2500 managers/          # Resource managers\n\u2502   \u2514\u2500\u2500 utils/             # Docker utilities\n\u251c\u2500\u2500 plugins/               # Plugin system\n\u2502   \u251c\u2500\u2500 PluginManager.ts   # Plugin manager\n\u2502   \u251c\u2500\u2500 PluginLoader.ts    # Plugin loader\n\u2502   \u2514\u2500\u2500 types.ts           # Plugin types\n\u251c\u2500\u2500 config/                # Configuration management\n\u2502   \u251c\u2500\u2500 ConfigLoader.ts    # Configuration loader\n\u2502   \u251c\u2500\u2500 ConfigValidator.ts # Configuration validator\n\u2502   \u2514\u2500\u2500 defaults.ts        # Default configurations\n\u251c\u2500\u2500 utils/                 # General utilities\n\u2502   \u251c\u2500\u2500 Logger.ts          # Logging system\n\u2502   \u251c\u2500\u2500 FileUtils.ts       # File utilities\n\u2502   \u251c\u2500\u2500 ValidationUtils.ts # Validation utilities\n\u2502   \u2514\u2500\u2500 ProcessUtils.ts    # Process utilities\n\u251c\u2500\u2500 types/                 # Type definitions\n\u2502   \u251c\u2500\u2500 index.ts           # Main exports\n\u2502   \u251c\u2500\u2500 docker.ts          # Docker types\n\u2502   \u251c\u2500\u2500 commands.ts        # Command types\n\u2502   \u2514\u2500\u2500 config.ts          # Configuration types\n\u251c\u2500\u2500 ui/                    # User interface\n\u2502   \u251c\u2500\u2500 InteractiveMenu.ts # Interactive menu\n\u2502   \u251c\u2500\u2500 formatters/        # Output formatters\n\u2502   \u2514\u2500\u2500 components/        # UI components\n\u2514\u2500\u2500 index.ts               # Entry point\n</code></pre>"},{"location":"development/architecture/#state-management","title":"State Management","text":""},{"location":"development/architecture/#1-configuration-state","title":"1. Configuration State","text":"<pre><code>interface ConfigState {\n  docker: DockerConfig;\n  ui: UIConfig;\n  plugins: PluginConfig;\n  logging: LoggingConfig;\n}\n</code></pre>"},{"location":"development/architecture/#2-runtime-state","title":"2. Runtime State","text":"<pre><code>interface RuntimeState {\n  currentCommand: string | null;\n  loadedPlugins: Plugin[];\n  dockerConnection: ConnectionState;\n  interactiveMode: boolean;\n}\n</code></pre>"},{"location":"development/architecture/#3-cache-state","title":"3. Cache State","text":"<pre><code>interface CacheState {\n  containers: Map&lt;string, Container&gt;;\n  images: Map&lt;string, Image&gt;;\n  volumes: Map&lt;string, Volume&gt;;\n  networks: Map&lt;string, Network&gt;;\n  lastUpdate: Date;\n}\n</code></pre>"},{"location":"development/architecture/#error-handling","title":"Error Handling","text":""},{"location":"development/architecture/#error-hierarchy","title":"Error Hierarchy","text":"<pre><code>abstract class DockerPilotError extends Error {\n  abstract code: string;\n  abstract level: ErrorLevel;\n}\n\nclass DockerConnectionError extends DockerPilotError {\n  code = 'DOCKER_CONNECTION_ERROR';\n  level = ErrorLevel.FATAL;\n}\n\nclass CommandNotFoundError extends DockerPilotError {\n  code = 'COMMAND_NOT_FOUND';\n  level = ErrorLevel.ERROR;\n}\n\nclass ValidationError extends DockerPilotError {\n  code = 'VALIDATION_ERROR';\n  level = ErrorLevel.WARNING;\n}\n</code></pre>"},{"location":"development/architecture/#error-handling-strategy","title":"Error Handling Strategy","text":"<pre><code>class ErrorHandler {\n  handle(error: Error, context: ErrorContext): void {\n    if (error instanceof DockerPilotError) {\n      this.handleKnownError(error, context);\n    } else {\n      this.handleUnknownError(error, context);\n    }\n  }\n\n  private handleKnownError(error: DockerPilotError, context: ErrorContext): void {\n    switch (error.level) {\n      case ErrorLevel.FATAL:\n        this.logger.fatal(error.message, error);\n        process.exit(1);\n      case ErrorLevel.ERROR:\n        this.logger.error(error.message, error);\n        throw error;\n      case ErrorLevel.WARNING:\n        this.logger.warn(error.message, error);\n        break;\n    }\n  }\n}\n</code></pre>"},{"location":"development/architecture/#performance-and-optimization","title":"Performance and Optimization","text":""},{"location":"development/architecture/#1-lazy-loading","title":"1. Lazy Loading","text":"<ul> <li>Plugins are loaded on demand</li> <li>Commands are initialized only when needed</li> <li>Docker resources are cached when appropriate</li> </ul>"},{"location":"development/architecture/#2-connection-pooling","title":"2. Connection Pooling","text":"<pre><code>class DockerConnectionPool {\n  private pool: DockerClient[] = [];\n  private maxConnections = 5;\n\n  async getConnection(): Promise&lt;DockerClient&gt; {\n    if (this.pool.length &gt; 0) {\n      return this.pool.pop()!;\n    }\n    return new DockerClient();\n  }\n\n  releaseConnection(client: DockerClient): void {\n    if (this.pool.length &lt; this.maxConnections) {\n      this.pool.push(client);\n    }\n  }\n}\n</code></pre>"},{"location":"development/architecture/#3-caching-strategy","title":"3. Caching Strategy","text":"<pre><code>class ResourceCache {\n  private cache = new Map&lt;string, CacheEntry&gt;();\n  private ttl = 30000; // 30 seconds\n\n  get&lt;T&gt;(key: string): T | null {\n    const entry = this.cache.get(key);\n    if (!entry || Date.now() - entry.timestamp &gt; this.ttl) {\n      this.cache.delete(key);\n      return null;\n    }\n    return entry.value;\n  }\n\n  set&lt;T&gt;(key: string, value: T): void {\n    this.cache.set(key, {\n      value,\n      timestamp: Date.now()\n    });\n  }\n}\n</code></pre>"},{"location":"development/architecture/#security","title":"Security","text":""},{"location":"development/architecture/#1-input-validation","title":"1. Input Validation","text":"<pre><code>class InputValidator {\n  validateContainerName(name: string): ValidationResult {\n    const pattern = /^[a-zA-Z0-9][a-zA-Z0-9_.-]*$/;\n    if (!pattern.test(name)) {\n      return {\n        valid: false,\n        errors: ['Invalid container name']\n      };\n    }\n    return { valid: true, errors: [] };\n  }\n}\n</code></pre>"},{"location":"development/architecture/#2-command-sanitization","title":"2. Command Sanitization","text":"<pre><code>class CommandSanitizer {\n  sanitize(command: string): string {\n    // Remove dangerous characters\n    return command.replace(/[;&amp;|`$()]/g, '');\n  }\n\n  validateDockerCommand(command: string[]): boolean {\n    const allowedCommands = ['ps', 'images', 'volume', 'network'];\n    return allowedCommands.includes(command[0]);\n  }\n}\n</code></pre>"},{"location":"development/architecture/#3-permission-checking","title":"3. Permission Checking","text":"<pre><code>class PermissionChecker {\n  async canAccessDocker(): Promise&lt;boolean&gt; {\n    try {\n      await this.dockerClient.ping();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  async canWriteToPath(path: string): Promise&lt;boolean&gt; {\n    try {\n      await fs.access(path, fs.constants.W_OK);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n}\n</code></pre>"},{"location":"development/architecture/#extensibility","title":"Extensibility","text":""},{"location":"development/architecture/#1-plugin-architecture","title":"1. Plugin Architecture","text":"<pre><code>interface PluginAPI {\n  registerCommand(command: Command): void;\n  registerHook(event: string, handler: EventHandler): void;\n  getConfig(): DockerPilotConfig;\n  getLogger(): Logger;\n  getDockerClient(): DockerClient;\n}\n</code></pre>"},{"location":"development/architecture/#2-hook-system","title":"2. Hook System","text":"<pre><code>class HookSystem {\n  private hooks = new Map&lt;string, EventHandler[]&gt;();\n\n  register(event: string, handler: EventHandler): void {\n    if (!this.hooks.has(event)) {\n      this.hooks.set(event, []);\n    }\n    this.hooks.get(event)!.push(handler);\n  }\n\n  async trigger(event: string, data: any): Promise&lt;void&gt; {\n    const handlers = this.hooks.get(event) || [];\n    await Promise.all(handlers.map(handler =&gt; handler(data)));\n  }\n}\n</code></pre>"},{"location":"development/architecture/#3-custom-commands","title":"3. Custom Commands","text":"<pre><code>abstract class CustomCommand implements Command {\n  abstract name: string;\n  abstract description: string;\n  abstract category: CommandCategory;\n\n  async execute(context: CommandContext): Promise&lt;CommandResult&gt; {\n    try {\n      await this.preExecute(context);\n      const result = await this.doExecute(context);\n      await this.postExecute(context, result);\n      return result;\n    } catch (error) {\n      await this.onError(context, error as Error);\n      throw error;\n    }\n  }\n\n  protected async preExecute(context: CommandContext): Promise&lt;void&gt; {}\n  protected abstract doExecute(context: CommandContext): Promise&lt;CommandResult&gt;;\n  protected async postExecute(context: CommandContext, result: CommandResult): Promise&lt;void&gt; {}\n  protected async onError(context: CommandContext, error: Error): Promise&lt;void&gt; {}\n}\n</code></pre>"},{"location":"development/architecture/#testing-architecture","title":"Testing Architecture","text":""},{"location":"development/architecture/#1-test-structure","title":"1. Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/                  # Unit tests\n\u2502   \u251c\u2500\u2500 core/             # Core tests\n\u2502   \u251c\u2500\u2500 commands/         # Command tests\n\u2502   \u251c\u2500\u2500 utils/            # Utility tests\n\u2502   \u2514\u2500\u2500 plugins/          # Plugin tests\n\u251c\u2500\u2500 integration/          # Integration tests\n\u2502   \u251c\u2500\u2500 docker/           # Docker integration\n\u2502   \u251c\u2500\u2500 commands/         # End-to-end commands\n\u2502   \u2514\u2500\u2500 plugins/          # End-to-end plugins\n\u251c\u2500\u2500 e2e/                  # End-to-end tests\n\u2502   \u251c\u2500\u2500 cli/              # CLI interface\n\u2502   \u2514\u2500\u2500 scenarios/        # Complete scenarios\n\u251c\u2500\u2500 fixtures/             # Test data\n\u2502   \u251c\u2500\u2500 containers/       # Container configurations\n\u2502   \u251c\u2500\u2500 images/           # Image definitions\n\u2502   \u2514\u2500\u2500 configs/          # Test configurations\n\u2514\u2500\u2500 helpers/              # Test utilities\n    \u251c\u2500\u2500 mocks/            # Mocks and stubs\n    \u251c\u2500\u2500 setup/            # Environment setup\n    \u2514\u2500\u2500 assertions/       # Custom assertions\n</code></pre>"},{"location":"development/architecture/#2-test-utilities","title":"2. Test Utilities","text":"<pre><code>class TestEnvironment {\n  static async setup(): Promise&lt;void&gt; {\n    // Setup Docker test environment\n    await DockerTestHelper.createTestNetwork();\n    await DockerTestHelper.pullTestImages();\n  }\n\n  static async teardown(): Promise&lt;void&gt; {\n    // Cleanup test environment\n    await DockerTestHelper.removeTestContainers();\n    await DockerTestHelper.removeTestNetwork();\n  }\n}\n</code></pre>"},{"location":"development/architecture/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"development/architecture/#1-build-process","title":"1. Build Process","text":"<pre><code>// build.config.ts\nexport default {\n  entry: './src/index.ts',\n  output: {\n    dir: './dist',\n    format: 'cjs'\n  },\n  external: ['docker-cli-js', 'inquirer'],\n  plugins: [\n    typescript(),\n    nodeResolve(),\n    commonjs()\n  ]\n};\n</code></pre>"},{"location":"development/architecture/#2-distribution","title":"2. Distribution","text":"<ul> <li>npm package: For npm installation</li> <li>Docker image: For container execution</li> <li>Binary executables: For different platforms</li> <li>GitHub releases: For direct download</li> </ul>"},{"location":"development/architecture/#3-monitoring","title":"3. Monitoring","text":"<pre><code>class TelemetryCollector {\n  async collectUsageData(): Promise&lt;UsageData&gt; {\n    return {\n      commandsExecuted: this.getCommandStats(),\n      errorRates: this.getErrorStats(),\n      performance: this.getPerformanceStats(),\n      features: this.getFeatureUsage()\n    };\n  }\n}\n</code></pre>"},{"location":"development/architecture/#architecture-evolution","title":"Architecture Evolution","text":""},{"location":"development/architecture/#future-versions","title":"Future Versions","text":"<ol> <li>v2.0:</li> <li>Multi Docker host support</li> <li>Optional web interface</li> <li> <p>Cluster management</p> </li> <li> <p>v3.0:</p> </li> <li>Kubernetes integration</li> <li>Cloud provider plugins</li> <li> <p>Advanced monitoring</p> </li> <li> <p>v4.0:</p> </li> <li>AI-powered optimization</li> <li>Automated troubleshooting</li> <li>Infrastructure as Code</li> </ol>"},{"location":"development/architecture/#migration-strategy","title":"Migration Strategy","text":"<pre><code>class MigrationManager {\n  async migrateConfig(fromVersion: string, toVersion: string): Promise&lt;void&gt; {\n    const migrations = this.getMigrations(fromVersion, toVersion);\n    for (const migration of migrations) {\n      await migration.execute();\n    }\n  }\n}\n</code></pre> <p>This architecture provides a solid and extensible foundation for Docker Pilot, allowing continuous growth and evolution while maintaining the simplicity and usability that are the project's pillars.</p>"},{"location":"development/building/","title":"Macro Syntax Error","text":"<p>File: <code>development\\building.md</code></p> <p>Line 698 in Markdown file: unexpected '}' <pre><code>          type=semver,pattern={{version } }\n</code></pre></p>"},{"location":"development/contributing/","title":"Contributing Guide","text":"<p>Thank you for considering contributing to Docker Pilot! This guide provides all the information needed to contribute effectively to the project.</p>"},{"location":"development/contributing/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Code of Conduct</li> <li>How to Contribute</li> <li>Environment Setup</li> <li>Project Structure</li> <li>Code Standards</li> <li>Testing</li> <li>Documentation</li> <li>Review Process</li> <li>Releases</li> </ol>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and all participants are governed by the Code of Conduct. By participating, you agree to follow this code.</p>"},{"location":"development/contributing/#expected-behavior","title":"Expected Behavior","text":"<ul> <li>Use welcoming and inclusive language</li> <li>Respect different viewpoints and experiences</li> <li>Accept constructive criticism gracefully</li> <li>Focus on what is best for the community</li> <li>Show empathy towards other community members</li> </ul>"},{"location":"development/contributing/#unacceptable-behavior","title":"Unacceptable Behavior","text":"<ul> <li>Use of sexualized language or imagery</li> <li>Trolling, insulting/derogatory comments</li> <li>Public or private harassment</li> <li>Publishing private information without permission</li> <li>Any conduct considered inappropriate in a professional environment</li> </ul>"},{"location":"development/contributing/#how-to-contribute","title":"How to Contribute","text":"<p>There are several ways to contribute to Docker Pilot:</p>"},{"location":"development/contributing/#1-report-bugs","title":"1. Report Bugs","text":"<p>If you found a bug, help us by creating an issue:</p> <ol> <li>Check if the bug has already been reported</li> <li>Use the bug report template</li> <li>Include detailed environment information</li> <li>Provide steps to reproduce the problem</li> <li>Add logs and screenshots when relevant</li> </ol> <p>Bug Report Template:</p> <pre><code>**Bug Description**\nClear and concise description of the problem.\n\n**Steps to Reproduce**\n1. Go to '...'\n2. Click on '....'\n3. Execute '....'\n4. See the error\n\n**Expected Behavior**\nWhat you expected to happen.\n\n**Screenshots**\nIf applicable, add screenshots.\n\n**Environment:**\n- OS: [e.g. Windows, macOS, Linux]\n- Docker Version: [e.g. 24.0.7]\n- Docker Pilot Version: [e.g. 1.0.0]\n- Node.js Version: [e.g. 18.17.0]\n\n**Additional Information**\nAny additional context about the problem.\n</code></pre>"},{"location":"development/contributing/#2-suggest-improvements","title":"2. Suggest Improvements","text":"<p>To suggest a new feature:</p> <ol> <li>Check if the feature has already been suggested</li> <li>Use the feature request template</li> <li>Clearly describe the problem it solves</li> <li>Provide usage examples</li> <li>Consider alternatives</li> </ol> <p>Feature Request Template:</p> <pre><code>**Feature Description**\nClear and concise description of the desired feature.\n\n**Problem Solved**\nWhat problem does this feature solve?\n\n**Proposed Solution**\nHow would you like it to work?\n\n**Alternatives Considered**\nWhat other solutions have you considered?\n\n**Additional Context**\nAny additional relevant information.\n</code></pre>"},{"location":"development/contributing/#3-contribute-code","title":"3. Contribute Code","text":"<p>To contribute code:</p> <ol> <li>Fork the repository</li> <li>Create a branch for your feature</li> <li>Make your changes</li> <li>Add tests</li> <li>Run the tests</li> <li>Commit your changes</li> <li>Create a pull request</li> </ol>"},{"location":"development/contributing/#environment-setup","title":"Environment Setup","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 18.x or higher</li> <li>npm 9.x or higher</li> <li>Docker 24.x or higher</li> <li>Git 2.x or higher</li> </ul>"},{"location":"development/contributing/#installation","title":"Installation","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/your-username/docker-pilot.git\ncd docker-pilot\n</code></pre> <ol> <li>Install dependencies:</li> </ol> <pre><code>npm install\n</code></pre> <ol> <li>Configure development environment:</li> </ol> <pre><code># Create local configuration file\ncp .env.example .env.local\n\n# Install development tools\nnpm run dev:setup\n</code></pre> <ol> <li>Build the project:</li> </ol> <pre><code>npm run build\n</code></pre> <ol> <li>Run tests:</li> </ol> <pre><code>npm test\n</code></pre>"},{"location":"development/contributing/#docker-configuration","title":"Docker Configuration","text":"<p>Docker Pilot requires Docker to be running:</p> <pre><code># Check if Docker is running\ndocker version\n\n# Start Docker (if needed)\n# Windows/macOS: Start Docker Desktop\n# Linux: sudo systemctl start docker\n</code></pre>"},{"location":"development/contributing/#ide-configuration","title":"IDE Configuration","text":""},{"location":"development/contributing/#visual-studio-code","title":"Visual Studio Code","text":"<p>Install recommended extensions:</p> <ul> <li>TypeScript Hero - Import organization</li> <li>ESLint - Code linting</li> <li>Prettier - Code formatting</li> <li>Jest - Test execution</li> <li>Docker - Docker support</li> </ul> <p>Recommended configuration (<code>.vscode/settings.json</code>):</p> <pre><code>{\n  \"typescript.preferences.importModuleSpecifier\": \"relative\",\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true,\n    \"source.organizeImports\": true\n  },\n  \"jest.autoRun\": \"watch\",\n  \"files.exclude\": {\n    \"**/node_modules\": true,\n    \"**/dist\": true,\n    \"**/.git\": true\n  }\n}\n</code></pre>"},{"location":"development/contributing/#project-structure","title":"Project Structure","text":"<pre><code>docker-pilot/\n\u251c\u2500\u2500 src/                    # Source code\n\u2502   \u251c\u2500\u2500 core/              # Core functionality\n\u2502   \u2502   \u251c\u2500\u2500 DockerPilot.ts\n\u2502   \u2502   \u251c\u2500\u2500 CommandRunner.ts\n\u2502   \u2502   \u251c\u2500\u2500 ConfigManager.ts\n\u2502   \u2502   \u2514\u2500\u2500 ServiceManager.ts\n\u2502   \u251c\u2500\u2500 commands/          # Command implementations\n\u2502   \u2502   \u251c\u2500\u2500 container/\n\u2502   \u2502   \u251c\u2500\u2500 image/\n\u2502   \u2502   \u251c\u2500\u2500 volume/\n\u2502   \u2502   \u2514\u2500\u2500 network/\n\u2502   \u251c\u2500\u2500 utils/             # Utilities\n\u2502   \u2502   \u251c\u2500\u2500 DockerUtils.ts\n\u2502   \u2502   \u251c\u2500\u2500 FileUtils.ts\n\u2502   \u2502   \u251c\u2500\u2500 Logger.ts\n\u2502   \u2502   \u2514\u2500\u2500 ValidationUtils.ts\n\u2502   \u251c\u2500\u2500 types/             # Type definitions\n\u2502   \u2502   \u2514\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 plugins/           # Plugin system\n\u2502   \u2502   \u251c\u2500\u2500 PluginManager.ts\n\u2502   \u2502   \u2514\u2500\u2500 types.ts\n\u2502   \u2514\u2500\u2500 index.ts           # Entry point\n\u251c\u2500\u2500 tests/                 # Tests\n\u2502   \u251c\u2500\u2500 unit/\n\u2502   \u251c\u2500\u2500 integration/\n\u2502   \u251c\u2500\u2500 e2e/\n\u2502   \u2514\u2500\u2500 fixtures/\n\u251c\u2500\u2500 docs/                  # Documentation\n\u251c\u2500\u2500 scripts/               # Build/deploy scripts\n\u251c\u2500\u2500 .github/               # GitHub workflows\n\u2514\u2500\u2500 config/                # Configurations\n</code></pre>"},{"location":"development/contributing/#important-files","title":"Important Files","text":"<ul> <li><code>package.json</code> - Project configuration and dependencies</li> <li><code>tsconfig.json</code> - TypeScript configuration</li> <li><code>jest.config.js</code> - Test configuration</li> <li><code>.eslintrc.js</code> - ESLint configuration</li> <li><code>.prettierrc</code> - Prettier configuration</li> <li><code>docker-compose.yml</code> - Development environment</li> </ul>"},{"location":"development/contributing/#code-standards","title":"Code Standards","text":""},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>We follow TypeScript and ESLint conventions:</p> <pre><code>// \u2705 Good\nclass ContainerManager {\n  private readonly containers: Map&lt;string, Container&gt; = new Map();\n\n  async startContainer(name: string): Promise&lt;void&gt; {\n    const container = this.containers.get(name);\n    if (!container) {\n      throw new Error(`Container ${name} not found`);\n    }\n\n    await container.start();\n  }\n}\n\n// \u274c Bad\nclass containerManager {\n  private containers: any;\n\n  startContainer(name) {\n    return this.containers.get(name).start();\n  }\n}\n</code></pre>"},{"location":"development/contributing/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Classes: PascalCase (<code>ContainerManager</code>)</li> <li>Methods/Functions: camelCase (<code>startContainer</code>)</li> <li>Variables: camelCase (<code>containerName</code>)</li> <li>Constants: UPPER_SNAKE_CASE (<code>DEFAULT_TIMEOUT</code>)</li> <li>Interfaces: PascalCase with I prefix (<code>IContainerConfig</code>)</li> <li>Types: PascalCase (<code>ContainerStatus</code>)</li> <li>Enums: PascalCase (<code>LogLevel</code>)</li> </ul>"},{"location":"development/contributing/#file-structure","title":"File Structure","text":"<pre><code>// file: src/utils/ContainerUtils.ts\n\nimport { Container, ContainerStatus } from '../types';\nimport { DockerClient } from '../core/DockerClient';\nimport { Logger } from './Logger';\n\n/**\n * Utilities for managing Docker containers\n */\nexport class ContainerUtils {\n  private static readonly logger = new Logger('ContainerUtils');\n\n  /**\n   * Checks if a container is running\n   * @param container Container to check\n   * @returns true if running\n   */\n  static isRunning(container: Container): boolean {\n    return container.status === ContainerStatus.Running;\n  }\n\n  /**\n   * Gets containers by status\n   * @param client Docker client\n   * @param status Desired status\n   * @returns List of containers\n   */\n  static async getByStatus(\n    client: DockerClient,\n    status: ContainerStatus\n  ): Promise&lt;Container[]&gt; {\n    try {\n      const containers = await client.listContainers();\n      return containers.filter(c =&gt; c.status === status);\n    } catch (error) {\n      this.logger.error('Error getting containers by status', error);\n      throw error;\n    }\n  }\n}\n</code></pre>"},{"location":"development/contributing/#error-handling","title":"Error Handling","text":"<pre><code>// \u2705 Good - Specific handling\nasync function stopContainer(name: string): Promise&lt;void&gt; {\n  try {\n    const container = await findContainer(name);\n    if (!container) {\n      throw new ContainerNotFoundError(`Container ${name} not found`);\n    }\n\n    await container.stop();\n    logger.info(`Container ${name} stopped successfully`);\n  } catch (error) {\n    if (error instanceof ContainerNotFoundError) {\n      logger.warn(`Container ${name} not found`);\n    } else {\n      logger.error(`Error stopping container ${name}`, error);\n    }\n    throw error;\n  }\n}\n\n// \u274c Bad - Generic handling\nasync function stopContainer(name: string): Promise&lt;void&gt; {\n  try {\n    const container = await findContainer(name);\n    await container.stop();\n  } catch (error) {\n    console.log('Error:', error);\n  }\n}\n</code></pre>"},{"location":"development/contributing/#code-documentation","title":"Code Documentation","text":"<pre><code>/**\n * Manages Docker container operations\n *\n * @example\n * ```typescript\n * const manager = new ContainerManager();\n * await manager.start('nginx');\n * ```\n */\nexport class ContainerManager {\n  /**\n   * Starts a container\n   *\n   * @param name Container name\n   * @param options Start options\n   * @throws {ContainerNotFoundError} When container doesn't exist\n   * @throws {ContainerAlreadyRunningError} When container is already running\n   * @returns Promise that resolves when container starts\n   */\n  async start(name: string, options?: StartOptions): Promise&lt;void&gt; {\n    // implementation\n  }\n}\n</code></pre>"},{"location":"development/contributing/#testing","title":"Testing","text":""},{"location":"development/contributing/#test-structure","title":"Test Structure","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/                  # Unit tests\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 commands/\n\u251c\u2500\u2500 integration/           # Integration tests\n\u2502   \u251c\u2500\u2500 docker/\n\u2502   \u2514\u2500\u2500 api/\n\u251c\u2500\u2500 e2e/                   # End-to-end tests\n\u2502   \u251c\u2500\u2500 cli/\n\u2502   \u2514\u2500\u2500 scenarios/\n\u251c\u2500\u2500 fixtures/              # Test data\n\u2502   \u251c\u2500\u2500 containers/\n\u2502   \u251c\u2500\u2500 images/\n\u2502   \u2514\u2500\u2500 configs/\n\u2514\u2500\u2500 helpers/               # Test utilities\n    \u251c\u2500\u2500 setup.ts\n    \u251c\u2500\u2500 teardown.ts\n    \u2514\u2500\u2500 mocks.ts\n</code></pre>"},{"location":"development/contributing/#test-patterns","title":"Test Patterns","text":""},{"location":"development/contributing/#unit-tests","title":"Unit Tests","text":"<pre><code>// file: tests/unit/utils/ContainerUtils.test.ts\n\nimport { ContainerUtils } from '../../../src/utils/ContainerUtils';\nimport { Container, ContainerStatus } from '../../../src/types';\nimport { createMockContainer } from '../../helpers/mocks';\n\ndescribe('ContainerUtils', () =&gt; {\n  describe('isRunning', () =&gt; {\n    it('should return true for running container', () =&gt; {\n      // Arrange\n      const container = createMockContainer({\n        status: ContainerStatus.Running\n      });\n\n      // Act\n      const result = ContainerUtils.isRunning(container);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for stopped container', () =&gt; {\n      // Arrange\n      const container = createMockContainer({\n        status: ContainerStatus.Exited\n      });\n\n      // Act\n      const result = ContainerUtils.isRunning(container);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('getByStatus', () =&gt; {\n    it('should filter containers by status', async () =&gt; {\n      // Arrange\n      const mockClient = {\n        listContainers: jest.fn().mockResolvedValue([\n          createMockContainer({ status: ContainerStatus.Running }),\n          createMockContainer({ status: ContainerStatus.Exited }),\n          createMockContainer({ status: ContainerStatus.Running })\n        ])\n      };\n\n      // Act\n      const result = await ContainerUtils.getByStatus(\n        mockClient as any,\n        ContainerStatus.Running\n      );\n\n      // Assert\n      expect(result).toHaveLength(2);\n      expect(result.every(c =&gt; c.status === ContainerStatus.Running)).toBe(true);\n    });\n  });\n});\n</code></pre>"},{"location":"development/contributing/#integration-tests","title":"Integration Tests","text":"<pre><code>// file: tests/integration/docker/ContainerManager.test.ts\n\nimport { ContainerManager } from '../../../src/core/ContainerManager';\nimport { DockerClient } from '../../../src/core/DockerClient';\nimport { setupTestEnvironment, teardownTestEnvironment } from '../../helpers/setup';\n\ndescribe('ContainerManager Integration', () =&gt; {\n  let containerManager: ContainerManager;\n  let dockerClient: DockerClient;\n\n  beforeAll(async () =&gt; {\n    await setupTestEnvironment();\n    dockerClient = new DockerClient();\n    containerManager = new ContainerManager(dockerClient);\n  });\n\n  afterAll(async () =&gt; {\n    await teardownTestEnvironment();\n  });\n\n  beforeEach(async () =&gt; {\n    // Clean test containers\n    await dockerClient.pruneContainers();\n  });\n\n  it('should create and start container', async () =&gt; {\n    // Arrange\n    const containerName = 'test-nginx';\n    const image = 'nginx:alpine';\n\n    // Act\n    await containerManager.create(containerName, image);\n    await containerManager.start(containerName);\n\n    // Assert\n    const container = await dockerClient.getContainer(containerName);\n    expect(container.status).toBe('running');\n  });\n});\n</code></pre>"},{"location":"development/contributing/#e2e-tests","title":"E2E Tests","text":"<pre><code>// file: tests/e2e/cli/container-commands.test.ts\n\nimport { execSync } from 'child_process';\nimport { setupTestEnvironment } from '../../helpers/setup';\n\ndescribe('Container Commands E2E', () =&gt; {\n  beforeAll(async () =&gt; {\n    await setupTestEnvironment();\n  });\n\n  it('should list containers via CLI', () =&gt; {\n    // Act\n    const output = execSync('docker-pilot list containers', {\n      encoding: 'utf8'\n    });\n\n    // Assert\n    expect(output).toContain('CONTAINER ID');\n    expect(output).toContain('IMAGE');\n    expect(output).toContain('STATUS');\n  });\n\n  it('should start container via CLI', () =&gt; {\n    // Arrange\n    execSync('docker run -d --name test-nginx nginx:alpine');\n\n    // Act\n    const output = execSync('docker-pilot start test-nginx', {\n      encoding: 'utf8'\n    });\n\n    // Assert\n    expect(output).toContain('Container test-nginx started');\n  });\n});\n</code></pre>"},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># All tests\nnpm test\n\n# Unit tests\nnpm run test:unit\n\n# Integration tests\nnpm run test:integration\n\n# E2E tests\nnpm run test:e2e\n\n# Tests with coverage\nnpm run test:coverage\n\n# Tests in watch mode\nnpm run test:watch\n\n# Specific tests\nnpm test -- --testNamePattern=\"ContainerUtils\"\nnpm test -- --testPathPattern=\"container\"\n</code></pre>"},{"location":"development/contributing/#mocks-and-fixtures","title":"Mocks and Fixtures","text":"<pre><code>// file: tests/helpers/mocks.ts\n\nimport { Container, ContainerStatus } from '../../src/types';\n\nexport function createMockContainer(overrides: Partial&lt;Container&gt; = {}): Container {\n  return {\n    id: 'mock-container-id',\n    name: 'mock-container',\n    image: 'nginx:latest',\n    status: ContainerStatus.Running,\n    created: new Date(),\n    ports: [],\n    volumes: [],\n    networks: [],\n    ...overrides\n  };\n}\n\nexport function createMockDockerClient() {\n  return {\n    listContainers: jest.fn(),\n    getContainer: jest.fn(),\n    createContainer: jest.fn(),\n    startContainer: jest.fn(),\n    stopContainer: jest.fn(),\n    removeContainer: jest.fn()\n  };\n}\n</code></pre>"},{"location":"development/contributing/#documentation","title":"Documentation","text":""},{"location":"development/contributing/#code-documentation_1","title":"Code Documentation","text":"<ul> <li>Use JSDoc to document public classes, methods, and functions</li> <li>Include usage examples when appropriate</li> <li>Document parameters, returns, and exceptions</li> <li>Use <code>@deprecated</code> for obsolete features</li> </ul>"},{"location":"development/contributing/#api-documentation","title":"API Documentation","text":"<ul> <li>Keep API documentation up to date</li> <li>Use practical examples</li> <li>Document all endpoints and parameters</li> <li>Include response codes and examples</li> </ul>"},{"location":"development/contributing/#readme-and-guides","title":"README and Guides","text":"<ul> <li>Keep README.md updated</li> <li>Include installation and usage guides</li> <li>Add common troubleshooting</li> <li>Document important changes</li> </ul>"},{"location":"development/contributing/#review-process","title":"Review Process","text":""},{"location":"development/contributing/#pull-request-checklist","title":"Pull Request Checklist","text":"<p>Before creating a PR, check:</p> <ul> <li> Code follows established standards</li> <li> Tests were added/updated</li> <li> Documentation was updated</li> <li> Builds pass without errors</li> <li> No merge conflicts</li> <li> Commit messages are descriptive</li> </ul>"},{"location":"development/contributing/#pull-request-template","title":"Pull Request Template","text":"<pre><code>## Description\n\nBrief description of the changes made.\n\n## Type of Change\n\n- [ ] Bug fix (change that fixes an issue)\n- [ ] New feature (change that adds functionality)\n- [ ] Breaking change (change that breaks compatibility)\n- [ ] Documentation (documentation changes only)\n\n## How It Was Tested\n\nDescribe the tests performed to verify the changes.\n\n## Checklist\n\n- [ ] My code follows the project standards\n- [ ] I performed a self-review of the code\n- [ ] I commented complex code\n- [ ] I updated documentation\n- [ ] Tests pass locally\n- [ ] I added tests that prove the fix/feature works\n\n## Screenshots (if applicable)\n\nAdd screenshots for UI changes.\n</code></pre>"},{"location":"development/contributing/#processo-de-review","title":"Processo de Review","text":"<ol> <li>Automated Checks: CI/CD executa testes e linting</li> <li>Code Review: Pelo menos um maintainer deve aprovar</li> <li>Manual Testing: Testes manuais se necess\u00e1rio</li> <li>Merge: Squash and merge para manter hist\u00f3rico limpo</li> </ol>"},{"location":"development/contributing/#releases","title":"Releases","text":""},{"location":"development/contributing/#versioning","title":"Versioning","text":"<p>We follow Semantic Versioning:</p> <ul> <li>MAJOR: Changes that break compatibility</li> <li>MINOR: New compatible features</li> <li>PATCH: Compatible bug fixes</li> </ul>"},{"location":"development/contributing/#release-process","title":"Release Process","text":"<ol> <li>Preparation:</li> <li>Update CHANGELOG.md</li> <li>Bump version in package.json</li> <li> <p>Update documentation</p> </li> <li> <p>Testing:</p> </li> <li>Run all tests</li> <li>Integration tests</li> <li> <p>Manual testing</p> </li> <li> <p>Release:</p> </li> <li>Create version tag</li> <li>Publish to npm</li> <li>Create GitHub release</li> <li> <p>Update documentation</p> </li> <li> <p>Post-Release:</p> </li> <li>Verify deployment</li> <li>Monitor issues</li> <li>Communicate to community</li> </ol>"},{"location":"development/contributing/#changelog","title":"Changelog","text":"<p>We maintain a detailed changelog following Keep a Changelog:</p> <pre><code># Changelog\n\n## [1.2.0] - 2024-01-15\n\n### Added\n- New container monitoring feature\n- Support for Docker Compose v2\n- Command for automatic resource cleanup\n\n### Changed\n- Improved container listing performance\n- Updated interactive menu interface\n\n### Fixed\n- Fixed bug in container name validation\n- Resolved port conflict issue\n\n### Deprecated\n- Command `docker-pilot old-command` will be removed in v2.0\n\n### Removed\n- Removed support for Docker Engine &lt; 20.10\n\n### Security\n- Fixed vulnerability in input validation\n</code></pre>"},{"location":"development/contributing/#development-tools","title":"Development Tools","text":""},{"location":"development/contributing/#npm-scripts","title":"NPM Scripts","text":"<pre><code>{\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"build:watch\": \"tsc --watch\",\n    \"test\": \"jest\",\n    \"test:watch\": \"jest --watch\",\n    \"test:coverage\": \"jest --coverage\",\n    \"lint\": \"eslint src tests --ext .ts\",\n    \"lint:fix\": \"eslint src tests --ext .ts --fix\",\n    \"format\": \"prettier --write src tests\",\n    \"format:check\": \"prettier --check src tests\",\n    \"dev\": \"ts-node src/index.ts\",\n    \"dev:debug\": \"ts-node --inspect src/index.ts\",\n    \"clean\": \"rm -rf dist coverage\",\n    \"precommit\": \"npm run lint &amp;&amp; npm run test\",\n    \"prepush\": \"npm run build &amp;&amp; npm run test:coverage\"\n  }\n}\n</code></pre>"},{"location":"development/contributing/#git-hooks","title":"Git Hooks","text":"<pre><code># .husky/pre-commit\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nnpm run precommit\n\n# .husky/pre-push\n#!/bin/sh\n. \"$(dirname \"$0\")/_/husky.sh\"\n\nnpm run prepush\n</code></pre>"},{"location":"development/contributing/#cicd-configuration","title":"CI/CD Configuration","text":"<pre><code># .github/workflows/ci.yml\nname: CI\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [18.x, 20.x]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${ { matrix.node-version } }\n        cache: 'npm'\n\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Run linter\n      run: npm run lint\n\n    - name: Run tests\n      run: npm run test:coverage\n\n    - name: Upload coverage\n      uses: codecov/codecov-action@v3\n</code></pre>"},{"location":"development/contributing/#additional-resources","title":"Additional Resources","text":""},{"location":"development/contributing/#useful-links","title":"Useful Links","text":"<ul> <li>Docker Documentation</li> <li>TypeScript Handbook</li> <li>Jest Documentation</li> <li>ESLint Rules</li> </ul>"},{"location":"development/contributing/#community","title":"Community","text":"<ul> <li>GitHub Issues: For bugs and feature requests</li> <li>Discussions: For general discussions</li> <li>Discord: For real-time chat</li> <li>Stack Overflow: For technical questions (tag: docker-pilot)</li> </ul>"},{"location":"development/contributing/#mentorship","title":"Mentorship","text":"<p>New contributors are welcome! If you're new to the project:</p> <ol> <li>Start with issues marked as \"good first issue\"</li> <li>Read all documentation</li> <li>Ask questions in discussions</li> <li>Participate in community meetings</li> <li>Ask for help when needed</li> </ol>"},{"location":"development/contributing/#recognition","title":"Recognition","text":"<p>All contributors are recognized in the CONTRIBUTORS.md file and the project credits page. Contributions include:</p> <ul> <li>Code</li> <li>Documentation</li> <li>Tests</li> <li>Reviews</li> <li>Bug reports</li> <li>Feature suggestions</li> <li>Translation</li> <li>Design</li> <li>Community support</li> </ul> <p>Thank you for contributing to Docker Pilot! \ud83d\ude80</p>"},{"location":"development/testing/","title":"Testing Guide","text":"<p>This document describes the testing strategies, tools, and practices used in Docker Pilot.</p>"},{"location":"development/testing/#overview","title":"Overview","text":"<p>Docker Pilot uses a comprehensive testing approach that includes unit, integration, and end-to-end tests. Our philosophy is \"tests as living documentation\" - each test should be clear, expressive, and serve as documentation for expected behavior.</p>"},{"location":"development/testing/#testing-strategy","title":"Testing Strategy","text":""},{"location":"development/testing/#test-pyramid","title":"Test Pyramid","text":"<pre><code>      /\\\n     /  \\  E2E Tests (Few)\n    /____\\\n   /      \\  Integration Tests (Some)\n  /________\\\n /          \\  Unit Tests (Many)\n/____________\\\n</code></pre> <ul> <li>70% Unit Tests: Fast and isolated tests</li> <li>20% Integration Tests: Tests for integrated components</li> <li>10% E2E Tests: Complete scenario tests</li> </ul>"},{"location":"development/testing/#testing-principles","title":"Testing Principles","text":"<ol> <li>F.I.R.S.T</li> <li>Fast: Tests should be fast</li> <li>Independent: Tests should not depend on each other</li> <li>Repeatable: Consistent results in any environment</li> <li>Self-Validating: Clear result (pass or fail)</li> <li> <p>Timely: Written alongside production code</p> </li> <li> <p>AAA Pattern</p> </li> <li>Arrange: Set up data and mocks</li> <li>Act: Execute the operation being tested</li> <li> <p>Assert: Verify the result</p> </li> <li> <p>Test Naming</p> </li> <li>Clearly describe the scenario being tested</li> <li>Use business language when appropriate</li> <li>Format: <code>should_DoSomething_When_Condition</code></li> </ol>"},{"location":"development/testing/#testing-tools","title":"Testing Tools","text":""},{"location":"development/testing/#jest","title":"Jest","text":"<p>Main testing framework.</p> <pre><code>// jest.config.js\nmodule.exports = {\n  preset: 'ts-jest',\n  testEnvironment: 'node',\n  roots: ['&lt;rootDir&gt;/src', '&lt;rootDir&gt;/tests'],\n  testMatch: [\n    '**/__tests__/**/*.ts',\n    '**/?(*.)+(spec|test).ts'\n  ],\n  collectCoverageFrom: [\n    'src/**/*.ts',\n    '!src/**/*.d.ts',\n    '!src/index.ts'\n  ],\n  coverageDirectory: 'coverage',\n  coverageReporters: ['text', 'lcov', 'html'],\n  setupFilesAfterEnv: ['&lt;rootDir&gt;/tests/setup.ts'],\n  globalTeardown: '&lt;rootDir&gt;/tests/teardown.ts'\n};\n</code></pre>"},{"location":"development/testing/#supertest","title":"Supertest","text":"<p>For API testing (future).</p>"},{"location":"development/testing/#docker-test-environment","title":"Docker Test Environment","text":"<p>Docker environment for integration tests.</p> <pre><code># docker-compose.test.yml\nversion: '3.8'\nservices:\n  test-registry:\n    image: registry:2\n    ports:\n      - \"5000:5000\"\n\n  test-db:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: testdb\n      POSTGRES_USER: test\n      POSTGRES_PASSWORD: test\n    ports:\n      - \"5432:5432\"\n</code></pre>"},{"location":"development/testing/#test-types","title":"Test Types","text":""},{"location":"development/testing/#1-unit-tests","title":"1. Unit Tests","text":"<p>Test isolated units of code (classes, functions).</p> <pre><code>// tests/unit/utils/ValidationUtils.test.ts\ndescribe('ValidationUtils', () =&gt; {\n  describe('isValidContainerName', () =&gt; {\n    it('should return true for valid container name', () =&gt; {\n      // Arrange\n      const validName = 'my-app-container';\n\n      // Act\n      const result = ValidationUtils.isValidContainerName(validName);\n\n      // Assert\n      expect(result).toBe(true);\n    });\n\n    it('should return false for name with invalid characters', () =&gt; {\n      // Arrange\n      const invalidName = 'my_app@container!';\n\n      // Act\n      const result = ValidationUtils.isValidContainerName(invalidName);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n\n    it('should return false for empty name', () =&gt; {\n      // Arrange\n      const emptyName = '';\n\n      // Act\n      const result = ValidationUtils.isValidContainerName(emptyName);\n\n      // Assert\n      expect(result).toBe(false);\n    });\n  });\n\n  describe('isValidImageTag', () =&gt; {\n    test.each([\n      ['latest', true],\n      ['v1.0.0', true],\n      ['1.2.3-alpine', true],\n      ['', false],\n      ['INVALID@TAG', false]\n    ])('should validate \"%s\" as %s', (tag, expected) =&gt; {\n      expect(ValidationUtils.isValidImageTag(tag)).toBe(expected);\n    });\n  });\n});\n</code></pre>"},{"location":"development/testing/#2-integration-tests","title":"2. Integration Tests","text":"<p>Test interaction between components.</p> <pre><code>// tests/integration/docker/ContainerManager.test.ts\ndescribe('ContainerManager Integration', () =&gt; {\n  let containerManager: ContainerManager;\n  let dockerClient: DockerClient;\n  let testContainers: string[] = [];\n\n  beforeAll(async () =&gt; {\n    dockerClient = new DockerClient();\n    containerManager = new ContainerManager(dockerClient);\n\n    // Check if Docker is available\n    const isRunning = await DockerUtils.isDockerRunning();\n    if (!isRunning) {\n      throw new Error('Docker is not running - skip integration tests');\n    }\n  });\n\n  afterAll(async () =&gt; {\n    // Cleanup: remove test containers\n    for (const containerId of testContainers) {\n      try {\n        await dockerClient.removeContainer(containerId, { force: true });\n      } catch (error) {\n        // Ignore cleanup errors\n      }\n    }\n  });\n\n  beforeEach(async () =&gt; {\n    // Ensure we have a test image\n    await dockerClient.pullImage('alpine:latest');\n  });\n\n  describe('createContainer', () =&gt; {\n    it('should create container successfully', async () =&gt; {\n      // Arrange\n      const containerName = `test-container-${Date.now()}`;\n      const options = {\n        image: 'alpine:latest',\n        name: containerName,\n        command: ['sleep', '60']\n      };\n\n      // Act\n      const container = await containerManager.createContainer(options);\n      testContainers.push(container.id);\n\n      // Assert\n      expect(container).toBeDefined();\n      expect(container.name).toBe(containerName);\n      expect(container.image).toBe('alpine:latest');\n    });\n\n    it('should throw error for duplicate container name', async () =&gt; {\n      // Arrange\n      const containerName = `duplicate-container-${Date.now()}`;\n      const options = {\n        image: 'alpine:latest',\n        name: containerName,\n        command: ['sleep', '60']\n      };\n\n      // Create first container\n      const container1 = await containerManager.createContainer(options);\n      testContainers.push(container1.id);\n\n      // Act &amp; Assert\n      await expect(\n        containerManager.createContainer(options)\n      ).rejects.toThrow('Container with this name already exists');\n    });\n  });\n\n  describe('startContainer', () =&gt; {\n    it('should start container successfully', async () =&gt; {\n      // Arrange\n      const containerName = `start-test-${Date.now()}`;\n      const options = {\n        image: 'alpine:latest',\n        name: containerName,\n        command: ['sleep', '60']\n      };\n\n      const container = await containerManager.createContainer(options);\n      testContainers.push(container.id);\n\n      // Act\n      await containerManager.startContainer(container.id);\n\n      // Assert\n      const updatedContainer = await dockerClient.inspectContainer(container.id);\n      expect(updatedContainer.state.running).toBe(true);\n    });\n  });\n\n  describe('stopContainer', () =&gt; {\n    it('should stop running container', async () =&gt; {\n      // Arrange\n      const containerName = `stop-test-${Date.now()}`;\n      const options = {\n        image: 'alpine:latest',\n        name: containerName,\n        command: ['sleep', '60']\n      };\n\n      const container = await containerManager.createContainer(options);\n      testContainers.push(container.id);\n      await containerManager.startContainer(container.id);\n\n      // Act\n      await containerManager.stopContainer(container.id);\n\n      // Assert\n      const updatedContainer = await dockerClient.inspectContainer(container.id);\n      expect(updatedContainer.state.running).toBe(false);\n    });\n  });\n});\n</code></pre>"},{"location":"development/testing/#3-end-to-end-tests","title":"3. End-to-End Tests","text":"<p>Test complete user scenarios.</p> <pre><code>// tests/e2e/cli/container-lifecycle.test.ts\ndescribe('Container Lifecycle E2E', () =&gt; {\n  const testContainerName = `e2e-test-${Date.now()}`;\n\n  afterAll(async () =&gt; {\n    // Cleanup\n    try {\n      execSync(`docker rm -f ${testContainerName}`, { stdio: 'ignore' });\n    } catch (error) {\n      // Ignore cleanup errors\n    }\n  });\n\n  it('should complete full container lifecycle via CLI', async () =&gt; {\n    // Create container\n    const createOutput = execSync(\n      `docker-pilot create ${testContainerName} --image nginx:alpine`,\n      { encoding: 'utf8' }\n    );\n    expect(createOutput).toContain(`Container ${testContainerName} created`);\n\n    // Start container\n    const startOutput = execSync(\n      `docker-pilot start ${testContainerName}`,\n      { encoding: 'utf8' }\n    );\n    expect(startOutput).toContain(`Container ${testContainerName} started`);\n\n    // List containers (should show running)\n    const listOutput = execSync('docker-pilot list containers', {\n      encoding: 'utf8'\n    });\n    expect(listOutput).toContain(testContainerName);\n    expect(listOutput).toContain('running');\n\n    // Stop container\n    const stopOutput = execSync(\n      `docker-pilot stop ${testContainerName}`,\n      { encoding: 'utf8' }\n    );\n    expect(stopOutput).toContain(`Container ${testContainerName} stopped`);\n\n    // Remove container\n    const removeOutput = execSync(\n      `docker-pilot remove ${testContainerName}`,\n      { encoding: 'utf8' }\n    );\n    expect(removeOutput).toContain(`Container ${testContainerName} removed`);\n  });\n\n  it('should handle interactive menu navigation', async () =&gt; {\n    // This would require more complex testing with input simulation\n    // For now, we'll test the basic menu display\n    const menuOutput = execSync('docker-pilot menu --help', {\n      encoding: 'utf8'\n    });\n    expect(menuOutput).toContain('Interactive menu');\n  });\n});\n</code></pre>"},{"location":"development/testing/#test-environment-setup","title":"Test Environment Setup","text":""},{"location":"development/testing/#test-configuration","title":"Test Configuration","text":"<pre><code>// tests/setup.ts\nimport { DockerClient } from '../src/core/DockerClient';\nimport { Logger } from '../src/utils/Logger';\n\n// Global test configuration\nbeforeAll(async () =&gt; {\n  // Set test environment\n  process.env.NODE_ENV = 'test';\n  process.env.DOCKER_PILOT_LOG_LEVEL = 'error';\n\n  // Verify Docker is available\n  const dockerClient = new DockerClient();\n  const isRunning = await dockerClient.ping().catch(() =&gt; false);\n\n  if (!isRunning) {\n    throw new Error('Docker is not available for testing');\n  }\n\n  // Pull required test images\n  await dockerClient.pullImage('alpine:latest');\n  await dockerClient.pullImage('nginx:alpine');\n});\n\n// Global test teardown\nafterAll(async () =&gt; {\n  // Cleanup any remaining test containers\n  const dockerClient = new DockerClient();\n  const containers = await dockerClient.listContainers({ all: true });\n\n  const testContainers = containers.filter(c =&gt;\n    c.names.some(name =&gt; name.includes('test-') || name.includes('e2e-'))\n  );\n\n  for (const container of testContainers) {\n    try {\n      await dockerClient.removeContainer(container.id, { force: true });\n    } catch (error) {\n      // Ignore errors\n    }\n  }\n});\n</code></pre>"},{"location":"development/testing/#test-helpers","title":"Test Helpers","text":"<pre><code>// tests/helpers/TestHelpers.ts\nexport class TestHelpers {\n  /**\n   * Creates a unique test container name\n   */\n  static generateContainerName(prefix: string = 'test'): string {\n    return `${prefix}-container-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  /**\n   * Waits for a condition to be true\n   */\n  static async waitFor(\n    condition: () =&gt; Promise&lt;boolean&gt;,\n    timeout: number = 5000,\n    interval: number = 100\n  ): Promise&lt;void&gt; {\n    const startTime = Date.now();\n\n    while (Date.now() - startTime &lt; timeout) {\n      if (await condition()) {\n        return;\n      }\n      await this.sleep(interval);\n    }\n\n    throw new Error(`Condition not met within ${timeout}ms`);\n  }\n\n  /**\n   * Sleep for specified milliseconds\n   */\n  static sleep(ms: number): Promise&lt;void&gt; {\n    return new Promise(resolve =&gt; setTimeout(resolve, ms));\n  }\n\n  /**\n   * Creates a test Docker network\n   */\n  static async createTestNetwork(dockerClient: DockerClient): Promise&lt;string&gt; {\n    const networkName = this.generateContainerName('test-network');\n    await dockerClient.createNetwork(networkName);\n    return networkName;\n  }\n\n  /**\n   * Cleans up test resources\n   */\n  static async cleanup(dockerClient: DockerClient, resources: {\n    containers?: string[];\n    networks?: string[];\n    volumes?: string[];\n  }): Promise&lt;void&gt; {\n    // Remove containers\n    if (resources.containers) {\n      for (const containerId of resources.containers) {\n        try {\n          await dockerClient.removeContainer(containerId, { force: true });\n        } catch (error) {\n          // Ignore errors\n        }\n      }\n    }\n\n    // Remove networks\n    if (resources.networks) {\n      for (const networkId of resources.networks) {\n        try {\n          await dockerClient.removeNetwork(networkId);\n        } catch (error) {\n          // Ignore errors\n        }\n      }\n    }\n\n    // Remove volumes\n    if (resources.volumes) {\n      for (const volumeId of resources.volumes) {\n        try {\n          await dockerClient.removeVolume(volumeId);\n        } catch (error) {\n          // Ignore errors\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"development/testing/#mocking-strategies","title":"Mocking Strategies","text":""},{"location":"development/testing/#docker-client-mocking","title":"Docker Client Mocking","text":"<pre><code>// tests/mocks/DockerClientMock.ts\nexport class DockerClientMock {\n  private containers: Map&lt;string, any&gt; = new Map();\n  private images: Map&lt;string, any&gt; = new Map();\n\n  // Mock container methods\n  async listContainers(options?: any): Promise&lt;any[]&gt; {\n    return Array.from(this.containers.values());\n  }\n\n  async createContainer(options: any): Promise&lt;any&gt; {\n    const container = {\n      id: `mock-${Date.now()}`,\n      name: options.name,\n      image: options.image,\n      state: { running: false },\n      created: new Date().toISOString()\n    };\n\n    this.containers.set(container.id, container);\n    return container;\n  }\n\n  async startContainer(id: string): Promise&lt;void&gt; {\n    const container = this.containers.get(id);\n    if (!container) {\n      throw new Error('Container not found');\n    }\n    container.state.running = true;\n  }\n\n  async stopContainer(id: string): Promise&lt;void&gt; {\n    const container = this.containers.get(id);\n    if (!container) {\n      throw new Error('Container not found');\n    }\n    container.state.running = false;\n  }\n\n  async removeContainer(id: string, options?: any): Promise&lt;void&gt; {\n    this.containers.delete(id);\n  }\n\n  async inspectContainer(id: string): Promise&lt;any&gt; {\n    const container = this.containers.get(id);\n    if (!container) {\n      throw new Error('Container not found');\n    }\n    return container;\n  }\n\n  // Mock image methods\n  async listImages(): Promise&lt;any[]&gt; {\n    return Array.from(this.images.values());\n  }\n\n  async pullImage(name: string): Promise&lt;void&gt; {\n    const image = {\n      id: `mock-image-${Date.now()}`,\n      repoTags: [name],\n      created: new Date().toISOString()\n    };\n    this.images.set(name, image);\n  }\n\n  // Utility methods for testing\n  reset(): void {\n    this.containers.clear();\n    this.images.clear();\n  }\n\n  addMockContainer(container: any): void {\n    this.containers.set(container.id, container);\n  }\n\n  addMockImage(image: any): void {\n    this.images.set(image.repoTags[0], image);\n  }\n}\n</code></pre>"},{"location":"development/testing/#performance-testing","title":"Performance Testing","text":""},{"location":"development/testing/#load-testing","title":"Load Testing","text":"<pre><code>// tests/performance/container-operations.test.ts\ndescribe('Container Operations Performance', () =&gt; {\n  let dockerClient: DockerClient;\n  let containerManager: ContainerManager;\n\n  beforeAll(async () =&gt; {\n    dockerClient = new DockerClient();\n    containerManager = new ContainerManager(dockerClient);\n  });\n\n  it('should handle multiple container creations efficiently', async () =&gt; {\n    const containerCount = 10;\n    const startTime = Date.now();\n    const containers: string[] = [];\n\n    try {\n      // Create multiple containers concurrently\n      const createPromises = Array.from({ length: containerCount }, (_, i) =&gt;\n        containerManager.createContainer({\n          image: 'alpine:latest',\n          name: `perf-test-${i}-${Date.now()}`,\n          command: ['sleep', '5']\n        })\n      );\n\n      const createdContainers = await Promise.all(createPromises);\n      containers.push(...createdContainers.map(c =&gt; c.id));\n\n      const endTime = Date.now();\n      const duration = endTime - startTime;\n\n      // Should complete within reasonable time (adjust based on your requirements)\n      expect(duration).toBeLessThan(5000); // 5 seconds\n      expect(createdContainers).toHaveLength(containerCount);\n\n      console.log(`Created ${containerCount} containers in ${duration}ms`);\n    } finally {\n      // Cleanup\n      await Promise.all(\n        containers.map(id =&gt;\n          dockerClient.removeContainer(id, { force: true }).catch(() =&gt; {})\n        )\n      );\n    }\n  });\n\n  it('should handle container listing efficiently', async () =&gt; {\n    const startTime = Date.now();\n\n    // List containers multiple times\n    const listPromises = Array.from({ length: 5 }, () =&gt;\n      containerManager.listContainers()\n    );\n\n    const results = await Promise.all(listPromises);\n    const endTime = Date.now();\n    const duration = endTime - startTime;\n\n    expect(duration).toBeLessThan(2000); // 2 seconds\n    expect(results).toHaveLength(5);\n\n    console.log(`Listed containers 5 times in ${duration}ms`);\n  });\n});\n</code></pre>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":""},{"location":"development/testing/#coverage-configuration","title":"Coverage Configuration","text":"<pre><code>// jest.config.js (coverage section)\nmodule.exports = {\n  // ... other config\n  collectCoverageFrom: [\n    'src/**/*.ts',\n    '!src/**/*.d.ts',\n    '!src/index.ts',\n    '!src/**/__tests__/**',\n    '!src/**/test/**'\n  ],\n  coverageThreshold: {\n    global: {\n      branches: 80,\n      functions: 80,\n      lines: 80,\n      statements: 80\n    },\n    './src/core/': {\n      branches: 90,\n      functions: 90,\n      lines: 90,\n      statements: 90\n    }\n  },\n  coverageReporters: [\n    'text',\n    'text-summary',\n    'html',\n    'lcov',\n    'json'\n  ]\n};\n</code></pre>"},{"location":"development/testing/#coverage-analysis","title":"Coverage Analysis","text":"<pre><code># Generate coverage report\nnpm run test:coverage\n\n# View HTML coverage report\nopen coverage/index.html\n\n# Check coverage thresholds\nnpm run test:coverage:check\n</code></pre>"},{"location":"development/testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"development/testing/#github-actions","title":"GitHub Actions","text":"<pre><code># .github/workflows/test.yml\nname: Tests\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [18.x, 20.x]\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: ${ { matrix.node-version } }\n        cache: 'npm'\n\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Run linter\n      run: npm run lint\n\n    - name: Run unit tests\n      run: npm run test:unit\n\n    - name: Run integration tests\n      run: npm run test:integration\n\n    - name: Run E2E tests\n      run: npm run test:e2e\n\n    - name: Generate coverage report\n      run: npm run test:coverage\n\n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage/lcov.info\n        flags: unittests\n        name: codecov-umbrella\n\n  docker-tests:\n    runs-on: ubuntu-latest\n\n    services:\n      docker:\n        image: docker:dind\n        options: --privileged\n\n    steps:\n    - uses: actions/checkout@v3\n\n    - name: Setup Node.js\n      uses: actions/setup-node@v3\n      with:\n        node-version: 18.x\n        cache: 'npm'\n\n    - name: Install dependencies\n      run: npm ci\n\n    - name: Wait for Docker\n      run: |\n        timeout 60 sh -c 'until docker info; do sleep 1; done'\n\n    - name: Run Docker integration tests\n      run: npm run test:docker\n</code></pre>"},{"location":"development/testing/#testing-best-practices","title":"Testing Best Practices","text":""},{"location":"development/testing/#1-test-organization","title":"1. Test Organization","text":"<pre><code>tests/\n\u251c\u2500\u2500 unit/                    # Unit tests mirror src structure\n\u2502   \u251c\u2500\u2500 core/\n\u2502   \u2502   \u251c\u2500\u2500 DockerPilot.test.ts\n\u2502   \u2502   \u2514\u2500\u2500 CommandRunner.test.ts\n\u2502   \u251c\u2500\u2500 utils/\n\u2502   \u2502   \u251c\u2500\u2500 Logger.test.ts\n\u2502   \u2502   \u2514\u2500\u2500 ValidationUtils.test.ts\n\u2502   \u2514\u2500\u2500 commands/\n\u2502       \u251c\u2500\u2500 container/\n\u2502       \u2514\u2500\u2500 image/\n\u251c\u2500\u2500 integration/             # Integration tests by feature\n\u2502   \u251c\u2500\u2500 docker/\n\u2502   \u2502   \u251c\u2500\u2500 container-management.test.ts\n\u2502   \u2502   \u2514\u2500\u2500 image-management.test.ts\n\u2502   \u2514\u2500\u2500 cli/\n\u2502       \u2514\u2500\u2500 command-parsing.test.ts\n\u251c\u2500\u2500 e2e/                     # End-to-end scenarios\n\u2502   \u251c\u2500\u2500 scenarios/\n\u2502   \u2502   \u251c\u2500\u2500 basic-workflow.test.ts\n\u2502   \u2502   \u2514\u2500\u2500 error-handling.test.ts\n\u2502   \u2514\u2500\u2500 cli/\n\u2502       \u2514\u2500\u2500 interactive-menu.test.ts\n\u251c\u2500\u2500 fixtures/                # Test data\n\u2502   \u251c\u2500\u2500 containers.json\n\u2502   \u251c\u2500\u2500 images.json\n\u2502   \u2514\u2500\u2500 docker-compose/\n\u2502       \u2514\u2500\u2500 test-stack.yml\n\u2514\u2500\u2500 helpers/                 # Test utilities\n    \u251c\u2500\u2500 TestHelpers.ts\n    \u251c\u2500\u2500 DockerMock.ts\n    \u2514\u2500\u2500 setup.ts\n</code></pre>"},{"location":"development/testing/#2-test-data-management","title":"2. Test Data Management","text":"<pre><code>// tests/fixtures/TestData.ts\nexport const TestData = {\n  containers: {\n    running: {\n      id: 'test-container-1',\n      name: 'test-app',\n      image: 'nginx:latest',\n      status: 'running',\n      ports: [{ private: 80, public: 8080 }]\n    },\n    stopped: {\n      id: 'test-container-2',\n      name: 'test-db',\n      image: 'postgres:13',\n      status: 'exited',\n      ports: []\n    }\n  },\n  images: {\n    nginx: {\n      id: 'nginx-image-id',\n      repoTags: ['nginx:latest', 'nginx:1.21'],\n      size: 133000000\n    },\n    alpine: {\n      id: 'alpine-image-id',\n      repoTags: ['alpine:latest', 'alpine:3.14'],\n      size: 5600000\n    }\n  },\n  configs: {\n    default: {\n      logLevel: 'info',\n      dockerHost: 'unix:///var/run/docker.sock',\n      timeout: 30000\n    },\n    debug: {\n      logLevel: 'debug',\n      dockerHost: 'unix:///var/run/docker.sock',\n      timeout: 60000\n    }\n  }\n};\n\n// Usage in tests\nimport { TestData } from '../fixtures/TestData';\n\ndescribe('ContainerManager', () =&gt; {\n  it('should handle running container', () =&gt; {\n    const container = TestData.containers.running;\n    // ... test logic\n  });\n});\n</code></pre>"},{"location":"development/testing/#3-async-testing-patterns","title":"3. Async Testing Patterns","text":"<pre><code>// Good async testing patterns\ndescribe('Async Operations', () =&gt; {\n  it('should handle promise resolution', async () =&gt; {\n    // Use async/await\n    const result = await someAsyncOperation();\n    expect(result).toBeDefined();\n  });\n\n  it('should handle promise rejection', async () =&gt; {\n    // Test error handling\n    await expect(failingAsyncOperation()).rejects.toThrow('Expected error');\n  });\n\n  it('should handle timeout', async () =&gt; {\n    // Test with timeout\n    const promise = longRunningOperation();\n    await expect(promise).resolves.toBeDefined();\n  }, 10000); // 10 second timeout\n\n  it('should handle concurrent operations', async () =&gt; {\n    // Test parallel operations\n    const promises = [\n      operation1(),\n      operation2(),\n      operation3()\n    ];\n\n    const results = await Promise.all(promises);\n    expect(results).toHaveLength(3);\n  });\n});\n</code></pre>"},{"location":"development/testing/#4-error-testing","title":"4. Error Testing","text":"<pre><code>describe('Error Handling', () =&gt; {\n  it('should handle Docker daemon not running', async () =&gt; {\n    // Mock Docker unavailable\n    const mockClient = new DockerClientMock();\n    jest.spyOn(mockClient, 'listContainers')\n      .mockRejectedValue(new Error('Docker daemon not running'));\n\n    const containerManager = new ContainerManager(mockClient as any);\n\n    await expect(containerManager.listContainers())\n      .rejects.toThrow('Docker daemon not running');\n  });\n\n  it('should handle network timeouts', async () =&gt; {\n    const mockClient = new DockerClientMock();\n    jest.spyOn(mockClient, 'pullImage')\n      .mockRejectedValue(new Error('Request timeout'));\n\n    const containerManager = new ContainerManager(mockClient as any);\n\n    await expect(containerManager.pullImage('nginx:latest'))\n      .rejects.toThrow('Request timeout');\n  });\n\n  it('should handle invalid input gracefully', () =&gt; {\n    expect(() =&gt; ValidationUtils.isValidContainerName(''))\n      .not.toThrow();\n\n    expect(ValidationUtils.isValidContainerName('')).toBe(false);\n  });\n});\n</code></pre>"},{"location":"development/testing/#5-test-maintenance","title":"5. Test Maintenance","text":"<pre><code>// Keep tests DRY with shared setup\ndescribe('ContainerManager', () =&gt; {\n  let containerManager: ContainerManager;\n  let mockClient: DockerClientMock;\n\n  beforeEach(() =&gt; {\n    mockClient = new DockerClientMock();\n    containerManager = new ContainerManager(mockClient);\n  });\n\n  // Helper method for common test setup\n  const createTestContainer = async (name: string = 'test-container') =&gt; {\n    const options = {\n      image: 'nginx:latest',\n      name,\n      command: ['nginx', '-g', 'daemon off;']\n    };\n    return await containerManager.createContainer(options);\n  };\n\n  describe('createContainer', () =&gt; {\n    it('should create container with default options', async () =&gt; {\n      const container = await createTestContainer();\n      expect(container.name).toBe('test-container');\n    });\n\n    it('should create container with custom name', async () =&gt; {\n      const container = await createTestContainer('custom-name');\n      expect(container.name).toBe('custom-name');\n    });\n  });\n});\n</code></pre>"},{"location":"development/testing/#debugging-tests","title":"Debugging Tests","text":""},{"location":"development/testing/#vs-code-configuration","title":"VS Code Configuration","text":"<pre><code>// .vscode/launch.json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Jest Tests\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/node_modules/.bin/jest\",\n      \"args\": [\n        \"--runInBand\",\n        \"--no-cache\",\n        \"--testPathPattern=${fileBasenameNoExtension}\"\n      ],\n      \"cwd\": \"${workspaceFolder}\",\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    },\n    {\n      \"name\": \"Debug Current Test File\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"program\": \"${workspaceFolder}/node_modules/.bin/jest\",\n      \"args\": [\n        \"--runInBand\",\n        \"--no-cache\",\n        \"${file}\"\n      ],\n      \"cwd\": \"${workspaceFolder}\",\n      \"console\": \"integratedTerminal\",\n      \"internalConsoleOptions\": \"neverOpen\"\n    }\n  ]\n}\n</code></pre>"},{"location":"development/testing/#test-debugging-tips","title":"Test Debugging Tips","text":"<pre><code>// Add debug information to tests\ndescribe('Debug Example', () =&gt; {\n  it('should debug container creation', async () =&gt; {\n    console.log('Starting container creation test');\n\n    const container = await containerManager.createContainer({\n      image: 'nginx:latest',\n      name: 'debug-container'\n    });\n\n    console.log('Created container:', JSON.stringify(container, null, 2));\n\n    expect(container).toBeDefined();\n  });\n\n  // Use Jest's debug mode\n  it.only('should run only this test', () =&gt; {\n    // This test will run in isolation\n  });\n\n  // Skip tests during debugging\n  it.skip('should skip this test', () =&gt; {\n    // This test will be skipped\n  });\n});\n</code></pre>"},{"location":"development/testing/#test-documentation","title":"Test Documentation","text":""},{"location":"development/testing/#test-plans","title":"Test Plans","text":"<p>Each major feature should have a test plan documenting:</p> <ol> <li>Test Scope: What is being tested</li> <li>Test Cases: Specific scenarios</li> <li>Expected Results: What should happen</li> <li>Prerequisites: Setup requirements</li> <li>Test Data: Required test data</li> </ol>"},{"location":"development/testing/#example-test-plan","title":"Example Test Plan","text":"<pre><code># Container Management Test Plan\n\n## Scope\nTesting container creation, starting, stopping, and removal operations.\n\n## Test Cases\n\n### TC01: Create Container\n- **Description**: Create a new container with valid parameters\n- **Prerequisites**: Docker daemon running, valid image available\n- **Test Data**: Image: nginx:latest, Name: test-container\n- **Expected Result**: Container created successfully with correct properties\n\n### TC02: Start Container\n- **Description**: Start an existing stopped container\n- **Prerequisites**: Container exists and is stopped\n- **Test Data**: Container ID from TC01\n- **Expected Result**: Container status changes to \"running\"\n\n### TC03: Stop Container\n- **Description**: Stop a running container\n- **Prerequisites**: Container exists and is running\n- **Test Data**: Container ID from TC01\n- **Expected Result**: Container status changes to \"stopped\"\n\n### TC04: Remove Container\n- **Description**: Remove a stopped container\n- **Prerequisites**: Container exists and is stopped\n- **Test Data**: Container ID from TC01\n- **Expected Result**: Container is removed from system\n</code></pre> <p>This comprehensive testing guide ensures Docker Pilot maintains high quality and reliability through systematic testing practices.</p>"},{"location":"examples/advanced/","title":"Advanced Examples","text":"<p>This section presents more complex examples and advanced use cases of Docker Pilot.</p>"},{"location":"examples/advanced/#microservices-with-docker-pilot","title":"Microservices with Docker Pilot","text":""},{"location":"examples/advanced/#microservices-architecture","title":"Microservices Architecture","text":"<pre><code># docker-pilot.yml\nversion: \"1.0\"\n\nproject:\n  name: \"ecommerce-microservices\"\n  description: \"E-commerce system with microservices architecture\"\n\nservices:\n  # API Gateway\n  gateway:\n    build: ./gateway\n    ports:\n      - \"80:3000\"\n    environment:\n      - NODE_ENV=production\n    depends_on:\n      - auth-service\n      - product-service\n      - order-service\n    networks:\n      - frontend\n      - backend\n\n  # Authentication Service\n  auth-service:\n    build: ./services/auth\n    environment:\n      - DB_HOST=auth-db\n      - REDIS_URL=redis://auth-cache:6379\n    depends_on:\n      - auth-db\n      - auth-cache\n    networks:\n      - backend\n    deploy:\n      replicas: 2\n\n  # Auth service database\n  auth-db:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=auth\n      - POSTGRES_USER=auth_user\n      - POSTGRES_PASSWORD=${AUTH_DB_PASSWORD}\n    volumes:\n      - auth_data:/var/lib/postgresql/data\n    networks:\n      - backend\n\n  # Cache do servi\u00e7o de auth\n  auth-cache:\n    image: redis:alpine\n    networks:\n      - backend\n\n  # Servi\u00e7o de Produtos\n  product-service:\n    build: ./services/products\n    environment:\n      - DB_HOST=product-db\n      - ELASTIC_URL=http://elasticsearch:9200\n    depends_on:\n      - product-db\n      - elasticsearch\n    networks:\n      - backend\n    deploy:\n      replicas: 3\n\n  # Banco do servi\u00e7o de produtos\n  product-db:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=products\n      - POSTGRES_USER=product_user\n      - POSTGRES_PASSWORD=${PRODUCT_DB_PASSWORD}\n    volumes:\n      - product_data:/var/lib/postgresql/data\n    networks:\n      - backend\n\n  # Servi\u00e7o de Pedidos\n  order-service:\n    build: ./services/orders\n    environment:\n      - DB_HOST=order-db\n      - RABBITMQ_URL=amqp://rabbitmq:5672\n    depends_on:\n      - order-db\n      - rabbitmq\n    networks:\n      - backend\n    deploy:\n      replicas: 2\n\n  # Banco do servi\u00e7o de pedidos\n  order-db:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=orders\n      - POSTGRES_USER=order_user\n      - POSTGRES_PASSWORD=${ORDER_DB_PASSWORD}\n    volumes:\n      - order_data:/var/lib/postgresql/data\n    networks:\n      - backend\n\n  # Message Broker\n  rabbitmq:\n    image: rabbitmq:3-management\n    environment:\n      - RABBITMQ_DEFAULT_USER=admin\n      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}\n    ports:\n      - \"15672:15672\"  # Management UI\n    networks:\n      - backend\n\n  # Search Engine\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0\n    environment:\n      - discovery.type=single-node\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    volumes:\n      - elastic_data:/usr/share/elasticsearch/data\n    networks:\n      - backend\n\n  # Monitoramento\n  prometheus:\n    image: prom/prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    networks:\n      - backend\n\n  grafana:\n    image: grafana/grafana\n    ports:\n      - \"3000:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}\n    volumes:\n      - grafana_data:/var/lib/grafana\n    networks:\n      - backend\n\nvolumes:\n  auth_data:\n  product_data:\n  order_data:\n  elastic_data:\n  prometheus_data:\n  grafana_data:\n\nnetworks:\n  frontend:\n    driver: bridge\n  backend:\n    driver: bridge\n\n# Workflows para microservi\u00e7os\nworkflows:\n  full-deploy:\n    description: \"Deploy completo de todos os microservi\u00e7os\"\n    steps:\n      - name: \"Build all services\"\n        commands:\n          - \"docker-pilot build --parallel\"\n\n      - name: \"Start infrastructure\"\n        commands:\n          - \"docker-pilot start auth-db product-db order-db\"\n          - \"docker-pilot start rabbitmq elasticsearch redis\"\n          - \"sleep 30\"\n\n      - name: \"Run migrations\"\n        commands:\n          - \"docker-pilot exec auth-service npm run migrate\"\n          - \"docker-pilot exec product-service npm run migrate\"\n          - \"docker-pilot exec order-service npm run migrate\"\n\n      - name: \"Start services\"\n        commands:\n          - \"docker-pilot start auth-service product-service order-service\"\n          - \"sleep 15\"\n\n      - name: \"Start gateway\"\n        commands:\n          - \"docker-pilot start gateway\"\n\n      - name: \"Health checks\"\n        commands:\n          - \"docker-pilot health --all\"\n\n  dev-setup:\n    description: \"Setup ambiente de desenvolvimento\"\n    steps:\n      - name: \"Install dependencies\"\n        commands:\n          - \"npm install\"\n          - \"cd services/auth &amp;&amp; npm install\"\n          - \"cd services/products &amp;&amp; npm install\"\n          - \"cd services/orders &amp;&amp; npm install\"\n\n      - name: \"Start dev environment\"\n        commands:\n          - \"docker-pilot start auth-db product-db order-db --detach\"\n          - \"sleep 10\"\n          - \"docker-pilot run migrate-all\"\n          - \"docker-pilot start auth-service product-service order-service\"\n\n# Comandos personalizados\ncustom_commands:\n  migrate-all:\n    description: \"Executar migra\u00e7\u00f5es de todos os servi\u00e7os\"\n    parallel:\n      - name: \"Auth migrations\"\n        command: \"docker-pilot exec auth-service npm run migrate\"\n      - name: \"Product migrations\"\n        command: \"docker-pilot exec product-service npm run migrate\"\n      - name: \"Order migrations\"\n        command: \"docker-pilot exec order-service npm run migrate\"\n\n  seed-data:\n    description: \"Popular dados de teste\"\n    steps:\n      - \"docker-pilot exec auth-service npm run seed\"\n      - \"docker-pilot exec product-service npm run seed\"\n      - \"docker-pilot exec order-service npm run seed\"\n\n  load-test:\n    description: \"Executar testes de carga\"\n    script: |\n      echo \"Iniciando testes de carga...\"\n\n      # Teste de autentica\u00e7\u00e3o\n      ab -n 1000 -c 10 http://localhost/auth/login\n\n      # Teste de listagem de produtos\n      ab -n 2000 -c 20 http://localhost/products\n\n      # Teste de cria\u00e7\u00e3o de pedidos\n      ab -n 500 -c 5 -p order.json -T application/json http://localhost/orders\n\n# Monitoramento\nmonitoring:\n  enabled: true\n  dashboard:\n    port: 8080\n\n  metrics:\n    - cpu_usage\n    - memory_usage\n    - request_count\n    - response_time\n\n  alerts:\n    - name: \"high_cpu\"\n      condition: \"cpu_usage &gt; 80\"\n      actions: [\"email\", \"slack\"]\n\n    - name: \"service_down\"\n      condition: \"service_status == 'stopped'\"\n      actions: [\"restart_service\", \"pagerduty\"]\n</code></pre>"},{"location":"examples/advanced/#configuracao-de-desenvolvimento","title":"Configura\u00e7\u00e3o de Desenvolvimento","text":"<pre><code># docker-pilot.dev.yml\nextends:\n  file: docker-pilot.yml\n\nservices:\n  # Override para desenvolvimento\n  auth-service:\n    volumes:\n      - ./services/auth:/app\n      - /app/node_modules\n    command: npm run dev\n    environment:\n      - NODE_ENV=development\n      - DEBUG=*\n\n  product-service:\n    volumes:\n      - ./services/products:/app\n      - /app/node_modules\n    command: npm run dev\n    environment:\n      - NODE_ENV=development\n      - DEBUG=*\n\n  order-service:\n    volumes:\n      - ./services/orders:/app\n      - /app/node_modules\n    command: npm run dev\n    environment:\n      - NODE_ENV=development\n      - DEBUG=*\n\n# Automa\u00e7\u00e3o espec\u00edfica para dev\nautomation:\n  file_watchers:\n    - pattern: \"./services/auth/src/**/*.js\"\n      command: \"docker-pilot restart auth-service\"\n      debounce: 2000\n\n    - pattern: \"./services/products/src/**/*.js\"\n      command: \"docker-pilot restart product-service\"\n      debounce: 2000\n\n    - pattern: \"./services/orders/src/**/*.js\"\n      command: \"docker-pilot restart order-service\"\n      debounce: 2000\n</code></pre>"},{"location":"examples/advanced/#aplicacao-full-stack","title":"Aplica\u00e7\u00e3o Full-Stack","text":""},{"location":"examples/advanced/#stack-meanmern","title":"Stack MEAN/MERN","text":"<pre><code># docker-pilot.yml\nversion: \"1.0\"\n\nproject:\n  name: \"fullstack-app\"\n  description: \"Aplica\u00e7\u00e3o full-stack com React, Node.js, MongoDB\"\n\nservices:\n  # Frontend React\n  frontend:\n    build:\n      context: ./frontend\n      dockerfile: Dockerfile.prod\n    ports:\n      - \"3000:80\"\n    environment:\n      - REACT_APP_API_URL=http://localhost:3001\n      - REACT_APP_WS_URL=ws://localhost:3001\n    depends_on:\n      - backend\n    networks:\n      - frontend\n\n  # Backend Node.js\n  backend:\n    build: ./backend\n    ports:\n      - \"3001:3000\"\n    environment:\n      - NODE_ENV=production\n      - MONGODB_URL=mongodb://mongodb:27017/myapp\n      - REDIS_URL=redis://redis:6379\n      - JWT_SECRET=${JWT_SECRET}\n    depends_on:\n      - mongodb\n      - redis\n    networks:\n      - frontend\n      - backend\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  # Banco MongoDB\n  mongodb:\n    image: mongo:5\n    environment:\n      - MONGO_INITDB_ROOT_USERNAME=admin\n      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}\n      - MONGO_INITDB_DATABASE=myapp\n    volumes:\n      - mongo_data:/data/db\n      - ./mongo-init:/docker-entrypoint-initdb.d\n    networks:\n      - backend\n\n  # Cache Redis\n  redis:\n    image: redis:alpine\n    command: redis-server --appendonly yes\n    volumes:\n      - redis_data:/data\n    networks:\n      - backend\n\n  # Nginx Reverse Proxy\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf\n      - ./nginx/ssl:/etc/nginx/ssl\n    depends_on:\n      - frontend\n      - backend\n    networks:\n      - frontend\n\n  # Worker para tarefas ass\u00edncronas\n  worker:\n    build: ./backend\n    command: npm run worker\n    environment:\n      - NODE_ENV=production\n      - MONGODB_URL=mongodb://mongodb:27017/myapp\n      - REDIS_URL=redis://redis:6379\n    depends_on:\n      - mongodb\n      - redis\n    networks:\n      - backend\n    deploy:\n      replicas: 2\n\nvolumes:\n  mongo_data:\n  redis_data:\n\nnetworks:\n  frontend:\n  backend:\n\n# Ambiente de desenvolvimento\nenvironments:\n  development:\n    services:\n      frontend:\n        build:\n          target: development\n        volumes:\n          - ./frontend:/app\n          - /app/node_modules\n        command: npm start\n        environment:\n          - REACT_APP_API_URL=http://localhost:3001\n          - CHOKIDAR_USEPOLLING=true\n\n      backend:\n        volumes:\n          - ./backend:/app\n          - /app/node_modules\n        command: npm run dev\n        environment:\n          - NODE_ENV=development\n          - DEBUG=*\n\n# Workflows\nworkflows:\n  dev-setup:\n    description: \"Setup para desenvolvimento\"\n    steps:\n      - name: \"Install dependencies\"\n        commands:\n          - \"cd frontend &amp;&amp; npm install\"\n          - \"cd backend &amp;&amp; npm install\"\n\n      - name: \"Start infrastructure\"\n        commands:\n          - \"docker-pilot start mongodb redis\"\n          - \"sleep 10\"\n\n      - name: \"Initialize database\"\n        commands:\n          - \"docker-pilot exec backend npm run db:migrate\"\n          - \"docker-pilot exec backend npm run db:seed\"\n\n      - name: \"Start application\"\n        commands:\n          - \"docker-pilot start backend worker\"\n          - \"docker-pilot start frontend\"\n\n  production-deploy:\n    description: \"Deploy para produ\u00e7\u00e3o\"\n    confirmation: true\n    steps:\n      - name: \"Build images\"\n        commands:\n          - \"docker-pilot build --no-cache\"\n\n      - name: \"Run tests\"\n        commands:\n          - \"docker-pilot run test-all\"\n\n      - name: \"Deploy\"\n        commands:\n          - \"docker-pilot push\"\n          - \"docker-pilot start --all\"\n\n      - name: \"Health check\"\n        commands:\n          - \"sleep 30\"\n          - \"docker-pilot health --all\"\n\n# Comandos personalizados\ncustom_commands:\n  test-all:\n    description: \"Executar todos os testes\"\n    parallel:\n      - name: \"Frontend tests\"\n        command: \"cd frontend &amp;&amp; npm test -- --coverage --watchAll=false\"\n      - name: \"Backend tests\"\n        command: \"cd backend &amp;&amp; npm test -- --coverage\"\n\n  db-backup:\n    description: \"Backup do banco de dados\"\n    script: |\n      TIMESTAMP=$(date +%Y%m%d_%H%M%S)\n      docker-pilot exec mongodb mongodump --out /backup/dump_$TIMESTAMP\n      echo \"Backup criado: dump_$TIMESTAMP\"\n\n  db-restore:\n    description: \"Restaurar banco de dados\"\n    options:\n      backup_name:\n        type: \"string\"\n        required: true\n        description: \"Nome do backup para restaurar\"\n    script: |\n      docker-pilot exec mongodb mongorestore /backup/$BACKUP_NAME\n      echo \"Banco restaurado de: $BACKUP_NAME\"\n</code></pre>"},{"location":"examples/advanced/#projeto-multi-tenant","title":"Projeto Multi-tenant","text":""},{"location":"examples/advanced/#configuracao-multi-tenant","title":"Configura\u00e7\u00e3o Multi-tenant","text":"<pre><code># docker-pilot.yml\nversion: \"1.0\"\n\nproject:\n  name: \"saas-platform\"\n  description: \"Plataforma SaaS multi-tenant\"\n\nservices:\n  # Load Balancer\n  haproxy:\n    image: haproxy:2.4\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n      - \"8404:8404\"  # Stats\n    volumes:\n      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg\n    depends_on:\n      - app-tenant1\n      - app-tenant2\n      - app-tenant3\n    networks:\n      - frontend\n\n  # Aplica\u00e7\u00e3o Tenant 1\n  app-tenant1:\n    build: ./app\n    environment:\n      - TENANT_ID=tenant1\n      - DB_HOST=db-tenant1\n      - DB_NAME=tenant1_db\n      - REDIS_URL=redis://redis-tenant1:6379\n    depends_on:\n      - db-tenant1\n      - redis-tenant1\n    networks:\n      - frontend\n      - tenant1-backend\n    labels:\n      - \"tenant=tenant1\"\n\n  db-tenant1:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=tenant1_db\n      - POSTGRES_USER=tenant1_user\n      - POSTGRES_PASSWORD=${TENANT1_DB_PASSWORD}\n    volumes:\n      - tenant1_data:/var/lib/postgresql/data\n    networks:\n      - tenant1-backend\n\n  redis-tenant1:\n    image: redis:alpine\n    volumes:\n      - tenant1_redis:/data\n    networks:\n      - tenant1-backend\n\n  # Aplica\u00e7\u00e3o Tenant 2\n  app-tenant2:\n    build: ./app\n    environment:\n      - TENANT_ID=tenant2\n      - DB_HOST=db-tenant2\n      - DB_NAME=tenant2_db\n      - REDIS_URL=redis://redis-tenant2:6379\n    depends_on:\n      - db-tenant2\n      - redis-tenant2\n    networks:\n      - frontend\n      - tenant2-backend\n    labels:\n      - \"tenant=tenant2\"\n\n  db-tenant2:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=tenant2_db\n      - POSTGRES_USER=tenant2_user\n      - POSTGRES_PASSWORD=${TENANT2_DB_PASSWORD}\n    volumes:\n      - tenant2_data:/var/lib/postgresql/data\n    networks:\n      - tenant2-backend\n\n  redis-tenant2:\n    image: redis:alpine\n    volumes:\n      - tenant2_redis:/data\n    networks:\n      - tenant2-backend\n\n  # Aplica\u00e7\u00e3o Tenant 3\n  app-tenant3:\n    build: ./app\n    environment:\n      - TENANT_ID=tenant3\n      - DB_HOST=db-tenant3\n      - DB_NAME=tenant3_db\n      - REDIS_URL=redis://redis-tenant3:6379\n    depends_on:\n      - db-tenant3\n      - redis-tenant3\n    networks:\n      - frontend\n      - tenant3-backend\n    labels:\n      - \"tenant=tenant3\"\n\n  db-tenant3:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=tenant3_db\n      - POSTGRES_USER=tenant3_user\n      - POSTGRES_PASSWORD=${TENANT3_DB_PASSWORD}\n    volumes:\n      - tenant3_data:/var/lib/postgresql/data\n    networks:\n      - tenant3-backend\n\n  redis-tenant3:\n    image: redis:alpine\n    volumes:\n      - tenant3_redis:/data\n    networks:\n      - tenant3-backend\n\n  # Servi\u00e7os compartilhados\n  shared-auth:\n    build: ./auth-service\n    environment:\n      - DB_HOST=shared-db\n      - DB_NAME=auth_db\n    depends_on:\n      - shared-db\n    networks:\n      - frontend\n      - shared-backend\n\n  shared-db:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=auth_db\n      - POSTGRES_USER=auth_user\n      - POSTGRES_PASSWORD=${SHARED_DB_PASSWORD}\n    volumes:\n      - shared_data:/var/lib/postgresql/data\n    networks:\n      - shared-backend\n\n  # Monitoramento centralizado\n  monitoring:\n    build: ./monitoring\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./monitoring/config:/etc/monitoring\n    networks:\n      - frontend\n      - tenant1-backend\n      - tenant2-backend\n      - tenant3-backend\n      - shared-backend\n\nvolumes:\n  tenant1_data:\n  tenant1_redis:\n  tenant2_data:\n  tenant2_redis:\n  tenant3_data:\n  tenant3_redis:\n  shared_data:\n\nnetworks:\n  frontend:\n  tenant1-backend:\n  tenant2-backend:\n  tenant3-backend:\n  shared-backend:\n\n# Comandos para gest\u00e3o de tenants\ncustom_commands:\n  create-tenant:\n    description: \"Criar novo tenant\"\n    options:\n      tenant_id:\n        type: \"string\"\n        required: true\n        description: \"ID do tenant\"\n      db_password:\n        type: \"string\"\n        required: true\n        description: \"Senha do banco de dados\"\n    script: |\n      TENANT_ID=$TENANT_ID\n      DB_PASSWORD=$DB_PASSWORD\n\n      echo \"Criando tenant: $TENANT_ID\"\n\n      # Criar rede do tenant\n      docker network create ${TENANT_ID}-backend\n\n      # Criar volumes\n      docker volume create ${TENANT_ID}_data\n      docker volume create ${TENANT_ID}_redis\n\n      # Atualizar docker-pilot.yml com novo tenant\n      echo \"Tenant $TENANT_ID criado com sucesso!\"\n\n  scale-tenant:\n    description: \"Escalar servi\u00e7os de um tenant\"\n    options:\n      tenant_id:\n        type: \"string\"\n        required: true\n        description: \"ID do tenant\"\n      replicas:\n        type: \"number\"\n        default: 2\n        description: \"N\u00famero de r\u00e9plicas\"\n    script: |\n      docker-pilot scale app-$TENANT_ID $REPLICAS\n      echo \"Tenant $TENANT_ID escalado para $REPLICAS r\u00e9plicas\"\n\n  backup-tenant:\n    description: \"Backup de um tenant espec\u00edfico\"\n    options:\n      tenant_id:\n        type: \"string\"\n        required: true\n        description: \"ID do tenant\"\n    script: |\n      TIMESTAMP=$(date +%Y%m%d_%H%M%S)\n\n      # Backup do banco\n      docker-pilot exec db-$TENANT_ID pg_dump -U ${TENANT_ID}_user ${TENANT_ID}_db &gt; backup_${TENANT_ID}_${TIMESTAMP}.sql\n\n      # Backup do Redis\n      docker-pilot exec redis-$TENANT_ID redis-cli BGSAVE\n      docker cp redis-$TENANT_ID:/data/dump.rdb backup_${TENANT_ID}_redis_${TIMESTAMP}.rdb\n\n      echo \"Backup do tenant $TENANT_ID conclu\u00eddo: ${TIMESTAMP}\"\n\n# Workflows espec\u00edficos\nworkflows:\n  deploy-all-tenants:\n    description: \"Deploy de todos os tenants\"\n    steps:\n      - name: \"Build aplica\u00e7\u00e3o\"\n        commands:\n          - \"docker-pilot build app\"\n\n      - name: \"Deploy tenant 1\"\n        commands:\n          - \"docker-pilot start db-tenant1 redis-tenant1\"\n          - \"sleep 10\"\n          - \"docker-pilot start app-tenant1\"\n\n      - name: \"Deploy tenant 2\"\n        commands:\n          - \"docker-pilot start db-tenant2 redis-tenant2\"\n          - \"sleep 10\"\n          - \"docker-pilot start app-tenant2\"\n\n      - name: \"Deploy tenant 3\"\n        commands:\n          - \"docker-pilot start db-tenant3 redis-tenant3\"\n          - \"sleep 10\"\n          - \"docker-pilot start app-tenant3\"\n\n      - name: \"Start load balancer\"\n        commands:\n          - \"docker-pilot start haproxy\"\n\n# Monitoramento por tenant\nmonitoring:\n  enabled: true\n\n  alerts:\n    - name: \"tenant_high_cpu\"\n      condition: \"cpu_usage &gt; 80\"\n      labels: [\"tenant\"]\n      actions: [\"scale_tenant\"]\n\n    - name: \"tenant_down\"\n      condition: \"service_status == 'stopped'\"\n      labels: [\"tenant\"]\n      actions: [\"restart_tenant\", \"notify_admin\"]\n\n# Automa\u00e7\u00e3o\nautomation:\n  scheduled_tasks:\n    - name: \"backup-all-tenants\"\n      schedule: \"0 2 * * *\"  # 2:00 AM di\u00e1rio\n      commands:\n        - \"docker-pilot run backup-tenant --tenant_id tenant1\"\n        - \"docker-pilot run backup-tenant --tenant_id tenant2\"\n        - \"docker-pilot run backup-tenant --tenant_id tenant3\"\n</code></pre>"},{"location":"examples/advanced/#pipeline-cicd-avancado","title":"Pipeline CI/CD Avan\u00e7ado","text":""},{"location":"examples/advanced/#configuracao-para-gitlab-ci","title":"Configura\u00e7\u00e3o para GitLab CI","text":"<pre><code># .gitlab-ci.yml\nstages:\n  - validate\n  - test\n  - build\n  - security\n  - deploy-staging\n  - integration-tests\n  - deploy-production\n\nvariables:\n  DOCKER_PILOT_VERSION: \"1.0.0\"\n  IMAGE_TAG: $CI_COMMIT_SHA\n\nbefore_script:\n  - curl -fsSL https://get.docker-pilot.com | sh\n  - docker-pilot --version\n\n# Valida\u00e7\u00e3o\nvalidate-config:\n  stage: validate\n  script:\n    - docker-pilot config validate\n    - docker-pilot config lint\n  only:\n    - merge_requests\n    - main\n\nvalidate-dockerfile:\n  stage: validate\n  script:\n    - docker run --rm -i hadolint/hadolint &lt; Dockerfile\n    - docker-pilot build --dry-run\n  only:\n    - merge_requests\n    - main\n\n# Testes\nunit-tests:\n  stage: test\n  services:\n    - postgres:13\n  variables:\n    POSTGRES_DB: test_db\n    POSTGRES_USER: test_user\n    POSTGRES_PASSWORD: test_password\n  script:\n    - docker-pilot workflow run test-unit\n  coverage: '/Coverage: \\d+\\.\\d+%/'\n  artifacts:\n    reports:\n      coverage_report:\n        coverage_format: cobertura\n        path: coverage/cobertura-coverage.xml\n\nintegration-tests:\n  stage: test\n  script:\n    - docker-pilot workflow run test-integration\n  artifacts:\n    reports:\n      junit: test-results.xml\n\n# Build\nbuild-images:\n  stage: build\n  script:\n    - docker-pilot build --parallel --tag $IMAGE_TAG\n    - docker-pilot push --tag $IMAGE_TAG --registry $CI_REGISTRY\n  only:\n    - main\n    - develop\n\n# Seguran\u00e7a\nsecurity-scan:\n  stage: security\n  script:\n    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock\n      aquasec/trivy image myapp:$IMAGE_TAG\n    - docker-pilot security scan --all\n  only:\n    - main\n\n# Deploy Staging\ndeploy-staging:\n  stage: deploy-staging\n  environment:\n    name: staging\n    url: https://staging.myapp.com\n  script:\n    - docker-pilot config set environment staging\n    - docker-pilot workflow run deploy-staging\n    - docker-pilot health --timeout 300s\n  only:\n    - develop\n\n# Testes de integra\u00e7\u00e3o em staging\nstaging-integration-tests:\n  stage: integration-tests\n  script:\n    - docker-pilot run e2e-tests --environment staging\n  only:\n    - develop\n  needs: [\"deploy-staging\"]\n\n# Deploy Produ\u00e7\u00e3o\ndeploy-production:\n  stage: deploy-production\n  environment:\n    name: production\n    url: https://myapp.com\n  script:\n    - docker-pilot config set environment production\n    - docker-pilot workflow run deploy-production\n    - docker-pilot health --timeout 600s\n  when: manual\n  only:\n    - main\n  needs: [\"deploy-staging\", \"staging-integration-tests\"]\n\n# Jobs de cleanup\ncleanup:\n  stage: deploy-production\n  script:\n    - docker-pilot system prune --force\n    - docker-pilot volume prune --force\n  when: always\n</code></pre>"},{"location":"examples/advanced/#configuracao-de-workflows","title":"Configura\u00e7\u00e3o de Workflows","text":"<pre><code># docker-pilot.yml (workflows avan\u00e7ados)\nworkflows:\n  test-unit:\n    description: \"Testes unit\u00e1rios\"\n    steps:\n      - name: \"Prepare test environment\"\n        commands:\n          - \"docker-pilot start test-db\"\n          - \"sleep 5\"\n\n      - name: \"Run unit tests\"\n        commands:\n          - \"npm test -- --coverage\"\n\n      - name: \"Generate reports\"\n        commands:\n          - \"npm run test:report\"\n\n  test-integration:\n    description: \"Testes de integra\u00e7\u00e3o\"\n    steps:\n      - name: \"Start test stack\"\n        commands:\n          - \"docker-pilot start --profile test\"\n          - \"sleep 30\"\n\n      - name: \"Run migrations\"\n        commands:\n          - \"docker-pilot exec api npm run migrate\"\n\n      - name: \"Run integration tests\"\n        commands:\n          - \"npm run test:integration\"\n\n      - name: \"Cleanup\"\n        commands:\n          - \"docker-pilot stop --all\"\n        on_failure: true\n\n  deploy-staging:\n    description: \"Deploy para staging\"\n    steps:\n      - name: \"Pre-deploy checks\"\n        commands:\n          - \"docker-pilot health --environment staging\"\n          - \"docker-pilot config validate --environment staging\"\n\n      - name: \"Blue-green deployment\"\n        commands:\n          - \"docker-pilot deploy blue --environment staging\"\n          - \"docker-pilot health --timeout 300s blue\"\n          - \"docker-pilot switch blue green --environment staging\"\n\n      - name: \"Post-deploy verification\"\n        commands:\n          - \"docker-pilot run smoke-tests --environment staging\"\n          - \"docker-pilot monitor start --environment staging\"\n\n  deploy-production:\n    description: \"Deploy para produ\u00e7\u00e3o\"\n    confirmation: true\n    steps:\n      - name: \"Pre-production checks\"\n        commands:\n          - \"docker-pilot security scan --all\"\n          - \"docker-pilot config validate --environment production\"\n          - \"docker-pilot backup --all\"\n\n      - name: \"Rolling deployment\"\n        commands:\n          - \"docker-pilot deploy rolling --environment production --batch-size 2\"\n          - \"docker-pilot health --timeout 600s\"\n\n      - name: \"Post-deployment\"\n        commands:\n          - \"docker-pilot run smoke-tests --environment production\"\n          - \"docker-pilot notify 'Production deployment successful'\"\n        rollback_on_error:\n          - \"docker-pilot rollback --environment production\"\n          - \"docker-pilot notify 'Production deployment failed - rolled back'\"\n\n  e2e-tests:\n    description: \"Testes end-to-end\"\n    options:\n      environment:\n        type: \"string\"\n        default: \"staging\"\n        choices: [\"staging\", \"production\"]\n    steps:\n      - name: \"Setup E2E environment\"\n        commands:\n          - \"docker-pilot run setup-e2e-data --environment $ENVIRONMENT\"\n\n      - name: \"Run E2E tests\"\n        commands:\n          - \"cypress run --env environment=$ENVIRONMENT\"\n\n      - name: \"Generate E2E reports\"\n        commands:\n          - \"npm run e2e:report\"\n        on_failure: true\n</code></pre>"},{"location":"examples/advanced/#veja-tambem","title":"Veja Tamb\u00e9m","text":"<ul> <li>Exemplos B\u00e1sicos</li> <li>Projetos</li> <li>Plugins</li> <li>Configura\u00e7\u00e3o</li> </ul>"},{"location":"examples/basic/","title":"Basic Examples","text":"<p>Learn Docker Pilot through practical examples.</p>"},{"location":"examples/basic/#example-1-simple-web-application","title":"Example 1: Simple Web Application","text":""},{"location":"examples/basic/#project-structure","title":"Project Structure","text":"<pre><code>simple-web-app/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 nginx.conf\n</code></pre>"},{"location":"examples/basic/#docker-composeyml","title":"docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  web:\n    image: nginx:alpine\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./src:/usr/share/nginx/html\n      - ./nginx.conf:/etc/nginx/nginx.conf\n    restart: unless-stopped\n</code></pre>"},{"location":"examples/basic/#using-docker-pilot","title":"Using Docker Pilot","text":"<pre><code># Navigate to project\ncd simple-web-app\n\n# Start Docker Pilot (interactive mode)\ndocker-pilot\n\n# Or use CLI commands\ndocker-pilot up          # Start the web server\ndocker-pilot status      # Check if it's running\ndocker-pilot logs        # View nginx logs\ndocker-pilot down        # Stop the server\n</code></pre>"},{"location":"examples/basic/#expected-output","title":"Expected Output","text":"<pre><code>$ docker-pilot up\n\u2705 Starting services...\n\u2705 Service web started successfully\n\ud83c\udf10 Web server available at http://localhost:8080\n\n$ docker-pilot status\n\ud83d\udcca Service Status:\n\u2705 web: running (healthy) - 0.0.0.0:8080-&gt;80/tcp\n</code></pre>"},{"location":"examples/basic/#example-2-full-stack-application","title":"Example 2: Full-Stack Application","text":""},{"location":"examples/basic/#project-structure_1","title":"Project Structure","text":"<pre><code>fullstack-app/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 src/\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 src/\n\u2514\u2500\u2500 database/\n    \u2514\u2500\u2500 init.sql\n</code></pre>"},{"location":"examples/basic/#docker-composeyml_1","title":"docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  frontend:\n    build: ./frontend\n    ports:\n      - \"3000:3000\"\n    environment:\n      - REACT_APP_API_URL=http://localhost:8000\n    depends_on:\n      - backend\n\n  backend:\n    build: ./backend\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DATABASE_URL=postgresql://user:password@database:5432/app\n    depends_on:\n      - database\n\n  database:\n    image: postgres:13\n    ports:\n      - \"5432:5432\"\n    environment:\n      - POSTGRES_DB=app\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"examples/basic/#development-workflow","title":"Development Workflow","text":"<pre><code># Start all services\ndocker-pilot up --build\n\n# Check status\ndocker-pilot status\n\n# View logs for all services\ndocker-pilot logs --follow\n\n# View logs for specific service\ndocker-pilot logs backend\n\n# Open shell in backend for debugging\ndocker-pilot shell backend\n\n# Restart frontend after code changes\ndocker-pilot restart frontend\n\n# Stop everything\ndocker-pilot down\n</code></pre>"},{"location":"examples/basic/#service-management","title":"Service Management","text":"<pre><code># Start only database\ndocker-pilot up database\n\n# Start backend and its dependencies\ndocker-pilot up backend\n\n# Scale frontend to 3 instances\ndocker-pilot scale frontend=3\n\n# Update all images\ndocker-pilot pull\ndocker-pilot up\n</code></pre>"},{"location":"examples/basic/#example-3-microservices-architecture","title":"Example 3: Microservices Architecture","text":""},{"location":"examples/basic/#project-structure_2","title":"Project Structure","text":"<pre><code>microservices-app/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 docker-compose.override.yml\n\u251c\u2500\u2500 services/\n\u2502   \u251c\u2500\u2500 user-service/\n\u2502   \u251c\u2500\u2500 order-service/\n\u2502   \u251c\u2500\u2500 payment-service/\n\u2502   \u2514\u2500\u2500 notification-service/\n\u251c\u2500\u2500 gateway/\n\u251c\u2500\u2500 shared/\n\u2514\u2500\u2500 monitoring/\n</code></pre>"},{"location":"examples/basic/#docker-composeyml_2","title":"docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  # API Gateway\n  gateway:\n    build: ./gateway\n    ports:\n      - \"80:80\"\n    depends_on:\n      - user-service\n      - order-service\n      - payment-service\n\n  # User Service\n  user-service:\n    build: ./services/user-service\n    ports:\n      - \"8001:8000\"\n    environment:\n      - DATABASE_URL=postgresql://user:password@user-db:5432/users\n    depends_on:\n      - user-db\n      - redis\n\n  # Order Service\n  order-service:\n    build: ./services/order-service\n    ports:\n      - \"8002:8000\"\n    environment:\n      - DATABASE_URL=postgresql://user:password@order-db:5432/orders\n      - USER_SERVICE_URL=http://user-service:8000\n    depends_on:\n      - order-db\n      - redis\n\n  # Payment Service\n  payment-service:\n    build: ./services/payment-service\n    ports:\n      - \"8003:8000\"\n    environment:\n      - DATABASE_URL=postgresql://user:password@payment-db:5432/payments\n    depends_on:\n      - payment-db\n      - redis\n\n  # Notification Service\n  notification-service:\n    build: ./services/notification-service\n    environment:\n      - REDIS_URL=redis://redis:6379\n    depends_on:\n      - redis\n\n  # Databases\n  user-db:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=users\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - user_data:/var/lib/postgresql/data\n\n  order-db:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=orders\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - order_data:/var/lib/postgresql/data\n\n  payment-db:\n    image: postgres:13\n    environment:\n      - POSTGRES_DB=payments\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - payment_data:/var/lib/postgresql/data\n\n  # Cache &amp; Message Queue\n  redis:\n    image: redis:6-alpine\n    ports:\n      - \"6379:6379\"\n\nvolumes:\n  user_data:\n  order_data:\n  payment_data:\n</code></pre>"},{"location":"examples/basic/#docker-pilot-configuration","title":"Docker Pilot Configuration","text":"<p>Docker Pilot auto-generates this configuration:</p> <pre><code>{\n  \"projectName\": \"microservices-app\",\n  \"language\": \"en\",\n  \"services\": {\n    \"redis\": { \"priority\": 1 },\n    \"user-db\": { \"priority\": 2 },\n    \"order-db\": { \"priority\": 2 },\n    \"payment-db\": { \"priority\": 2 },\n    \"user-service\": { \"priority\": 3 },\n    \"order-service\": { \"priority\": 4 },\n    \"payment-service\": { \"priority\": 4 },\n    \"notification-service\": { \"priority\": 4 },\n    \"gateway\": { \"priority\": 5 }\n  }\n}\n</code></pre>"},{"location":"examples/basic/#complex-operations","title":"Complex Operations","text":"<pre><code># Start infrastructure first\ndocker-pilot up redis user-db order-db payment-db\n\n# Start core services\ndocker-pilot up user-service\n\n# Start dependent services\ndocker-pilot up order-service payment-service notification-service\n\n# Start gateway\ndocker-pilot up gateway\n\n# Or start everything at once (Docker Pilot handles order)\ndocker-pilot up\n\n# Monitor all services\ndocker-pilot status --detailed\n\n# Check health of all services\ndocker-pilot exec gateway curl http://user-service:8000/health\ndocker-pilot exec gateway curl http://order-service:8000/health\n\n# View aggregated logs\ndocker-pilot logs --follow\n\n# Debug specific service\ndocker-pilot shell user-service\ndocker-pilot logs user-service --tail 100\n\n# Scale services based on load\ndocker-pilot scale user-service=3 order-service=2\n\n# Update and restart services\ndocker-pilot pull\ndocker-pilot build --no-cache\ndocker-pilot up\n</code></pre>"},{"location":"examples/basic/#example-4-wordpress-with-docker-pilot","title":"Example 4: WordPress with Docker Pilot","text":""},{"location":"examples/basic/#docker-composeyml_3","title":"docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  wordpress:\n    image: wordpress:latest\n    ports:\n      - \"8080:80\"\n    environment:\n      - WORDPRESS_DB_HOST=mysql\n      - WORDPRESS_DB_USER=wordpress\n      - WORDPRESS_DB_PASSWORD=wordpress\n      - WORDPRESS_DB_NAME=wordpress\n    volumes:\n      - wordpress_data:/var/www/html\n    depends_on:\n      - mysql\n\n  mysql:\n    image: mysql:8.0\n    environment:\n      - MYSQL_DATABASE=wordpress\n      - MYSQL_USER=wordpress\n      - MYSQL_PASSWORD=wordpress\n      - MYSQL_ROOT_PASSWORD=rootpassword\n    volumes:\n      - mysql_data:/var/lib/mysql\n\n  phpmyadmin:\n    image: phpmyadmin/phpmyadmin\n    ports:\n      - \"8081:80\"\n    environment:\n      - PMA_HOST=mysql\n      - MYSQL_ROOT_PASSWORD=rootpassword\n    depends_on:\n      - mysql\n\nvolumes:\n  wordpress_data:\n  mysql_data:\n</code></pre>"},{"location":"examples/basic/#wordpress-management","title":"WordPress Management","text":"<pre><code># Start WordPress environment\ndocker-pilot up\n\n# Check everything is running\ndocker-pilot status\n\n# Access WordPress: http://localhost:8080\n# Access phpMyAdmin: http://localhost:8081\n\n# View WordPress logs\ndocker-pilot logs wordpress\n\n# Backup database\ndocker-pilot exec mysql mysqldump -u root -prootpassword wordpress &gt; backup.sql\n\n# Restart after configuration changes\ndocker-pilot restart wordpress\n\n# Update WordPress\ndocker-pilot pull wordpress\ndocker-pilot up wordpress\n</code></pre>"},{"location":"examples/basic/#example-5-development-environment","title":"Example 5: Development Environment","text":""},{"location":"examples/basic/#docker-composeyml_4","title":"docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  app:\n    build: .\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - .:/app\n      - /app/node_modules\n    environment:\n      - NODE_ENV=development\n      - DATABASE_URL=postgresql://dev:dev@postgres:5432/devdb\n    depends_on:\n      - postgres\n      - redis\n    command: npm run dev\n\n  postgres:\n    image: postgres:13\n    ports:\n      - \"5432:5432\"\n    environment:\n      - POSTGRES_DB=devdb\n      - POSTGRES_USER=dev\n      - POSTGRES_PASSWORD=dev\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  redis:\n    image: redis:6-alpine\n    ports:\n      - \"6379:6379\"\n\n  mailhog:\n    image: mailhog/mailhog\n    ports:\n      - \"1025:1025\"   # SMTP\n      - \"8025:8025\"   # Web UI\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"examples/basic/#daily-development","title":"Daily Development","text":"<pre><code># Start development environment\ndocker-pilot up\n\n# Install new npm package\ndocker-pilot exec app npm install lodash\n\n# Run database migrations\ndocker-pilot exec app npm run migrate\n\n# Run tests\ndocker-pilot exec app npm test\n\n# View application logs\ndocker-pilot logs app --follow\n\n# Access database for debugging\ndocker-pilot shell postgres\n# psql -U dev -d devdb\n\n# View emails (MailHog): http://localhost:8025\n\n# Clean restart after big changes\ndocker-pilot down --volumes\ndocker-pilot up --build\n</code></pre>"},{"location":"examples/basic/#common-patterns","title":"Common Patterns","text":""},{"location":"examples/basic/#pattern-1-health-checks","title":"Pattern 1: Health Checks","text":"<pre><code># Check if services are healthy\ndocker-pilot status --filter health=healthy\n\n# Wait for services to be ready\nwhile ! docker-pilot status --quiet; do\n  echo \"Waiting for services...\"\n  sleep 2\ndone\n</code></pre>"},{"location":"examples/basic/#pattern-2-environment-specific-startup","title":"Pattern 2: Environment-Specific Startup","text":"<pre><code># Development\ndocker-pilot --config docker-pilot.dev.json up\n\n# Testing\ndocker-pilot --config docker-pilot.test.json up --build\n\n# Production\ndocker-pilot --config docker-pilot.prod.json up --detach\n</code></pre>"},{"location":"examples/basic/#pattern-3-maintenance-scripts","title":"Pattern 3: Maintenance Scripts","text":"<pre><code>#!/bin/bash\n# maintenance.sh\n\necho \"\ud83e\uddf9 Starting maintenance...\"\n\n# Stop services\ndocker-pilot down\n\n# Clean up\ndocker-pilot clean --all\n\n# Update images\ndocker-pilot pull\n\n# Restart\ndocker-pilot up --build\n\necho \"\u2705 Maintenance complete!\"\n</code></pre>"},{"location":"examples/basic/#pattern-4-backup-script","title":"Pattern 4: Backup Script","text":"<pre><code>#!/bin/bash\n# backup.sh\n\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Backup database\ndocker-pilot exec database pg_dump -U user myapp &gt; \"backup_${DATE}.sql\"\n\n# Backup volumes\ndocker run --rm -v myapp_data:/data -v $(pwd):/backup alpine tar czf /backup/volumes_${DATE}.tar.gz /data\n\necho \"\u2705 Backup completed: backup_${DATE}.*\"\n</code></pre>"},{"location":"examples/basic/#tips-for-success","title":"Tips for Success","text":""},{"location":"examples/basic/#1-use-descriptive-service-names","title":"1. Use Descriptive Service Names","text":"<pre><code># Good\nservices:\n  web-frontend:\n  api-backend:\n  postgres-database:\n\n# Avoid\nservices:\n  app1:\n  app2:\n  db:\n</code></pre>"},{"location":"examples/basic/#2-set-up-health-checks","title":"2. Set Up Health Checks","text":"<pre><code>services:\n  web:\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n</code></pre>"},{"location":"examples/basic/#3-use-environment-files","title":"3. Use Environment Files","text":"<pre><code># .env\nPOSTGRES_USER=myuser\nPOSTGRES_PASSWORD=mypass\nAPI_PORT=8000\n</code></pre> <pre><code># docker-compose.yml\nservices:\n  api:\n    env_file: .env\n    ports:\n      - \"${API_PORT}:8000\"\n</code></pre>"},{"location":"examples/basic/#4-document-your-setup","title":"4. Document Your Setup","text":"<p>Create a <code>README.md</code> with Docker Pilot commands:</p> <pre><code># My Project\n\n## Quick Start\n\n```bash\n# Start everything\ndocker-pilot up\n\n# View status\ndocker-pilot status\n\n# View logs\ndocker-pilot logs --follow\n</code></pre>"},{"location":"examples/basic/#development","title":"Development","text":"<p><pre><code># Run tests\ndocker-pilot exec app npm test\n\n# Database shell\ndocker-pilot shell database\n</code></pre> ```</p>"},{"location":"examples/basic/#whats-next","title":"What's Next?","text":"<ul> <li>\ud83d\ude80 Try Advanced Examples</li> <li>\ud83c\udfd7\ufe0f Learn about Real-world Projects</li> <li>\ud83d\udd0c Explore Plugin Examples</li> <li>\ud83c\udfae Master the Interactive Menu</li> </ul> <p>Ready for More</p> <p>These examples show the power and flexibility of Docker Pilot. Start with simple examples and gradually work your way up to more complex architectures!</p>"},{"location":"examples/plugins/","title":"Plugin Examples","text":"<p>This section demonstrates how to create and use plugins to extend Docker Pilot functionality.</p>"},{"location":"examples/plugins/#overview","title":"Overview","text":"<p>Docker Pilot's plugin system allows adding custom commands, hooks and specific functionality without modifying the main code. Plugins are loaded dynamically and can be distributed as separate npm packages.</p>"},{"location":"examples/plugins/#plugin-structure","title":"Plugin Structure","text":""},{"location":"examples/plugins/#basic-plugin","title":"Basic Plugin","text":"<pre><code>// my-plugin/src/index.ts\nimport { Plugin, PluginContext, Command, CommandContext, CommandResult } from '@docker-pilot/types';\n\nexport default class MyPlugin implements Plugin {\n  readonly name = 'my-plugin';\n  readonly version = '1.0.0';\n  readonly description = 'Example plugin for Docker Pilot';\n  readonly author = 'Your Name';\n\n  async initialize(context: PluginContext): Promise&lt;void&gt; {\n    context.logger.info(`Plugin ${this.name} initialized`);\n  }\n\n  async destroy(): Promise&lt;void&gt; {\n    // Cleanup when plugin is unloaded\n  }\n\n  getCommands(): Command[] {\n    return [\n      new MyCustomCommand(),\n      new AnotherCommand()\n    ];\n  }\n\n  getHooks() {\n    return {\n      beforeCommand: this.beforeCommand.bind(this),\n      afterCommand: this.afterCommand.bind(this),\n      onError: this.onError.bind(this)\n    };\n  }\n\n  private async beforeCommand(context: CommandContext): Promise&lt;void&gt; {\n    console.log(`Executing command: ${context.args[0]}`);\n  }\n\n  private async afterCommand(context: CommandContext, result: CommandResult): Promise&lt;void&gt; {\n    console.log(`Comando executado com sucesso: ${result.success}`);\n  }\n\n  private async onError(context: CommandContext, error: Error): Promise&lt;void&gt; {\n    console.error(`Erro no comando: ${error.message}`);\n  }\n}\n</code></pre>"},{"location":"examples/plugins/#packagejson-do-plugin","title":"Package.json do Plugin","text":"<pre><code>{\n  \"name\": \"@docker-pilot/plugin-exemplo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Plugin de exemplo para Docker Pilot\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"keywords\": [\"docker-pilot\", \"plugin\", \"docker\"],\n  \"author\": \"Seu Nome\",\n  \"license\": \"ISC\",\n  \"peerDependencies\": {\n    \"@docker-pilot/core\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"@docker-pilot/types\": \"^1.0.0\",\n    \"typescript\": \"^4.9.0\"\n  },\n  \"files\": [\n    \"dist/\",\n    \"README.md\",\n    \"LICENSE\"\n  ],\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"prepublishOnly\": \"npm run build\"\n  }\n}\n</code></pre>"},{"location":"examples/plugins/#exemplos-de-comandos-personalizados","title":"Exemplos de Comandos Personalizados","text":""},{"location":"examples/plugins/#1-comando-de-backup","title":"1. Comando de Backup","text":"<pre><code>// plugins/backup/src/BackupCommand.ts\nimport { Command, CommandContext, CommandResult } from '@docker-pilot/types';\nimport { DockerUtils, FileUtils, Logger } from '@docker-pilot/utils';\n\nexport class BackupCommand implements Command {\n  readonly name = 'backup';\n  readonly description = 'Cria backup de containers e volumes';\n  readonly category = 'custom';\n\n  async execute(context: CommandContext): Promise&lt;CommandResult&gt; {\n    const { args, options, logger, docker } = context;\n\n    try {\n      const backupType = args[0] || 'containers';\n      const outputDir = options.output || './backups';\n\n      await FileUtils.createDir(outputDir);\n\n      switch (backupType) {\n        case 'containers':\n          await this.backupContainers(docker, outputDir, logger);\n          break;\n        case 'volumes':\n          await this.backupVolumes(docker, outputDir, logger);\n          break;\n        case 'all':\n          await this.backupContainers(docker, outputDir, logger);\n          await this.backupVolumes(docker, outputDir, logger);\n          break;\n        default:\n          throw new Error(`Tipo de backup inv\u00e1lido: ${backupType}`);\n      }\n\n      return {\n        success: true,\n        exitCode: 0,\n        message: `Backup criado em: ${outputDir}`,\n        executionTime: Date.now() - context.startTime\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        exitCode: 1,\n        error: error as Error,\n        executionTime: Date.now() - context.startTime\n      };\n    }\n  }\n\n  private async backupContainers(docker: any, outputDir: string, logger: Logger): Promise&lt;void&gt; {\n    logger.info('Iniciando backup de containers...');\n\n    const containers = await docker.listContainers({ all: true });\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n\n    for (const container of containers) {\n      logger.info(`Fazendo backup do container: ${container.name}`);\n\n      // Exportar container como tar\n      const backupPath = `${outputDir}/container-${container.name}-${timestamp}.tar`;\n      await docker.exportContainer(container.id, backupPath);\n\n      // Salvar metadados\n      const metadataPath = `${outputDir}/container-${container.name}-${timestamp}.json`;\n      const metadata = await docker.inspectContainer(container.id);\n      await FileUtils.write(metadataPath, JSON.stringify(metadata, null, 2));\n    }\n\n    logger.info('Backup de containers conclu\u00eddo');\n  }\n\n  private async backupVolumes(docker: any, outputDir: string, logger: Logger): Promise&lt;void&gt; {\n    logger.info('Iniciando backup de volumes...');\n\n    const volumes = await docker.listVolumes();\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n\n    for (const volume of volumes) {\n      logger.info(`Fazendo backup do volume: ${volume.name}`);\n\n      // Criar container tempor\u00e1rio para acessar volume\n      const backupContainer = await docker.createContainer({\n        image: 'alpine:latest',\n        cmd: ['tar', 'czf', `/backup/${volume.name}-${timestamp}.tar.gz`, '/data'],\n        volumes: [\n          { source: volume.name, destination: '/data', readOnly: true },\n          { source: outputDir, destination: '/backup' }\n        ]\n      });\n\n      await docker.startContainer(backupContainer);\n      await docker.waitContainer(backupContainer);\n      await docker.removeContainer(backupContainer);\n    }\n\n    logger.info('Backup de volumes conclu\u00eddo');\n  }\n\n  getHelp(): string {\n    return `\nUso: docker-pilot backup [tipo] [op\u00e7\u00f5es]\n\nTipos:\n  containers    Backup apenas containers\n  volumes       Backup apenas volumes\n  all           Backup containers e volumes\n\nOp\u00e7\u00f5es:\n  --output      Diret\u00f3rio de sa\u00edda (padr\u00e3o: ./backups)\n\nExemplos:\n  docker-pilot backup containers\n  docker-pilot backup all --output /backups\n    `;\n  }\n\n  validate(args: string[], options: any): { valid: boolean; errors: string[] } {\n    const errors: string[] = [];\n    const validTypes = ['containers', 'volumes', 'all'];\n\n    if (args[0] &amp;&amp; !validTypes.includes(args[0])) {\n      errors.push(`Tipo inv\u00e1lido: ${args[0]}. Use: ${validTypes.join(', ')}`);\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors\n    };\n  }\n}\n</code></pre>"},{"location":"examples/plugins/#2-comando-de-monitoramento","title":"2. Comando de Monitoramento","text":"<pre><code>// plugins/monitoring/src/MonitorCommand.ts\nimport { Command, CommandContext, CommandResult } from '@docker-pilot/types';\nimport { TimeUtils, ColorUtils } from '@docker-pilot/utils';\n\nexport class MonitorCommand implements Command {\n  readonly name = 'monitor';\n  readonly description = 'Monitora recursos de containers em tempo real';\n  readonly category = 'custom';\n\n  private monitoring = false;\n  private interval?: NodeJS.Timeout;\n\n  async execute(context: CommandContext): Promise&lt;CommandResult&gt; {\n    const { options, logger, docker } = context;\n\n    const refreshRate = parseInt(options.refresh || '5') * 1000;\n    const duration = options.duration ? parseInt(options.duration) * 1000 : null;\n\n    logger.info('Iniciando monitoramento (Ctrl+C para parar)...');\n\n    this.monitoring = true;\n\n    // Handler para Ctrl+C\n    process.on('SIGINT', () =&gt; {\n      this.stopMonitoring();\n    });\n\n    const startTime = Date.now();\n\n    this.interval = setInterval(async () =&gt; {\n      if (!this.monitoring) return;\n\n      // Verificar se deve parar por dura\u00e7\u00e3o\n      if (duration &amp;&amp; Date.now() - startTime &gt;= duration) {\n        this.stopMonitoring();\n        return;\n      }\n\n      await this.displayStats(docker);\n    }, refreshRate);\n\n    // Primeira execu\u00e7\u00e3o imediata\n    await this.displayStats(docker);\n\n    return new Promise((resolve) =&gt; {\n      const checkStop = setInterval(() =&gt; {\n        if (!this.monitoring) {\n          clearInterval(checkStop);\n          resolve({\n            success: true,\n            exitCode: 0,\n            message: 'Monitoramento finalizado',\n            executionTime: Date.now() - startTime\n          });\n        }\n      }, 1000);\n    });\n  }\n\n  private async displayStats(docker: any): Promise&lt;void&gt; {\n    // Limpar tela\n    console.clear();\n\n    // Header\n    console.log(ColorUtils.bold('=== Docker Pilot Monitor ==='));\n    console.log(ColorUtils.gray(`Atualizado em: ${new Date().toLocaleTimeString()}\\n`));\n\n    try {\n      const containers = await docker.listContainers();\n      const runningContainers = containers.filter((c: any) =&gt; c.status === 'running');\n\n      // Estat\u00edsticas gerais\n      console.log(ColorUtils.blue('\ud83d\udcca Estat\u00edsticas Gerais:'));\n      console.log(`Total de containers: ${containers.length}`);\n      console.log(`Em execu\u00e7\u00e3o: ${ColorUtils.green(runningContainers.length.toString())}`);\n      console.log(`Parados: ${ColorUtils.red((containers.length - runningContainers.length).toString())}\\n`);\n\n      if (runningContainers.length &gt; 0) {\n        console.log(ColorUtils.blue('\ud83d\udda5\ufe0f  Recursos dos Containers:'));\n        console.log('Container'.padEnd(20) + 'CPU%'.padEnd(10) + 'Mem\u00f3ria'.padEnd(15) + 'Rede I/O'.padEnd(15) + 'Status');\n        console.log('-'.repeat(75));\n\n        for (const container of runningContainers) {\n          try {\n            const stats = await docker.getContainerStats(container.id);\n            const cpuPercent = this.calculateCpuPercent(stats);\n            const memoryUsage = this.formatMemoryUsage(stats);\n            const networkIO = this.formatNetworkIO(stats);\n\n            const name = container.name.substring(0, 18).padEnd(20);\n            const cpu = `${cpuPercent.toFixed(1)}%`.padEnd(10);\n            const memory = memoryUsage.padEnd(15);\n            const network = networkIO.padEnd(15);\n            const status = ColorUtils.green('\u25cf');\n\n            console.log(`${name}${cpu}${memory}${network}${status}`);\n          } catch (error) {\n            const name = container.name.substring(0, 18).padEnd(20);\n            console.log(`${name}${'N/A'.padEnd(50)} ${ColorUtils.red('\u25cf')}`);\n          }\n        }\n      }\n\n      console.log(`\\n${ColorUtils.gray('Pressione Ctrl+C para parar o monitoramento')}`);\n\n    } catch (error) {\n      console.error(ColorUtils.red(`Erro ao obter estat\u00edsticas: ${error}`));\n    }\n  }\n\n  private calculateCpuPercent(stats: any): number {\n    const cpuDelta = stats.cpu_stats.cpu_usage.total_usage - stats.precpu_stats.cpu_usage.total_usage;\n    const systemDelta = stats.cpu_stats.system_cpu_usage - stats.precpu_stats.system_cpu_usage;\n    const numberCpus = stats.cpu_stats.online_cpus;\n\n    if (systemDelta &gt; 0 &amp;&amp; cpuDelta &gt; 0) {\n      return (cpuDelta / systemDelta) * numberCpus * 100;\n    }\n    return 0;\n  }\n\n  private formatMemoryUsage(stats: any): string {\n    const used = stats.memory_stats.usage;\n    const limit = stats.memory_stats.limit;\n    const usedMB = Math.round(used / 1024 / 1024);\n    const limitMB = Math.round(limit / 1024 / 1024);\n    return `${usedMB}/${limitMB}MB`;\n  }\n\n  private formatNetworkIO(stats: any): string {\n    let rxBytes = 0;\n    let txBytes = 0;\n\n    if (stats.networks) {\n      Object.values(stats.networks).forEach((network: any) =&gt; {\n        rxBytes += network.rx_bytes;\n        txBytes += network.tx_bytes;\n      });\n    }\n\n    const rxMB = (rxBytes / 1024 / 1024).toFixed(1);\n    const txMB = (txBytes / 1024 / 1024).toFixed(1);\n    return `\u2193${rxMB} \u2191${txMB}`;\n  }\n\n  private stopMonitoring(): void {\n    this.monitoring = false;\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  getHelp(): string {\n    return `\nUso: docker-pilot monitor [op\u00e7\u00f5es]\n\nOp\u00e7\u00f5es:\n  --refresh     Intervalo de atualiza\u00e7\u00e3o em segundos (padr\u00e3o: 5)\n  --duration    Dura\u00e7\u00e3o do monitoramento em segundos\n\nExemplos:\n  docker-pilot monitor\n  docker-pilot monitor --refresh 2\n  docker-pilot monitor --duration 60\n    `;\n  }\n\n  validate(): { valid: boolean; errors: string[] } {\n    return { valid: true, errors: [] };\n  }\n}\n</code></pre>"},{"location":"examples/plugins/#3-comando-de-deploy-automatizado","title":"3. Comando de Deploy Automatizado","text":"<pre><code>// plugins/deploy/src/DeployCommand.ts\nimport { Command, CommandContext, CommandResult } from '@docker-pilot/types';\nimport { FileUtils, DockerUtils, Logger } from '@docker-pilot/utils';\n\nexport class DeployCommand implements Command {\n  readonly name = 'deploy';\n  readonly description = 'Deploy automatizado de aplica\u00e7\u00f5es';\n  readonly category = 'custom';\n\n  async execute(context: CommandContext): Promise&lt;CommandResult&gt; {\n    const { args, options, logger, docker } = context;\n\n    try {\n      const configPath = args[0] || './deploy.json';\n      const environment = options.env || 'production';\n\n      // Carregar configura\u00e7\u00e3o de deploy\n      const deployConfig = await this.loadDeployConfig(configPath, environment);\n\n      // Executar pipeline de deploy\n      await this.executeDeploy(deployConfig, docker, logger);\n\n      return {\n        success: true,\n        exitCode: 0,\n        message: 'Deploy executado com sucesso',\n        executionTime: Date.now() - context.startTime\n      };\n\n    } catch (error) {\n      return {\n        success: false,\n        exitCode: 1,\n        error: error as Error,\n        executionTime: Date.now() - context.startTime\n      };\n    }\n  }\n\n  private async loadDeployConfig(configPath: string, environment: string): Promise&lt;any&gt; {\n    if (!await FileUtils.exists(configPath)) {\n      throw new Error(`Arquivo de configura\u00e7\u00e3o n\u00e3o encontrado: ${configPath}`);\n    }\n\n    const configContent = await FileUtils.read(configPath);\n    const config = JSON.parse(configContent);\n\n    if (!config.environments || !config.environments[environment]) {\n      throw new Error(`Ambiente n\u00e3o encontrado: ${environment}`);\n    }\n\n    return {\n      ...config.common,\n      ...config.environments[environment]\n    };\n  }\n\n  private async executeDeploy(config: any, docker: any, logger: Logger): Promise&lt;void&gt; {\n    logger.info('Iniciando processo de deploy...');\n\n    // 1. Pre-deploy hooks\n    if (config.hooks?.preDeploy) {\n      await this.executeHooks(config.hooks.preDeploy, logger);\n    }\n\n    // 2. Build da aplica\u00e7\u00e3o\n    if (config.build) {\n      await this.buildApplication(config.build, docker, logger);\n    }\n\n    // 3. Deploy dos servi\u00e7os\n    if (config.services) {\n      await this.deployServices(config.services, docker, logger);\n    }\n\n    // 4. Health checks\n    if (config.healthChecks) {\n      await this.runHealthChecks(config.healthChecks, logger);\n    }\n\n    // 5. Post-deploy hooks\n    if (config.hooks?.postDeploy) {\n      await this.executeHooks(config.hooks.postDeploy, logger);\n    }\n\n    logger.info('Deploy conclu\u00eddo com sucesso!');\n  }\n\n  private async executeHooks(hooks: string[], logger: Logger): Promise&lt;void&gt; {\n    for (const hook of hooks) {\n      logger.info(`Executando hook: ${hook}`);\n      // Executar comando ou script\n      await this.executeCommand(hook);\n    }\n  }\n\n  private async buildApplication(buildConfig: any, docker: any, logger: Logger): Promise&lt;void&gt; {\n    logger.info('Fazendo build da aplica\u00e7\u00e3o...');\n\n    const { dockerfile, context, tags } = buildConfig;\n\n    for (const tag of tags) {\n      logger.info(`Building imagem: ${tag}`);\n\n      await docker.buildImage({\n        dockerfile,\n        context,\n        tag,\n        buildArgs: buildConfig.args || {},\n        labels: buildConfig.labels || {}\n      });\n\n      // Push para registry se configurado\n      if (buildConfig.registry) {\n        logger.info(`Enviando para registry: ${tag}`);\n        await docker.pushImage(tag);\n      }\n    }\n  }\n\n  private async deployServices(services: any[], docker: any, logger: Logger): Promise&lt;void&gt; {\n    logger.info('Fazendo deploy dos servi\u00e7os...');\n\n    for (const service of services) {\n      logger.info(`Fazendo deploy do servi\u00e7o: ${service.name}`);\n\n      // Parar servi\u00e7o existente\n      try {\n        const existingContainers = await docker.listContainers({\n          filters: { label: `service=${service.name}` }\n        });\n\n        for (const container of existingContainers) {\n          logger.info(`Parando container existente: ${container.name}`);\n          await docker.stopContainer(container.id);\n          await docker.removeContainer(container.id);\n        }\n      } catch (error) {\n        // Ignorar se n\u00e3o houver containers existentes\n      }\n\n      // Criar novo container\n      const containerId = await docker.createContainer({\n        name: service.name,\n        image: service.image,\n        env: service.environment || [],\n        ports: service.ports || [],\n        volumes: service.volumes || [],\n        networks: service.networks || [],\n        labels: {\n          service: service.name,\n          version: service.version || 'latest'\n        },\n        restart: service.restart || 'unless-stopped'\n      });\n\n      // Iniciar container\n      await docker.startContainer(containerId);\n      logger.info(`Servi\u00e7o ${service.name} iniciado: ${containerId}`);\n    }\n  }\n\n  private async runHealthChecks(healthChecks: any[], logger: Logger): Promise&lt;void&gt; {\n    logger.info('Executando health checks...');\n\n    for (const check of healthChecks) {\n      logger.info(`Health check: ${check.name}`);\n\n      const maxRetries = check.retries || 5;\n      const delay = check.delay || 5000;\n\n      for (let i = 0; i &lt; maxRetries; i++) {\n        try {\n          await this.executeHealthCheck(check);\n          logger.info(`\u2705 Health check ${check.name} passou`);\n          break;\n        } catch (error) {\n          if (i === maxRetries - 1) {\n            throw new Error(`Health check ${check.name} falhou ap\u00f3s ${maxRetries} tentativas`);\n          }\n\n          logger.warn(`Health check ${check.name} falhou, tentativa ${i + 1}/${maxRetries}`);\n          await TimeUtils.sleep(delay);\n        }\n      }\n    }\n  }\n\n  private async executeHealthCheck(check: any): Promise&lt;void&gt; {\n    switch (check.type) {\n      case 'http':\n        await this.httpHealthCheck(check.url, check.expectedStatus || 200);\n        break;\n      case 'tcp':\n        await this.tcpHealthCheck(check.host, check.port);\n        break;\n      case 'command':\n        await this.executeCommand(check.command);\n        break;\n      default:\n        throw new Error(`Tipo de health check n\u00e3o suportado: ${check.type}`);\n    }\n  }\n\n  private async httpHealthCheck(url: string, expectedStatus: number): Promise&lt;void&gt; {\n    const response = await fetch(url);\n    if (response.status !== expectedStatus) {\n      throw new Error(`HTTP ${response.status}, esperado ${expectedStatus}`);\n    }\n  }\n\n  private async tcpHealthCheck(host: string, port: number): Promise&lt;void&gt; {\n    import net  from \"net\";\n\n    return new Promise((resolve, reject) =&gt; {\n      const socket = new net.Socket();\n\n      socket.setTimeout(5000);\n\n      socket.connect(port, host, () =&gt; {\n        socket.destroy();\n        resolve();\n      });\n\n      socket.on('error', (error) =&gt; {\n        reject(error);\n      });\n\n      socket.on('timeout', () =&gt; {\n        socket.destroy();\n        reject(new Error('Connection timeout'));\n      });\n    });\n  }\n\n  private async executeCommand(command: string): Promise&lt;void&gt; {\n    import { execSync }  from \"child_process\";\n    execSync(command, { stdio: 'inherit' });\n  }\n\n  getHelp(): string {\n    return `\nUso: docker-pilot deploy [arquivo-config] [op\u00e7\u00f5es]\n\nArgumentos:\n  arquivo-config    Arquivo de configura\u00e7\u00e3o do deploy (padr\u00e3o: ./deploy.json)\n\nOp\u00e7\u00f5es:\n  --env            Ambiente para deploy (padr\u00e3o: production)\n\nExemplo de arquivo de configura\u00e7\u00e3o:\n{\n  \"common\": {\n    \"registry\": \"myregistry.com\"\n  },\n  \"environments\": {\n    \"production\": {\n      \"build\": {\n        \"dockerfile\": \"./Dockerfile\",\n        \"context\": \".\",\n        \"tags\": [\"myapp:latest\"],\n        \"registry\": true\n      },\n      \"services\": [\n        {\n          \"name\": \"web-app\",\n          \"image\": \"myapp:latest\",\n          \"ports\": [\"80:3000\"],\n          \"environment\": [\"NODE_ENV=production\"]\n        }\n      ],\n      \"healthChecks\": [\n        {\n          \"name\": \"web-health\",\n          \"type\": \"http\",\n          \"url\": \"http://localhost/health\"\n        }\n      ]\n    }\n  }\n}\n\nExemplos:\n  docker-pilot deploy\n  docker-pilot deploy ./my-deploy.json --env staging\n    `;\n  }\n\n  validate(): { valid: boolean; errors: string[] } {\n    return { valid: true, errors: [] };\n  }\n}\n</code></pre>"},{"location":"examples/plugins/#plugin-de-integracao-com-cloud","title":"Plugin de Integra\u00e7\u00e3o com Cloud","text":""},{"location":"examples/plugins/#aws-plugin","title":"AWS Plugin","text":"<pre><code>// plugins/aws/src/AWSPlugin.ts\nimport { Plugin, PluginContext } from '@docker-pilot/types';\nimport { ECRCommand } from './commands/ECRCommand';\nimport { ECSCommand } from './commands/ECSCommand';\n\nexport default class AWSPlugin implements Plugin {\n  readonly name = 'aws-integration';\n  readonly version = '1.0.0';\n  readonly description = 'Integra\u00e7\u00e3o com servi\u00e7os AWS';\n  readonly author = 'Docker Pilot Team';\n\n  async initialize(context: PluginContext): Promise&lt;void&gt; {\n    // Verificar credenciais AWS\n    if (!process.env.AWS_ACCESS_KEY_ID || !process.env.AWS_SECRET_ACCESS_KEY) {\n      context.logger.warn('Credenciais AWS n\u00e3o configuradas');\n    }\n\n    context.logger.info('Plugin AWS inicializado');\n  }\n\n  async destroy(): Promise&lt;void&gt; {\n    // Cleanup\n  }\n\n  getCommands() {\n    return [\n      new ECRCommand(),\n      new ECSCommand()\n    ];\n  }\n}\n\n// plugins/aws/src/commands/ECRCommand.ts\nexport class ECRCommand implements Command {\n  readonly name = 'ecr';\n  readonly description = 'Gerencia reposit\u00f3rios ECR';\n  readonly category = 'aws';\n\n  async execute(context: CommandContext): Promise&lt;CommandResult&gt; {\n    const { args, options } = context;\n    const action = args[0];\n\n    switch (action) {\n      case 'login':\n        return await this.login(context);\n      case 'push':\n        return await this.push(context);\n      case 'list':\n        return await this.listRepositories(context);\n      default:\n        throw new Error(`A\u00e7\u00e3o inv\u00e1lida: ${action}`);\n    }\n  }\n\n  private async login(context: CommandContext): Promise&lt;CommandResult&gt; {\n    // Implementar login ECR\n    import { execSync }  from \"child_process\";\n\n    try {\n      const command = 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 123456789012.dkr.ecr.us-east-1.amazonaws.com';\n      execSync(command, { stdio: 'inherit' });\n\n      return {\n        success: true,\n        exitCode: 0,\n        message: 'Login ECR realizado com sucesso',\n        executionTime: 0\n      };\n    } catch (error) {\n      return {\n        success: false,\n        exitCode: 1,\n        error: error as Error,\n        executionTime: 0\n      };\n    }\n  }\n\n  private async push(context: CommandContext): Promise&lt;CommandResult&gt; {\n    // Implementar push para ECR\n    // ...\n  }\n\n  // ... outros m\u00e9todos\n}\n</code></pre>"},{"location":"examples/plugins/#plugin-de-notificacoes","title":"Plugin de Notifica\u00e7\u00f5es","text":"<pre><code>// plugins/notifications/src/NotificationPlugin.ts\nimport { Plugin, PluginContext, PluginHooks } from '@docker-pilot/types';\n\nexport default class NotificationPlugin implements Plugin {\n  readonly name = 'notifications';\n  readonly version = '1.0.0';\n  readonly description = 'Sistema de notifica\u00e7\u00f5es para Docker Pilot';\n  readonly author = 'Docker Pilot Team';\n\n  private config: any;\n\n  async initialize(context: PluginContext): Promise&lt;void&gt; {\n    this.config = context.config.plugins?.notifications || {};\n    context.logger.info('Plugin de notifica\u00e7\u00f5es inicializado');\n  }\n\n  async destroy(): Promise&lt;void&gt; {\n    // Cleanup\n  }\n\n  getHooks(): PluginHooks {\n    return {\n      afterCommand: this.onCommandComplete.bind(this),\n      onError: this.onCommandError.bind(this)\n    };\n  }\n\n  private async onCommandComplete(context: any, result: any): Promise&lt;void&gt; {\n    if (this.config.notifyOnSuccess &amp;&amp; this.isImportantCommand(context.args[0])) {\n      await this.sendNotification({\n        type: 'success',\n        title: 'Comando executado com sucesso',\n        message: `${context.args[0]} executado em ${result.executionTime}ms`,\n        command: context.args[0]\n      });\n    }\n  }\n\n  private async onCommandError(context: any, error: Error): Promise&lt;void&gt; {\n    if (this.config.notifyOnError) {\n      await this.sendNotification({\n        type: 'error',\n        title: 'Erro na execu\u00e7\u00e3o do comando',\n        message: `${context.args[0]}: ${error.message}`,\n        command: context.args[0]\n      });\n    }\n  }\n\n  private isImportantCommand(command: string): boolean {\n    const importantCommands = ['deploy', 'build', 'backup', 'restore'];\n    return importantCommands.includes(command);\n  }\n\n  private async sendNotification(notification: any): Promise&lt;void&gt; {\n    const notifiers = this.config.notifiers || [];\n\n    for (const notifier of notifiers) {\n      switch (notifier.type) {\n        case 'slack':\n          await this.sendSlackNotification(notifier, notification);\n          break;\n        case 'discord':\n          await this.sendDiscordNotification(notifier, notification);\n          break;\n        case 'email':\n          await this.sendEmailNotification(notifier, notification);\n          break;\n        case 'desktop':\n          await this.sendDesktopNotification(notification);\n          break;\n      }\n    }\n  }\n\n  private async sendSlackNotification(config: any, notification: any): Promise&lt;void&gt; {\n    const payload = {\n      text: notification.title,\n      attachments: [{\n        color: notification.type === 'success' ? 'good' : 'danger',\n        text: notification.message,\n        fields: [{\n          title: 'Comando',\n          value: notification.command,\n          short: true\n        }]\n      }]\n    };\n\n    await fetch(config.webhookUrl, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(payload)\n    });\n  }\n\n  private async sendDesktopNotification(notification: any): Promise&lt;void&gt; {\n    import notifier  from \"node-notifier\";\n\n    notifier.notify({\n      title: notification.title,\n      message: notification.message,\n      icon: notification.type === 'success' ? '\u2705' : '\u274c',\n      sound: true\n    });\n  }\n\n  // ... outros m\u00e9todos de notifica\u00e7\u00e3o\n}\n</code></pre>"},{"location":"examples/plugins/#instalacao-e-uso-de-plugins","title":"Instala\u00e7\u00e3o e Uso de Plugins","text":""},{"location":"examples/plugins/#instalacao-via-npm","title":"Instala\u00e7\u00e3o via NPM","text":"<pre><code># Instalar plugin do registry npm\nnpm install -g @docker-pilot/plugin-backup\n\n# Instalar plugin local\nnpm install -g ./meu-plugin\n\n# Instalar plugin diretamente do GitHub\nnpm install -g https://github.com/user/docker-pilot-plugin.git\n</code></pre>"},{"location":"examples/plugins/#configuracao","title":"Configura\u00e7\u00e3o","text":"<pre><code>// docker-pilot.config.json\n{\n  \"plugins\": {\n    \"enabled\": [\n      \"@docker-pilot/plugin-backup\",\n      \"@docker-pilot/plugin-aws\",\n      \"./plugins/custom-plugin\"\n    ],\n    \"backup\": {\n      \"defaultOutputDir\": \"/backups\",\n      \"compression\": true\n    },\n    \"notifications\": {\n      \"notifyOnSuccess\": true,\n      \"notifyOnError\": true,\n      \"notifiers\": [\n        {\n          \"type\": \"slack\",\n          \"webhookUrl\": \"https://hooks.slack.com/...\"\n        }\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"examples/plugins/#uso","title":"Uso","text":"<pre><code># Usar comandos do plugin\ndocker-pilot backup containers --output /tmp/backups\ndocker-pilot deploy ./my-app.json --env production\ndocker-pilot monitor --refresh 2\n\n# Usar comandos AWS\ndocker-pilot ecr login\ndocker-pilot ecr push my-image:latest\ndocker-pilot ecs deploy my-service\n</code></pre>"},{"location":"examples/plugins/#desenvolvimento-de-plugins","title":"Desenvolvimento de Plugins","text":""},{"location":"examples/plugins/#template-de-plugin","title":"Template de Plugin","text":"<pre><code># Criar novo plugin usando template\nnpx create-docker-pilot-plugin meu-plugin\n\n# Estrutura gerada:\nmeu-plugin/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 index.ts\n\u2502   \u251c\u2500\u2500 commands/\n\u2502   \u2514\u2500\u2500 types.ts\n\u251c\u2500\u2500 tests/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 tsconfig.json\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"examples/plugins/#teste-de-plugins","title":"Teste de Plugins","text":"<pre><code>// tests/MeuPlugin.test.ts\nimport MeuPlugin from '../src/index';\nimport { MockPluginContext } from '@docker-pilot/test-utils';\n\ndescribe('MeuPlugin', () =&gt; {\n  let plugin: MeuPlugin;\n  let mockContext: MockPluginContext;\n\n  beforeEach(() =&gt; {\n    plugin = new MeuPlugin();\n    mockContext = new MockPluginContext();\n  });\n\n  test('should initialize correctly', async () =&gt; {\n    await plugin.initialize(mockContext);\n\n    expect(mockContext.logger.info).toHaveBeenCalledWith(\n      expect.stringContaining('inicializado')\n    );\n  });\n\n  test('should provide commands', () =&gt; {\n    const commands = plugin.getCommands();\n\n    expect(commands).toBeDefined();\n    expect(commands.length).toBeGreaterThan(0);\n  });\n});\n</code></pre>"},{"location":"examples/plugins/#publicacao","title":"Publica\u00e7\u00e3o","text":"<pre><code># Build do plugin\nnpm run build\n\n# Teste local\nnpm link\ndocker-pilot # testar comandos\n\n# Publicar no npm\nnpm publish\n\n# Publicar no GitHub Packages\nnpm publish --registry=https://npm.pkg.github.com\n</code></pre>"},{"location":"examples/plugins/#melhores-praticas","title":"Melhores Pr\u00e1ticas","text":""},{"location":"examples/plugins/#1-design-de-plugin","title":"1. Design de Plugin","text":"<ul> <li>Mantenha plugins focados em uma responsabilidade</li> <li>Use nomes descritivos para comandos</li> <li>Implemente valida\u00e7\u00e3o robusta</li> <li>Forne\u00e7a ajuda detalhada</li> </ul>"},{"location":"examples/plugins/#2-tratamento-de-erros","title":"2. Tratamento de Erros","text":"<pre><code>try {\n  // Opera\u00e7\u00e3o do plugin\n} catch (error) {\n  context.logger.error(`Erro no plugin ${this.name}:`, error);\n  throw new PluginError(`Plugin ${this.name} falhou: ${error.message}`);\n}\n</code></pre>"},{"location":"examples/plugins/#3-configuracao","title":"3. Configura\u00e7\u00e3o","text":"<pre><code>// Sempre verificar configura\u00e7\u00e3o\nconst config = context.config.plugins?.[this.name] || {};\nconst timeout = config.timeout || 30000;\n</code></pre>"},{"location":"examples/plugins/#4-recursos","title":"4. Recursos","text":"<pre><code>// Limpar recursos no destroy\nasync destroy(): Promise&lt;void&gt; {\n  if (this.connection) {\n    await this.connection.close();\n  }\n  if (this.interval) {\n    clearInterval(this.interval);\n  }\n}\n</code></pre>"},{"location":"examples/plugins/#5-testes","title":"5. Testes","text":"<ul> <li>Teste todas as funcionalidades do plugin</li> <li>Use mocks para depend\u00eancias externas</li> <li>Teste cen\u00e1rios de erro</li> <li>Teste integra\u00e7\u00e3o com Docker Pilot</li> </ul> <p>Os plugins permitem estender o Docker Pilot de forma poderosa e flex\u00edvel, mantendo o core limpo e focado nas funcionalidades essenciais.</p>"},{"location":"examples/projects/","title":"Project Examples","text":"<p>This section presents complete projects using Docker Pilot, from simple applications to complex architectures.</p>"},{"location":"examples/projects/#personal-blog-wordpress-mysql","title":"Personal Blog (WordPress + MySQL)","text":""},{"location":"examples/projects/#project-structure","title":"Project Structure","text":"<pre><code>personal-blog/\n\u251c\u2500\u2500 docker-pilot.yml\n\u251c\u2500\u2500 .env.example\n\u251c\u2500\u2500 wordpress/\n\u2502   \u251c\u2500\u2500 themes/\n\u2502   \u2514\u2500\u2500 plugins/\n\u251c\u2500\u2500 mysql/\n\u2502   \u2514\u2500\u2500 init/\n\u2514\u2500\u2500 nginx/\n    \u2514\u2500\u2500 nginx.conf\n</code></pre>"},{"location":"examples/projects/#main-configuration","title":"Main Configuration","text":"<pre><code># docker-pilot.yml\nversion: \"1.0\"\n\nproject:\n  name: \"personal-blog\"\n  description: \"Personal blog with WordPress and MySQL\"\n\nservices:\n  wordpress:\n    image: wordpress:6.3-php8.1-fpm\n    environment:\n      - WORDPRESS_DB_HOST=mysql\n      - WORDPRESS_DB_NAME=wordpress\n      - WORDPRESS_DB_USER=wp_user\n      - WORDPRESS_DB_PASSWORD=${WP_DB_PASSWORD}\n      - WORDPRESS_TABLE_PREFIX=wp_\n    volumes:\n      - wordpress_data:/var/www/html\n      - ./wordpress/themes:/var/www/html/wp-content/themes\n      - ./wordpress/plugins:/var/www/html/wp-content/plugins\n    depends_on:\n      - mysql\n    networks:\n      - backend\n\n  mysql:\n    image: mysql:8.0\n    environment:\n      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n      - MYSQL_DATABASE=wordpress\n      - MYSQL_USER=wp_user\n      - MYSQL_PASSWORD=${WP_DB_PASSWORD}\n    volumes:\n      - mysql_data:/var/lib/mysql\n      - ./mysql/init:/docker-entrypoint-initdb.d\n    networks:\n      - backend\n    healthcheck:\n      test: [\"CMD\", \"mysqladmin\", \"ping\", \"-h\", \"localhost\"]\n      interval: 30s\n      timeout: 10s\n      retries: 5\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf\n      - ./nginx/ssl:/etc/nginx/ssl\n      - wordpress_data:/var/www/html\n    depends_on:\n      - wordpress\n    networks:\n      - backend\n\n  backup:\n    image: mysql:8.0\n    profiles:\n      - backup\n    volumes:\n      - mysql_data:/var/lib/mysql\n      - ./backups:/backups\n    networks:\n      - backend\n    command: /bin/bash -c \"sleep infinity\"\n\nvolumes:\n  wordpress_data:\n  mysql_data:\n\nnetworks:\n  backend:\n\n# Comandos personalizados\ncustom_commands:\n  backup-db:\n    description: \"Backup do banco de dados\"\n    script: |\n      TIMESTAMP=$(date +%Y%m%d_%H%M%S)\n      docker-pilot exec mysql mysqldump -u wp_user -p${WP_DB_PASSWORD} wordpress &gt; ./backups/wordpress_${TIMESTAMP}.sql\n      echo \"Backup criado: wordpress_${TIMESTAMP}.sql\"\n\n  restore-db:\n    description: \"Restaurar banco de dados\"\n    options:\n      backup_file:\n        type: \"string\"\n        required: true\n        description: \"Nome do arquivo de backup\"\n    script: |\n      docker-pilot exec mysql mysql -u wp_user -p${WP_DB_PASSWORD} wordpress &lt; ./backups/${BACKUP_FILE}\n      echo \"Banco restaurado de: ${BACKUP_FILE}\"\n\n  install-plugin:\n    description: \"Instalar plugin WordPress\"\n    options:\n      plugin_name:\n        type: \"string\"\n        required: true\n        description: \"Nome do plugin\"\n    script: |\n      docker-pilot exec wordpress wp plugin install ${PLUGIN_NAME} --activate\n      echo \"Plugin ${PLUGIN_NAME} instalado e ativado\"\n\n  update-all:\n    description: \"Atualizar WordPress e plugins\"\n    script: |\n      docker-pilot exec wordpress wp core update\n      docker-pilot exec wordpress wp plugin update --all\n      docker-pilot exec wordpress wp theme update --all\n      echo \"Atualiza\u00e7\u00f5es conclu\u00eddas\"\n\n# Workflows\nworkflows:\n  setup:\n    description: \"Setup inicial do blog\"\n    steps:\n      - name: \"Start database\"\n        commands:\n          - \"docker-pilot start mysql\"\n          - \"sleep 30\"\n\n      - name: \"Start WordPress\"\n        commands:\n          - \"docker-pilot start wordpress\"\n          - \"sleep 15\"\n\n      - name: \"Start Nginx\"\n        commands:\n          - \"docker-pilot start nginx\"\n\n      - name: \"Install WP-CLI\"\n        commands:\n          - \"docker-pilot exec wordpress curl -O https://raw.githubusercontent.com/wp-cli/wp-cli/v2.8.1/phar/wp-cli.phar\"\n          - \"docker-pilot exec wordpress chmod +x wp-cli.phar\"\n          - \"docker-pilot exec wordpress mv wp-cli.phar /usr/local/bin/wp\"\n\n  backup-full:\n    description: \"Backup completo (DB + arquivos)\"\n    steps:\n      - name: \"Backup database\"\n        commands:\n          - \"docker-pilot run backup-db\"\n\n      - name: \"Backup files\"\n        script: |\n          TIMESTAMP=$(date +%Y%m%d_%H%M%S)\n          tar -czf ./backups/wordpress_files_${TIMESTAMP}.tar.gz -C /var/lib/docker/volumes/blog-pessoal_wordpress_data/_data .\n          echo \"Backup de arquivos criado: wordpress_files_${TIMESTAMP}.tar.gz\"\n\n# Monitoramento\nmonitoring:\n  enabled: true\n  health_checks:\n    - name: \"wordpress_health\"\n      url: \"http://localhost/wp-admin/admin-ajax.php?action=heartbeat\"\n      interval: 60s\n\n    - name: \"mysql_health\"\n      command: \"docker-pilot exec mysql mysqladmin ping\"\n      interval: 30s\n\n# Automa\u00e7\u00e3o\nautomation:\n  scheduled_tasks:\n    - name: \"daily_backup\"\n      schedule: \"0 2 * * *\"\n      command: \"docker-pilot workflow run backup-full\"\n\n    - name: \"weekly_update\"\n      schedule: \"0 3 * * 0\"\n      command: \"docker-pilot run update-all\"\n</code></pre>"},{"location":"examples/projects/#arquivo-de-configuracao-nginx","title":"Arquivo de Configura\u00e7\u00e3o Nginx","text":"<pre><code># nginx/nginx.conf\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    server {\n        listen 80;\n        server_name localhost;\n        root /var/www/html;\n        index index.php index.html index.htm;\n\n        location / {\n            try_files $uri $uri/ /index.php?$args;\n        }\n\n        location ~ \\.php$ {\n            fastcgi_pass wordpress:9000;\n            fastcgi_index index.php;\n            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n            include fastcgi_params;\n        }\n\n        location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)$ {\n            expires 1y;\n            add_header Cache-Control \"public, immutable\";\n        }\n    }\n}\n</code></pre>"},{"location":"examples/projects/#e-commerce-magento-mysql-redis","title":"E-commerce (Magento + MySQL + Redis)","text":""},{"location":"examples/projects/#estrutura-do-projeto","title":"Estrutura do Projeto","text":"<pre><code>ecommerce/\n\u251c\u2500\u2500 docker-pilot.yml\n\u251c\u2500\u2500 docker-pilot.prod.yml\n\u251c\u2500\u2500 .env.example\n\u251c\u2500\u2500 magento/\n\u2502   \u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 var/\n\u2502   \u2514\u2500\u2500 pub/\n\u251c\u2500\u2500 mysql/\n\u2502   \u2514\u2500\u2500 init/\n\u251c\u2500\u2500 redis/\n\u2502   \u2514\u2500\u2500 redis.conf\n\u2514\u2500\u2500 nginx/\n    \u251c\u2500\u2500 nginx.conf\n    \u2514\u2500\u2500 ssl/\n</code></pre>"},{"location":"examples/projects/#configuracao-principal","title":"Configura\u00e7\u00e3o Principal","text":"<pre><code># docker-pilot.yml\nversion: \"1.0\"\n\nproject:\n  name: \"ecommerce-magento\"\n  description: \"Loja virtual com Magento 2\"\n\nservices:\n  magento:\n    image: magento/magento-cloud-docker-php:8.1-fpm\n    environment:\n      - MAGENTO_CLOUD_VARIABLES={\"ADMIN_EMAIL\":\"admin@example.com\"}\n      - MAGENTO_CLOUD_RELATIONSHIPS={\"database\":\"mysql\",\"redis\":\"redis\"}\n      - MAGENTO_CLOUD_ROUTES={\"http://localhost/\":\"magento\"}\n    volumes:\n      - magento_data:/var/www/html\n      - ./magento/app:/var/www/html/app\n      - ./magento/var:/var/www/html/var\n      - ./magento/pub:/var/www/html/pub\n    depends_on:\n      - mysql\n      - redis\n      - elasticsearch\n    networks:\n      - backend\n\n  mysql:\n    image: mysql:8.0\n    environment:\n      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n      - MYSQL_DATABASE=magento\n      - MYSQL_USER=magento_user\n      - MYSQL_PASSWORD=${MAGENTO_DB_PASSWORD}\n    volumes:\n      - mysql_data:/var/lib/mysql\n      - ./mysql/init:/docker-entrypoint-initdb.d\n    networks:\n      - backend\n    command: --default-authentication-plugin=mysql_native_password\n\n  redis:\n    image: redis:7-alpine\n    volumes:\n      - redis_data:/data\n      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf\n    networks:\n      - backend\n    command: redis-server /usr/local/etc/redis/redis.conf\n\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.0\n    environment:\n      - discovery.type=single-node\n      - \"ES_JAVA_OPTS=-Xms1g -Xmx1g\"\n    volumes:\n      - elasticsearch_data:/usr/share/elasticsearch/data\n    networks:\n      - backend\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf\n      - ./nginx/ssl:/etc/nginx/ssl\n      - magento_data:/var/www/html\n    depends_on:\n      - magento\n    networks:\n      - backend\n\n  mailhog:\n    image: mailhog/mailhog\n    ports:\n      - \"8025:8025\"\n    networks:\n      - backend\n\n  varnish:\n    image: varnish:7.0\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./varnish/default.vcl:/etc/varnish/default.vcl\n    depends_on:\n      - nginx\n    networks:\n      - backend\n    command: varnishd -F -f /etc/varnish/default.vcl -a :80 -T :6082\n\nvolumes:\n  magento_data:\n  mysql_data:\n  redis_data:\n  elasticsearch_data:\n\nnetworks:\n  backend:\n\n# Comandos personalizados\ncustom_commands:\n  magento-install:\n    description: \"Instalar Magento\"\n    script: |\n      docker-pilot exec magento bin/magento setup:install \\\n        --base-url=http://localhost/ \\\n        --db-host=mysql \\\n        --db-name=magento \\\n        --db-user=magento_user \\\n        --db-password=${MAGENTO_DB_PASSWORD} \\\n        --admin-firstname=Admin \\\n        --admin-lastname=User \\\n        --admin-email=admin@example.com \\\n        --admin-user=admin \\\n        --admin-password=${ADMIN_PASSWORD} \\\n        --language=pt_BR \\\n        --currency=BRL \\\n        --timezone=America/Sao_Paulo \\\n        --use-rewrites=1 \\\n        --search-engine=elasticsearch7 \\\n        --elasticsearch-host=elasticsearch \\\n        --elasticsearch-port=9200\n\n  magento-cache:\n    description: \"Gerenciar cache do Magento\"\n    options:\n      action:\n        type: \"string\"\n        choices: [\"clean\", \"flush\", \"status\", \"enable\", \"disable\"]\n        default: \"clean\"\n        description: \"A\u00e7\u00e3o do cache\"\n    script: |\n      case $ACTION in\n        \"clean\")\n          docker-pilot exec magento bin/magento cache:clean\n          ;;\n        \"flush\")\n          docker-pilot exec magento bin/magento cache:flush\n          ;;\n        \"status\")\n          docker-pilot exec magento bin/magento cache:status\n          ;;\n        \"enable\")\n          docker-pilot exec magento bin/magento cache:enable\n          ;;\n        \"disable\")\n          docker-pilot exec magento bin/magento cache:disable\n          ;;\n      esac\n\n  magento-reindex:\n    description: \"Reindexar Magento\"\n    script: |\n      docker-pilot exec magento bin/magento indexer:reindex\n      echo \"Reindexa\u00e7\u00e3o conclu\u00edda\"\n\n  magento-deploy:\n    description: \"Deploy de arquivos est\u00e1ticos\"\n    options:\n      mode:\n        type: \"string\"\n        choices: [\"developer\", \"production\"]\n        default: \"developer\"\n        description: \"Modo de deploy\"\n    script: |\n      docker-pilot exec magento bin/magento deploy:mode:set $MODE\n      docker-pilot exec magento bin/magento setup:static-content:deploy pt_BR\n      docker-pilot exec magento bin/magento setup:di:compile\n\n  import-products:\n    description: \"Importar produtos\"\n    options:\n      csv_file:\n        type: \"string\"\n        required: true\n        description: \"Arquivo CSV com produtos\"\n    script: |\n      docker cp ${CSV_FILE} magento:/var/www/html/var/import/products.csv\n      docker-pilot exec magento bin/magento import:run products\n\n# Workflows\nworkflows:\n  setup-complete:\n    description: \"Setup completo do e-commerce\"\n    steps:\n      - name: \"Start infrastructure\"\n        commands:\n          - \"docker-pilot start mysql redis elasticsearch\"\n          - \"sleep 60\"\n\n      - name: \"Start Magento\"\n        commands:\n          - \"docker-pilot start magento\"\n          - \"sleep 30\"\n\n      - name: \"Install Magento\"\n        commands:\n          - \"docker-pilot run magento-install\"\n\n      - name: \"Configure Magento\"\n        commands:\n          - \"docker-pilot run magento-cache --action enable\"\n          - \"docker-pilot run magento-reindex\"\n          - \"docker-pilot run magento-deploy --mode production\"\n\n      - name: \"Start web services\"\n        commands:\n          - \"docker-pilot start nginx varnish mailhog\"\n\n  production-deploy:\n    description: \"Deploy para produ\u00e7\u00e3o\"\n    confirmation: true\n    steps:\n      - name: \"Maintenance mode\"\n        commands:\n          - \"docker-pilot exec magento bin/magento maintenance:enable\"\n\n      - name: \"Update code\"\n        commands:\n          - \"git pull origin main\"\n          - \"docker-pilot exec magento composer install --no-dev --optimize-autoloader\"\n\n      - name: \"Deploy\"\n        commands:\n          - \"docker-pilot run magento-deploy --mode production\"\n          - \"docker-pilot run magento-reindex\"\n          - \"docker-pilot run magento-cache --action flush\"\n\n      - name: \"Disable maintenance\"\n        commands:\n          - \"docker-pilot exec magento bin/magento maintenance:disable\"\n\n# Monitoramento\nmonitoring:\n  enabled: true\n  health_checks:\n    - name: \"magento_health\"\n      url: \"http://localhost/health_check.php\"\n      interval: 60s\n\n    - name: \"mysql_health\"\n      command: \"docker-pilot exec mysql mysqladmin ping\"\n      interval: 30s\n\n    - name: \"elasticsearch_health\"\n      url: \"http://elasticsearch:9200/_cluster/health\"\n      interval: 60s\n\n  alerts:\n    - name: \"high_response_time\"\n      condition: \"response_time &gt; 5000\"\n      actions: [\"email\", \"slack\"]\n\n    - name: \"low_disk_space\"\n      condition: \"disk_usage &gt; 85\"\n      actions: [\"email\", \"cleanup\"]\n</code></pre>"},{"location":"examples/projects/#sistema-de-chat-nodejs-redis-mongodb","title":"Sistema de Chat (Node.js + Redis + MongoDB)","text":""},{"location":"examples/projects/#estrutura-do-projeto_1","title":"Estrutura do Projeto","text":"<pre><code>chat-system/\n\u251c\u2500\u2500 docker-pilot.yml\n\u251c\u2500\u2500 docker-pilot.dev.yml\n\u251c\u2500\u2500 .env.example\n\u251c\u2500\u2500 backend/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 frontend/\n\u2502   \u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 package.json\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 nginx/\n\u2502   \u2514\u2500\u2500 nginx.conf\n\u2514\u2500\u2500 monitoring/\n    \u251c\u2500\u2500 prometheus.yml\n    \u2514\u2500\u2500 grafana/\n</code></pre>"},{"location":"examples/projects/#configuracao-principal_1","title":"Configura\u00e7\u00e3o Principal","text":"<pre><code># docker-pilot.yml\nversion: \"1.0\"\n\nproject:\n  name: \"chat-system\"\n  description: \"Sistema de chat em tempo real\"\n\nservices:\n  # Backend API\n  backend:\n    build: ./backend\n    environment:\n      - NODE_ENV=production\n      - MONGODB_URL=mongodb://mongodb:27017/chat\n      - REDIS_URL=redis://redis:6379\n      - JWT_SECRET=${JWT_SECRET}\n      - PORT=3000\n    depends_on:\n      - mongodb\n      - redis\n    networks:\n      - backend\n    deploy:\n      replicas: 3\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:3000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  # Frontend\n  frontend:\n    build: ./frontend\n    environment:\n      - REACT_APP_API_URL=http://localhost/api\n      - REACT_APP_WS_URL=ws://localhost/ws\n    networks:\n      - frontend\n\n  # Banco de dados\n  mongodb:\n    image: mongo:6.0\n    environment:\n      - MONGO_INITDB_ROOT_USERNAME=admin\n      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}\n      - MONGO_INITDB_DATABASE=chat\n    volumes:\n      - mongodb_data:/data/db\n      - ./mongodb/init:/docker-entrypoint-initdb.d\n    networks:\n      - backend\n\n  # Cache e pub/sub\n  redis:\n    image: redis:7-alpine\n    command: redis-server --appendonly yes\n    volumes:\n      - redis_data:/data\n    networks:\n      - backend\n\n  # Load balancer\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/nginx.conf\n      - ./nginx/ssl:/etc/nginx/ssl\n    depends_on:\n      - backend\n      - frontend\n    networks:\n      - frontend\n      - backend\n\n  # Monitoramento\n  prometheus:\n    image: prom/prometheus\n    ports:\n      - \"9090:9090\"\n    volumes:\n      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    networks:\n      - backend\n\n  grafana:\n    image: grafana/grafana\n    ports:\n      - \"3001:3000\"\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}\n    volumes:\n      - grafana_data:/var/lib/grafana\n      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards\n    networks:\n      - backend\n\n  # Workers para processamento\n  message-processor:\n    build: ./backend\n    command: npm run worker:messages\n    environment:\n      - NODE_ENV=production\n      - MONGODB_URL=mongodb://mongodb:27017/chat\n      - REDIS_URL=redis://redis:6379\n    depends_on:\n      - mongodb\n      - redis\n    networks:\n      - backend\n    deploy:\n      replicas: 2\n\n  notification-service:\n    build: ./backend\n    command: npm run worker:notifications\n    environment:\n      - NODE_ENV=production\n      - MONGODB_URL=mongodb://mongodb:27017/chat\n      - REDIS_URL=redis://redis:6379\n      - SMTP_HOST=${SMTP_HOST}\n      - SMTP_USER=${SMTP_USER}\n      - SMTP_PASS=${SMTP_PASS}\n    depends_on:\n      - mongodb\n      - redis\n    networks:\n      - backend\n\nvolumes:\n  mongodb_data:\n  redis_data:\n  prometheus_data:\n  grafana_data:\n\nnetworks:\n  frontend:\n  backend:\n\n# Comandos personalizados\ncustom_commands:\n  db-seed:\n    description: \"Popular banco com dados de teste\"\n    script: |\n      docker-pilot exec backend npm run db:seed\n      echo \"Banco populado com dados de teste\"\n\n  create-room:\n    description: \"Criar sala de chat\"\n    options:\n      name:\n        type: \"string\"\n        required: true\n        description: \"Nome da sala\"\n      description:\n        type: \"string\"\n        description: \"Descri\u00e7\u00e3o da sala\"\n    script: |\n      docker-pilot exec backend node scripts/create-room.js --name \"$NAME\" --description \"$DESCRIPTION\"\n      echo \"Sala '$NAME' criada com sucesso\"\n\n  stats:\n    description: \"Estat\u00edsticas do sistema\"\n    script: |\n      echo \"=== Estat\u00edsticas do Chat ===\"\n      echo \"Usu\u00e1rios online: $(docker-pilot exec backend node scripts/stats.js --metric online-users)\"\n      echo \"Mensagens hoje: $(docker-pilot exec backend node scripts/stats.js --metric messages-today)\"\n      echo \"Salas ativas: $(docker-pilot exec backend node scripts/stats.js --metric active-rooms)\"\n\n  load-test:\n    description: \"Teste de carga\"\n    options:\n      concurrent_users:\n        type: \"number\"\n        default: 100\n        description: \"N\u00famero de usu\u00e1rios simult\u00e2neos\"\n      duration:\n        type: \"string\"\n        default: \"5m\"\n        description: \"Dura\u00e7\u00e3o do teste\"\n    script: |\n      docker run --rm --network chat-system_backend \\\n        loadimpact/k6 run \\\n        --vus $CONCURRENT_USERS \\\n        --duration $DURATION \\\n        /scripts/load-test.js\n\n  backup-messages:\n    description: \"Backup das mensagens\"\n    script: |\n      TIMESTAMP=$(date +%Y%m%d_%H%M%S)\n      docker-pilot exec mongodb mongodump --db chat --collection messages --out /backup/messages_$TIMESTAMP\n      echo \"Backup das mensagens: messages_$TIMESTAMP\"\n\n# Workflows\nworkflows:\n  dev-setup:\n    description: \"Setup ambiente de desenvolvimento\"\n    steps:\n      - name: \"Start infrastructure\"\n        commands:\n          - \"docker-pilot start mongodb redis\"\n          - \"sleep 15\"\n\n      - name: \"Run migrations\"\n        commands:\n          - \"docker-pilot exec backend npm run db:migrate\"\n\n      - name: \"Seed database\"\n        commands:\n          - \"docker-pilot run db-seed\"\n\n      - name: \"Start services\"\n        commands:\n          - \"docker-pilot start backend message-processor notification-service\"\n          - \"docker-pilot start frontend nginx\"\n\n  production-deploy:\n    description: \"Deploy para produ\u00e7\u00e3o\"\n    confirmation: true\n    steps:\n      - name: \"Pre-deploy checks\"\n        commands:\n          - \"docker-pilot run load-test --concurrent_users 50 --duration 1m\"\n          - \"docker-pilot health --all\"\n\n      - name: \"Backup data\"\n        commands:\n          - \"docker-pilot run backup-messages\"\n\n      - name: \"Rolling deployment\"\n        commands:\n          - \"docker-pilot deploy rolling --batch-size 1\"\n          - \"docker-pilot health --timeout 300s\"\n\n      - name: \"Post-deploy verification\"\n        commands:\n          - \"docker-pilot run stats\"\n          - \"docker-pilot run load-test --concurrent_users 10 --duration 30s\"\n\n  scale-up:\n    description: \"Escalar sistema para alta demanda\"\n    steps:\n      - name: \"Scale backend\"\n        commands:\n          - \"docker-pilot scale backend 5\"\n\n      - name: \"Scale workers\"\n        commands:\n          - \"docker-pilot scale message-processor 3\"\n          - \"docker-pilot scale notification-service 2\"\n\n      - name: \"Update load balancer\"\n        commands:\n          - \"docker-pilot restart nginx\"\n\n# Monitoramento\nmonitoring:\n  enabled: true\n\n  metrics:\n    - name: \"active_connections\"\n      command: \"docker-pilot exec backend node scripts/metrics.js --metric connections\"\n      interval: 30s\n\n    - name: \"messages_per_minute\"\n      command: \"docker-pilot exec backend node scripts/metrics.js --metric messages-rate\"\n      interval: 60s\n\n    - name: \"redis_memory\"\n      command: \"docker-pilot exec redis redis-cli info memory | grep used_memory_human\"\n      interval: 60s\n\n  alerts:\n    - name: \"high_connections\"\n      condition: \"active_connections &gt; 1000\"\n      actions: [\"scale_backend\", \"slack\"]\n\n    - name: \"high_message_rate\"\n      condition: \"messages_per_minute &gt; 10000\"\n      actions: [\"scale_workers\", \"email\"]\n\n    - name: \"redis_memory_high\"\n      condition: \"redis_memory &gt; 1GB\"\n      actions: [\"cleanup_redis\", \"email\"]\n\n# Automa\u00e7\u00e3o\nautomation:\n  scheduled_tasks:\n    - name: \"daily_backup\"\n      schedule: \"0 2 * * *\"\n      command: \"docker-pilot run backup-messages\"\n\n    - name: \"weekly_stats\"\n      schedule: \"0 9 * * 1\"\n      command: \"docker-pilot run stats\"\n\n    - name: \"cleanup_old_messages\"\n      schedule: \"0 3 * * *\"\n      command: \"docker-pilot exec backend node scripts/cleanup-old-messages.js\"\n\n  file_watchers:\n    - pattern: \"./backend/src/**/*.js\"\n      command: \"docker-pilot restart backend\"\n      debounce: 2000\n\n    - pattern: \"./frontend/src/**/*.js\"\n      command: \"docker-pilot restart frontend\"\n      debounce: 2000\n</code></pre>"},{"location":"examples/projects/#configuracao-de-desenvolvimento","title":"Configura\u00e7\u00e3o de Desenvolvimento","text":"<pre><code># docker-pilot.dev.yml\nextends:\n  file: docker-pilot.yml\n\nservices:\n  backend:\n    volumes:\n      - ./backend:/app\n      - /app/node_modules\n    command: npm run dev\n    environment:\n      - NODE_ENV=development\n      - DEBUG=*\n    ports:\n      - \"3000:3000\"\n\n  frontend:\n    volumes:\n      - ./frontend:/app\n      - /app/node_modules\n    command: npm start\n    environment:\n      - CHOKIDAR_USEPOLLING=true\n    ports:\n      - \"3001:3000\"\n\n  # Remover nginx em desenvolvimento\n  nginx:\n    profiles:\n      - production\n\n# Comandos espec\u00edficos para dev\ncustom_commands:\n  dev-logs:\n    description: \"Logs de desenvolvimento\"\n    script: |\n      docker-pilot logs backend frontend --follow --merge\n\n  dev-test:\n    description: \"Executar testes em desenvolvimento\"\n    script: |\n      docker-pilot exec backend npm test -- --watch\n</code></pre>"},{"location":"examples/projects/#sistema-de-analise-de-dados-python-jupyter-postgresql","title":"Sistema de An\u00e1lise de Dados (Python + Jupyter + PostgreSQL)","text":""},{"location":"examples/projects/#estrutura-do-projeto_2","title":"Estrutura do Projeto","text":"<pre><code>data-analytics/\n\u251c\u2500\u2500 docker-pilot.yml\n\u251c\u2500\u2500 .env.example\n\u251c\u2500\u2500 notebooks/\n\u2502   \u251c\u2500\u2500 exploratory/\n\u2502   \u2514\u2500\u2500 reports/\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 etl/\n\u2502   \u2514\u2500\u2500 analysis/\n\u251c\u2500\u2500 data/\n\u2502   \u251c\u2500\u2500 raw/\n\u2502   \u2514\u2500\u2500 processed/\n\u2514\u2500\u2500 postgres/\n    \u2514\u2500\u2500 init/\n</code></pre>"},{"location":"examples/projects/#configuracao-principal_2","title":"Configura\u00e7\u00e3o Principal","text":"<pre><code># docker-pilot.yml\nversion: \"1.0\"\n\nproject:\n  name: \"data-analytics\"\n  description: \"Sistema de an\u00e1lise de dados\"\n\nservices:\n  # Jupyter Lab\n  jupyter:\n    image: jupyter/datascience-notebook:latest\n    ports:\n      - \"8888:8888\"\n    environment:\n      - JUPYTER_ENABLE_LAB=yes\n      - JUPYTER_TOKEN=${JUPYTER_TOKEN}\n    volumes:\n      - ./notebooks:/home/jovyan/work/notebooks\n      - ./data:/home/jovyan/work/data\n      - ./scripts:/home/jovyan/work/scripts\n    networks:\n      - analytics\n\n  # PostgreSQL\n  postgres:\n    image: postgres:14\n    environment:\n      - POSTGRES_DB=analytics\n      - POSTGRES_USER=analyst\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./postgres/init:/docker-entrypoint-initdb.d\n      - ./data:/data\n    networks:\n      - analytics\n    ports:\n      - \"5432:5432\"\n\n  # Apache Airflow\n  airflow-webserver:\n    image: apache/airflow:2.7.0\n    environment:\n      - AIRFLOW__CORE__EXECUTOR=LocalExecutor\n      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow\n      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true\n      - AIRFLOW__CORE__LOAD_EXAMPLES=false\n    volumes:\n      - ./airflow/dags:/opt/airflow/dags\n      - ./airflow/logs:/opt/airflow/logs\n      - ./airflow/plugins:/opt/airflow/plugins\n      - ./data:/data\n    ports:\n      - \"8080:8080\"\n    networks:\n      - analytics\n    depends_on:\n      - postgres\n    command: webserver\n\n  airflow-scheduler:\n    image: apache/airflow:2.7.0\n    environment:\n      - AIRFLOW__CORE__EXECUTOR=LocalExecutor\n      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow\n    volumes:\n      - ./airflow/dags:/opt/airflow/dags\n      - ./airflow/logs:/opt/airflow/logs\n      - ./airflow/plugins:/opt/airflow/plugins\n      - ./data:/data\n    networks:\n      - analytics\n    depends_on:\n      - postgres\n    command: scheduler\n\n  # Apache Superset\n  superset:\n    image: apache/superset:latest\n    ports:\n      - \"8088:8088\"\n    environment:\n      - SUPERSET_SECRET_KEY=${SUPERSET_SECRET_KEY}\n    volumes:\n      - superset_data:/app/superset_home\n    networks:\n      - analytics\n    depends_on:\n      - postgres\n\n  # MinIO (S3 compatible)\n  minio:\n    image: minio/minio:latest\n    ports:\n      - \"9000:9000\"\n      - \"9001:9001\"\n    environment:\n      - MINIO_ROOT_USER=${MINIO_USER}\n      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}\n    volumes:\n      - minio_data:/data\n    networks:\n      - analytics\n    command: server /data --console-address \":9001\"\n\n  # Redis para cache\n  redis:\n    image: redis:7-alpine\n    volumes:\n      - redis_data:/data\n    networks:\n      - analytics\n\n  # Metabase\n  metabase:\n    image: metabase/metabase:latest\n    ports:\n      - \"3000:3000\"\n    environment:\n      - MB_DB_TYPE=postgres\n      - MB_DB_DBNAME=metabase\n      - MB_DB_PORT=5432\n      - MB_DB_USER=metabase\n      - MB_DB_PASS=${METABASE_DB_PASSWORD}\n      - MB_DB_HOST=postgres\n    networks:\n      - analytics\n    depends_on:\n      - postgres\n\nvolumes:\n  postgres_data:\n  superset_data:\n  minio_data:\n  redis_data:\n\nnetworks:\n  analytics:\n\n# Comandos personalizados\ncustom_commands:\n  run-analysis:\n    description: \"Executar an\u00e1lise espec\u00edfica\"\n    options:\n      notebook:\n        type: \"string\"\n        required: true\n        description: \"Nome do notebook\"\n    script: |\n      docker-pilot exec jupyter jupyter nbconvert --execute --to notebook --inplace /home/jovyan/work/notebooks/${NOTEBOOK}.ipynb\n      echo \"An\u00e1lise executada: ${NOTEBOOK}\"\n\n  export-data:\n    description: \"Exportar dados do PostgreSQL\"\n    options:\n      table:\n        type: \"string\"\n        required: true\n        description: \"Nome da tabela\"\n      format:\n        type: \"string\"\n        choices: [\"csv\", \"json\", \"parquet\"]\n        default: \"csv\"\n        description: \"Formato de exporta\u00e7\u00e3o\"\n    script: |\n      case $FORMAT in\n        \"csv\")\n          docker-pilot exec postgres psql -U analyst -d analytics -c \"\\copy ${TABLE} TO '/data/exports/${TABLE}.csv' DELIMITER ',' CSV HEADER\"\n          ;;\n        \"json\")\n          docker-pilot exec postgres psql -U analyst -d analytics -c \"SELECT json_agg(row_to_json(t)) FROM (SELECT * FROM ${TABLE}) t\" -t -o /data/exports/${TABLE}.json\n          ;;\n        \"parquet\")\n          docker-pilot exec jupyter python -c \"\nimport pandas as pd\nimport psycopg2\nconn = psycopg2.connect(host='postgres', database='analytics', user='analyst', password='${POSTGRES_PASSWORD}')\ndf = pd.read_sql('SELECT * FROM ${TABLE}', conn)\ndf.to_parquet('/home/jovyan/work/data/exports/${TABLE}.parquet')\n\"\n          ;;\n      esac\n      echo \"Dados exportados: ${TABLE}.${FORMAT}\"\n\n  run-etl:\n    description: \"Executar pipeline ETL\"\n    options:\n      pipeline:\n        type: \"string\"\n        required: true\n        description: \"Nome do pipeline\"\n    script: |\n      docker-pilot exec jupyter python /home/jovyan/work/scripts/etl/${PIPELINE}.py\n      echo \"ETL executado: ${PIPELINE}\"\n\n  generate-report:\n    description: \"Gerar relat\u00f3rio\"\n    options:\n      report_type:\n        type: \"string\"\n        choices: [\"daily\", \"weekly\", \"monthly\"]\n        required: true\n        description: \"Tipo de relat\u00f3rio\"\n    script: |\n      TIMESTAMP=$(date +%Y%m%d_%H%M%S)\n      docker-pilot exec jupyter jupyter nbconvert --execute --to html /home/jovyan/work/notebooks/reports/${REPORT_TYPE}_report.ipynb --output /home/jovyan/work/data/reports/${REPORT_TYPE}_report_${TIMESTAMP}.html\n      echo \"Relat\u00f3rio gerado: ${REPORT_TYPE}_report_${TIMESTAMP}.html\"\n\n  backup-data:\n    description: \"Backup completo dos dados\"\n    script: |\n      TIMESTAMP=$(date +%Y%m%d_%H%M%S)\n\n      # Backup PostgreSQL\n      docker-pilot exec postgres pg_dump -U analyst analytics &gt; ./backups/postgres_${TIMESTAMP}.sql\n\n      # Backup MinIO\n      docker-pilot exec minio mc mirror /data ./backups/minio_${TIMESTAMP}/\n\n      # Backup notebooks\n      tar -czf ./backups/notebooks_${TIMESTAMP}.tar.gz notebooks/\n\n      echo \"Backup completo criado: ${TIMESTAMP}\"\n\n# Workflows\nworkflows:\n  setup-environment:\n    description: \"Setup completo do ambiente de an\u00e1lise\"\n    steps:\n      - name: \"Start infrastructure\"\n        commands:\n          - \"docker-pilot start postgres redis minio\"\n          - \"sleep 30\"\n\n      - name: \"Initialize databases\"\n        commands:\n          - \"docker-pilot exec postgres createdb -U analyst metabase\"\n          - \"docker-pilot exec postgres createdb -U analyst airflow\"\n\n      - name: \"Start Airflow\"\n        commands:\n          - \"docker-pilot exec airflow-webserver airflow db init\"\n          - \"docker-pilot start airflow-webserver airflow-scheduler\"\n\n      - name: \"Start analysis tools\"\n        commands:\n          - \"docker-pilot start jupyter superset metabase\"\n\n      - name: \"Setup MinIO buckets\"\n        commands:\n          - \"docker-pilot exec minio mc config host add local http://localhost:9000 ${MINIO_USER} ${MINIO_PASSWORD}\"\n          - \"docker-pilot exec minio mc mb local/raw-data\"\n          - \"docker-pilot exec minio mc mb local/processed-data\"\n\n  daily-analysis:\n    description: \"An\u00e1lise di\u00e1ria automatizada\"\n    steps:\n      - name: \"Extract data\"\n        commands:\n          - \"docker-pilot run run-etl --pipeline daily_extract\"\n\n      - name: \"Process data\"\n        commands:\n          - \"docker-pilot run run-analysis --notebook daily_processing\"\n\n      - name: \"Generate reports\"\n        commands:\n          - \"docker-pilot run generate-report --report_type daily\"\n\n      - name: \"Update dashboards\"\n        commands:\n          - \"docker-pilot exec superset superset refresh-dashboards\"\n\n# Monitoramento\nmonitoring:\n  enabled: true\n\n  metrics:\n    - name: \"postgres_connections\"\n      command: \"docker-pilot exec postgres psql -U analyst -d analytics -c 'SELECT count(*) FROM pg_stat_activity' -t\"\n      interval: 60s\n\n    - name: \"disk_usage\"\n      command: \"df -h /data | tail -1 | awk '{print $5}' | sed 's/%//'\"\n      interval: 300s\n\n  alerts:\n    - name: \"high_disk_usage\"\n      condition: \"disk_usage &gt; 85\"\n      actions: [\"cleanup\", \"email\"]\n\n    - name: \"postgres_overload\"\n      condition: \"postgres_connections &gt; 50\"\n      actions: [\"email\", \"slack\"]\n\n# Automa\u00e7\u00e3o\nautomation:\n  scheduled_tasks:\n    - name: \"daily_analysis\"\n      schedule: \"0 6 * * *\"\n      command: \"docker-pilot workflow run daily-analysis\"\n\n    - name: \"weekly_backup\"\n      schedule: \"0 2 * * 0\"\n      command: \"docker-pilot run backup-data\"\n\n    - name: \"monthly_report\"\n      schedule: \"0 9 1 * *\"\n      command: \"docker-pilot run generate-report --report_type monthly\"\n</code></pre>"},{"location":"examples/projects/#veja-tambem","title":"Veja Tamb\u00e9m","text":"<ul> <li>Exemplos B\u00e1sicos</li> <li>Exemplos Avan\u00e7ados</li> <li>Plugins</li> <li>Configura\u00e7\u00e3o</li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Learn how to configure Docker Pilot for your specific needs.</p>"},{"location":"getting-started/configuration/#configuration-file","title":"Configuration File","text":"<p>Docker Pilot uses a <code>docker-pilot.config.json</code> file to store project-specific settings. This file is automatically created when you first run Docker Pilot in a directory.</p>"},{"location":"getting-started/configuration/#location","title":"Location","text":"<p>The configuration file is created in your project root directory:</p> <pre><code>your-project/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 docker-pilot.config.json  \u2190 Configuration file\n\u2514\u2500\u2500 ...\n</code></pre>"},{"location":"getting-started/configuration/#basic-configuration","title":"Basic Configuration","text":"<p>Here's a basic configuration file:</p> <pre><code>{\n  \"projectName\": \"my-awesome-app\",\n  \"dockerCompose\": \"docker compose\",\n  \"language\": \"en\",\n  \"configVersion\": \"2.0\",\n  \"services\": {\n    \"web\": {\n      \"port\": 8080,\n      \"healthCheck\": true,\n      \"priority\": 1\n    },\n    \"api\": {\n      \"port\": 3000,\n      \"healthCheck\": true,\n      \"priority\": 2\n    },\n    \"database\": {\n      \"port\": 5432,\n      \"healthCheck\": true,\n      \"priority\": 3\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#configuration-options","title":"Configuration Options","text":""},{"location":"getting-started/configuration/#core-settings","title":"Core Settings","text":"Option Type Description Default <code>projectName</code> string Display name for your project Directory name <code>dockerCompose</code> string Docker Compose command to use <code>\"docker compose\"</code> <code>language</code> string Interface language (<code>en</code> or <code>pt-br</code>) System language <code>configVersion</code> string Configuration file version <code>\"2.0\"</code>"},{"location":"getting-started/configuration/#service-configuration","title":"Service Configuration","text":"<p>Each service in your Docker Compose file can have specific settings:</p> <pre><code>{\n  \"services\": {\n    \"service-name\": {\n      \"port\": 8080,\n      \"healthCheck\": true,\n      \"priority\": 1,\n      \"autoStart\": true,\n      \"environment\": {\n        \"NODE_ENV\": \"development\"\n      },\n      \"volumes\": [\"./data:/app/data\"],\n      \"scaling\": {\n        \"min\": 1,\n        \"max\": 5,\n        \"default\": 1\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#service-options","title":"Service Options","text":"Option Type Description Default <code>port</code> number Main port for the service Auto-detected <code>healthCheck</code> boolean Enable health monitoring <code>true</code> <code>priority</code> number Startup priority (lower = first) Order in compose file <code>autoStart</code> boolean Start with \"start all\" command <code>true</code> <code>environment</code> object Additional environment variables <code>{}</code> <code>volumes</code> array Additional volume mappings <code>[]</code> <code>scaling</code> object Scaling configuration Auto-detected"},{"location":"getting-started/configuration/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/configuration/#cli-settings","title":"CLI Settings","text":"<pre><code>{\n  \"cli\": {\n    \"defaultCommand\": \"interactive\",\n    \"logLevel\": \"info\",\n    \"colorOutput\": true,\n    \"showTimestamps\": true,\n    \"confirmDestructive\": true\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#monitoring-settings","title":"Monitoring Settings","text":"<pre><code>{\n  \"monitoring\": {\n    \"enabled\": true,\n    \"refreshInterval\": 5,\n    \"alerts\": {\n      \"enabled\": true,\n      \"thresholds\": {\n        \"cpu\": 80,\n        \"memory\": 85,\n        \"disk\": 90\n      }\n    },\n    \"healthCheck\": {\n      \"interval\": 30,\n      \"timeout\": 10,\n      \"retries\": 3\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#backup-settings","title":"Backup Settings","text":"<pre><code>{\n  \"backup\": {\n    \"enabled\": false,\n    \"path\": \"./backups\",\n    \"retention\": 7,\n    \"schedule\": \"0 2 * * *\",\n    \"compression\": true,\n    \"exclude\": [\"node_modules\", \"*.log\"]\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#development-settings","title":"Development Settings","text":"<pre><code>{\n  \"development\": {\n    \"hotReload\": true,\n    \"debugMode\": false,\n    \"profileMemory\": false,\n    \"watchFiles\": [\"src/**/*\", \"public/**/*\"],\n    \"ignoreFiles\": [\"**/*.log\", \"**/node_modules/**\"]\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#environment-specific-configuration","title":"Environment-Specific Configuration","text":"<p>You can have different configurations for different environments:</p>"},{"location":"getting-started/configuration/#docker-pilotconfigdevelopmentjson","title":"docker-pilot.config.development.json","text":"<pre><code>{\n  \"extends\": \"./docker-pilot.config.json\",\n  \"development\": {\n    \"hotReload\": true,\n    \"debugMode\": true\n  },\n  \"services\": {\n    \"web\": {\n      \"environment\": {\n        \"NODE_ENV\": \"development\",\n        \"DEBUG\": \"*\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#docker-pilotconfigproductionjson","title":"docker-pilot.config.production.json","text":"<pre><code>{\n  \"extends\": \"./docker-pilot.config.json\",\n  \"monitoring\": {\n    \"enabled\": true,\n    \"alerts\": {\n      \"enabled\": true\n    }\n  },\n  \"services\": {\n    \"web\": {\n      \"scaling\": {\n        \"default\": 3,\n        \"max\": 10\n      }\n    }\n  }\n}\n</code></pre> <p>Use specific configurations:</p> <pre><code># Development environment\ndocker-pilot --config docker-pilot.config.development.json\n\n# Production environment\ndocker-pilot --config docker-pilot.config.production.json\n</code></pre>"},{"location":"getting-started/configuration/#configuration-management","title":"Configuration Management","text":""},{"location":"getting-started/configuration/#view-current-configuration","title":"View Current Configuration","text":"<pre><code># Show current configuration\ndocker-pilot config --show\n\n# Show configuration for specific service\ndocker-pilot config --show --service web\n\n# Show configuration in different formats\ndocker-pilot config --show --format yaml\ndocker-pilot config --show --format table\n</code></pre>"},{"location":"getting-started/configuration/#validate-configuration","title":"Validate Configuration","text":"<pre><code># Validate configuration file\ndocker-pilot config --validate\n\n# Validate specific configuration file\ndocker-pilot config --validate --config custom.config.json\n</code></pre>"},{"location":"getting-started/configuration/#reset-configuration","title":"Reset Configuration","text":"<pre><code># Reset to default configuration\ndocker-pilot config --reset\n\n# Reset specific service configuration\ndocker-pilot config --reset --service web\n</code></pre>"},{"location":"getting-started/configuration/#interactive-configuration","title":"Interactive Configuration","text":"<p>Use the interactive menu to configure settings:</p> <ol> <li>Start Docker Pilot: <code>docker-pilot</code></li> <li>Navigate to Advanced settings (option 15)</li> <li>Choose Configuration management</li> <li>Select the setting you want to modify</li> </ol>"},{"location":"getting-started/configuration/#language-configuration","title":"Language Configuration","text":"<p>Change language in the interactive menu:</p> <ol> <li>Go to Advanced settings</li> <li>Select Change language</li> <li>Choose your preferred language</li> <li>Configuration is automatically saved</li> </ol>"},{"location":"getting-started/configuration/#configuration-best-practices","title":"Configuration Best Practices","text":""},{"location":"getting-started/configuration/#1-version-control","title":"1. Version Control","text":"<p>Add configuration to version control but exclude sensitive data:</p> <pre><code># Include base configuration\n!docker-pilot.config.json\n\n# Exclude environment-specific configs with secrets\ndocker-pilot.config.local.json\ndocker-pilot.config.*.local.json\n</code></pre>"},{"location":"getting-started/configuration/#2-environment-variables","title":"2. Environment Variables","text":"<p>Use environment variables for sensitive data:</p> <pre><code>{\n  \"services\": {\n    \"database\": {\n      \"environment\": {\n        \"POSTGRES_PASSWORD\": \"${DATABASE_PASSWORD}\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#3-service-priorities","title":"3. Service Priorities","text":"<p>Set startup priorities for dependent services:</p> <pre><code>{\n  \"services\": {\n    \"database\": { \"priority\": 1 },\n    \"redis\": { \"priority\": 2 },\n    \"api\": { \"priority\": 3 },\n    \"web\": { \"priority\": 4 }\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#4-health-checks","title":"4. Health Checks","text":"<p>Configure appropriate health checks:</p> <pre><code>{\n  \"services\": {\n    \"web\": {\n      \"healthCheck\": true,\n      \"healthCheckUrl\": \"http://localhost:8080/health\"\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"getting-started/configuration/#common-issues","title":"Common Issues","text":"<p>Configuration file not found: - Run <code>docker-pilot</code> in your project directory - Configuration will be auto-generated</p> <p>Invalid JSON syntax: <pre><code># Validate configuration\ndocker-pilot config --validate\n</code></pre></p> <p>Service not recognized: - Make sure service name matches your docker-compose.yml - Check spelling and case sensitivity</p> <p>Port conflicts: - Use different ports for each service - Check for system processes using the same ports</p>"},{"location":"getting-started/configuration/#migration-from-v1x","title":"Migration from v1.x","text":"<p>If you have an old configuration file:</p> <pre><code># Migrate configuration\ndocker-pilot config --migrate\n\n# Or start fresh\ndocker-pilot config --reset\n</code></pre>"},{"location":"getting-started/configuration/#whats-next","title":"What's Next?","text":"<ul> <li>\ud83d\ude80 Learn about First Steps</li> <li>\ud83c\udfae Explore the Interactive Menu</li> <li>\ud83d\udd27 Try Advanced Features</li> </ul> <p>Pro Tip</p> <p>Start with the basic configuration and gradually add advanced features as needed. The interactive menu can help you configure most settings without editing JSON files manually!</p>"},{"location":"getting-started/first-steps/","title":"First Steps","text":"<p>A detailed walkthrough for beginners getting started with Docker Pilot.</p>"},{"location":"getting-started/first-steps/#welcome-to-docker-pilot","title":"Welcome to Docker Pilot! \ud83d\udc4b","text":"<p>This guide will walk you through everything you need to know to get started with Docker Pilot, from basic concepts to your first successful container management experience.</p>"},{"location":"getting-started/first-steps/#understanding-docker-pilot","title":"Understanding Docker Pilot","text":""},{"location":"getting-started/first-steps/#what-docker-pilot-does","title":"What Docker Pilot Does","text":"<p>Docker Pilot is a friendly interface that sits on top of Docker Compose, making it easier to:</p> <ul> <li>Manage Services: Start, stop, and restart your containers</li> <li>Monitor Health: Check if your services are running properly</li> <li>View Logs: See what's happening inside your containers</li> <li>Debug Issues: Access container shells for troubleshooting</li> <li>Scale Applications: Run multiple instances of services</li> <li>Clean Resources: Remove unused containers and images</li> </ul>"},{"location":"getting-started/first-steps/#key-concepts","title":"Key Concepts","text":"<p>Project: A directory containing a <code>docker-compose.yml</code> file and related code</p> <p>Service: A container defined in your Docker Compose file (e.g., web server, database)</p> <p>Configuration: Settings that tell Docker Pilot how to manage your project</p>"},{"location":"getting-started/first-steps/#step-by-step-tutorial","title":"Step-by-Step Tutorial","text":""},{"location":"getting-started/first-steps/#step-1-prepare-your-project","title":"Step 1: Prepare Your Project","text":"<p>Let's start with a simple web application example:</p>"},{"location":"getting-started/first-steps/#create-project-directory","title":"Create Project Directory","text":"<pre><code>mkdir my-first-docker-app\ncd my-first-docker-app\n</code></pre>"},{"location":"getting-started/first-steps/#create-docker-composeyml","title":"Create docker-compose.yml","text":"<pre><code>version: '3.8'\n\nservices:\n  web:\n    image: nginx:alpine\n    ports:\n      - \"8080:80\"\n    volumes:\n      - ./html:/usr/share/nginx/html\n    depends_on:\n      - api\n\n  api:\n    image: node:16-alpine\n    ports:\n      - \"3000:3000\"\n    working_dir: /app\n    volumes:\n      - ./api:/app\n    command: node server.js\n    environment:\n      - NODE_ENV=development\n\n  database:\n    image: postgres:13-alpine\n    ports:\n      - \"5432:5432\"\n    environment:\n      - POSTGRES_DB=myapp\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n</code></pre>"},{"location":"getting-started/first-steps/#create-sample-files","title":"Create Sample Files","text":"<p>Create a simple HTML file:</p> <pre><code>mkdir html\necho '&lt;h1&gt;Hello from Docker Pilot!&lt;/h1&gt;' &gt; html/index.html\n</code></pre> <p>Create a simple API:</p> <pre><code>mkdir api\ncat &gt; api/server.js &lt;&lt; 'EOF'\nconst http = require('http');\n\nconst server = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { 'Content-Type': 'application/json' });\n  res.end(JSON.stringify({ message: 'Hello from API!', timestamp: new Date() }));\n});\n\nserver.listen(3000, () =&gt; {\n  console.log('API server running on port 3000');\n});\nEOF\n</code></pre> <p>Your project structure should look like this:</p> <pre><code>my-first-docker-app/\n\u251c\u2500\u2500 docker-compose.yml\n\u251c\u2500\u2500 html/\n\u2502   \u2514\u2500\u2500 index.html\n\u2514\u2500\u2500 api/\n    \u2514\u2500\u2500 server.js\n</code></pre>"},{"location":"getting-started/first-steps/#step-2-first-run","title":"Step 2: First Run","text":"<p>Now let's start Docker Pilot:</p> <pre><code>docker-pilot\n</code></pre>"},{"location":"getting-started/first-steps/#language-selection","title":"Language Selection","text":"<p>On first run, you'll see:</p> <pre><code>\ud83c\udf0d Welcome to Docker Pilot!\nPlease choose your language / Por favor, escolha seu idioma:\n\n1. English\n2. Portugu\u00eas (Brasil)\n\nSelect option / Selecione a op\u00e7\u00e3o (1-2):\n</code></pre> <p>Type <code>1</code> for English or <code>2</code> for Portuguese.</p>"},{"location":"getting-started/first-steps/#auto-detection","title":"Auto-Detection","text":"<p>Docker Pilot will automatically detect your services:</p> <pre><code>\ud83d\udd0d Detecting project services...\n\u2705 Found docker-compose.yml\n\u2705 Detected 3 services: web, api, database\n\u2705 Configuration created: docker-pilot.config.json\n</code></pre>"},{"location":"getting-started/first-steps/#step-3-explore-the-main-menu","title":"Step 3: Explore the Main Menu","text":"<p>You'll see the main menu:</p> <pre><code>============================================================\n\ud83d\udc33 Welcome to my-first-docker-app Docker Pilot v2.0! \ud83d\udc33\n============================================================\n\n\ud83d\udcc1 Directory: /path/to/my-first-docker-app\n\ud83d\udd27 Services: web, api, database\n\n====================================\n\ud83d\ude80 Basic Commands\n====================================\n1. Quick setup (detect services)\n2. Start all services\n3. Stop all services\n4. Restart all services\n5. Rebuild and start all services\n6. View logs of all services\n7. View services status\n\n====================================\n\ud83d\udee0\ufe0f Advanced Commands\n====================================\n8. Open shell in service\n9. Check services health\n10. Monitor in real time\n11. Update all images\n\n====================================\n\u2699\ufe0f Maintenance\n====================================\n12. Clean unused resources\n13. Deep clean\n14. Show configuration\n15. Advanced settings\n\n0. Exit\n\nChoose your option:\n</code></pre>"},{"location":"getting-started/first-steps/#step-4-start-your-services","title":"Step 4: Start Your Services","text":"<p>Let's start all services:</p> <ol> <li>Type <code>2</code> (Start all services)</li> <li>Press Enter</li> </ol> <p>You'll see:</p> <pre><code>\ud83d\ude80 Executing: Start all services\n================================\n\n\ud83d\udd04 Starting services in priority order...\n\u2705 database started (healthy)\n\u2705 api started (healthy)\n\u2705 web started (healthy)\n\n\ud83d\udcca Service Status:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Status  \u2502 Health     \u2502 Ports         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 web         \u2502 running \u2502 healthy    \u2502 0.0.0.0:8080  \u2502\n\u2502 api         \u2502 running \u2502 healthy    \u2502 0.0.0.0:3000  \u2502\n\u2502 database    \u2502 running \u2502 healthy    \u2502 5432/tcp      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\ud83c\udf89 All services started successfully!\n\nPress Enter to continue...\n</code></pre>"},{"location":"getting-started/first-steps/#step-5-test-your-application","title":"Step 5: Test Your Application","text":"<p>Open your web browser and visit:</p> <ul> <li>Web Application: http://localhost:8080</li> <li>API Endpoint: http://localhost:3000</li> </ul> <p>You should see your \"Hello from Docker Pilot!\" message and JSON response.</p>"},{"location":"getting-started/first-steps/#step-6-monitor-your-services","title":"Step 6: Monitor Your Services","text":"<p>Back in Docker Pilot, try option <code>7</code> (View services status):</p> <pre><code>\ud83d\ude80 Executing: View services status\n==================================\n\n\ud83d\udcca Current Service Status:\n\n\u2705 web (nginx:alpine)\n   Status: running (2 minutes)\n   Health: healthy\n   CPU: 0.1% | Memory: 12.3 MB\n   Ports: 0.0.0.0:8080-&gt;80/tcp\n\n\u2705 api (node:16-alpine)\n   Status: running (2 minutes)\n   Health: healthy\n   CPU: 0.3% | Memory: 45.2 MB\n   Ports: 0.0.0.0:3000-&gt;3000/tcp\n\n\u2705 database (postgres:13-alpine)\n   Status: running (2 minutes)\n   Health: healthy\n   CPU: 0.2% | Memory: 67.8 MB\n   Ports: 5432/tcp\n\n\ud83c\udfaf All services are healthy!\n</code></pre>"},{"location":"getting-started/first-steps/#step-7-view-logs","title":"Step 7: View Logs","text":"<p>Try option <code>6</code> (View logs of all services):</p> <pre><code>\ud83d\ude80 Executing: View logs of all services\n=======================================\n\n\ud83d\udca1 Press Ctrl+C to stop viewing logs\n\napi_1       | API server running on port 3000\ndatabase_1  | PostgreSQL init process complete\ndatabase_1  | database system is ready to accept connections\nweb_1       | 192.168.1.100 - - [22/Jun/2025:10:30:45 +0000] \"GET / HTTP/1.1\" 200 32\n</code></pre> <p>Press <code>Ctrl+C</code> to stop viewing logs.</p>"},{"location":"getting-started/first-steps/#step-8-open-a-shell","title":"Step 8: Open a Shell","text":"<p>Let's explore inside a container. Try option <code>8</code> (Open shell in service):</p> <pre><code>\ud83d\ude80 Executing: Open shell in service\n===================================\n\nAvailable services:\n1. web\n2. api\n3. database\n\nChoose the service (or Enter for the first):\n</code></pre> <p>Type <code>2</code> for the API service:</p> <pre><code>\ud83d\udc1a Opening shell in api...\n\ud83d\udca1 Type \"exit\" to leave the shell\n\n/app # ls\nserver.js\n\n/app # ps aux\nPID   USER     TIME  COMMAND\n1     root      0:00 node server.js\n\n/app # exit\n</code></pre>"},{"location":"getting-started/first-steps/#step-9-scale-a-service","title":"Step 9: Scale a Service","text":"<p>Let's scale the API service. In the menu, you can use advanced commands or CLI:</p> <pre><code># In another terminal\ndocker-pilot scale api=3\n</code></pre> <p>This starts 3 instances of the API service.</p>"},{"location":"getting-started/first-steps/#step-10-stop-services","title":"Step 10: Stop Services","text":"<p>When you're done, stop all services:</p> <ol> <li>Choose option <code>3</code> (Stop all services)</li> </ol> <pre><code>\ud83d\ude80 Executing: Stop all services\n===============================\n\n\ud83d\udd04 Stopping services...\n\u2705 web stopped\n\u2705 api stopped\n\u2705 database stopped\n\n\ud83c\udfaf All services stopped successfully!\n</code></pre>"},{"location":"getting-started/first-steps/#understanding-the-configuration","title":"Understanding the Configuration","text":"<p>Docker Pilot created a configuration file <code>docker-pilot.config.json</code>:</p> <pre><code>{\n  \"projectName\": \"my-first-docker-app\",\n  \"dockerCompose\": \"docker compose\",\n  \"language\": \"en\",\n  \"configVersion\": \"2.0\",\n  \"services\": {\n    \"web\": {\n      \"port\": 8080,\n      \"healthCheck\": true,\n      \"priority\": 3\n    },\n    \"api\": {\n      \"port\": 3000,\n      \"healthCheck\": true,\n      \"priority\": 2\n    },\n    \"database\": {\n      \"port\": 5432,\n      \"healthCheck\": true,\n      \"priority\": 1\n    }\n  }\n}\n</code></pre> <p>This tells Docker Pilot:</p> <ul> <li>Project name: Display name for your project</li> <li>Language: Interface language preference</li> <li>Service priorities: Database starts first, then API, then web</li> <li>Health checks: Monitor service health automatically</li> <li>Ports: Main ports for each service</li> </ul>"},{"location":"getting-started/first-steps/#cli-usage","title":"CLI Usage","text":"<p>You can also use Docker Pilot from the command line:</p> <pre><code># Start all services\ndocker-pilot up\n\n# Check status\ndocker-pilot status\n\n# View logs\ndocker-pilot logs\n\n# Stop all services\ndocker-pilot down\n\n# Open shell in API service\ndocker-pilot shell api\n\n# Scale services\ndocker-pilot scale api=3 web=2\n\n# Get help\ndocker-pilot --help\n</code></pre>"},{"location":"getting-started/first-steps/#common-tasks","title":"Common Tasks","text":"<p>Here are common tasks you'll do with Docker Pilot:</p>"},{"location":"getting-started/first-steps/#daily-development-workflow","title":"Daily Development Workflow","text":"<pre><code># Morning: Start everything\ndocker-pilot up\n\n# During development: Check logs\ndocker-pilot logs --follow\n\n# Debug an issue: Open shell\ndocker-pilot shell web\n\n# Test changes: Restart service\ndocker-pilot restart api\n\n# Evening: Stop everything\ndocker-pilot down\n</code></pre>"},{"location":"getting-started/first-steps/#troubleshooting","title":"Troubleshooting","text":"<pre><code># Check service health\ndocker-pilot status\n\n# View recent logs\ndocker-pilot logs --tail 100\n\n# Access container for debugging\ndocker-pilot shell database\n\n# Rebuild containers\ndocker-pilot build --no-cache\ndocker-pilot up\n</code></pre>"},{"location":"getting-started/first-steps/#maintenance","title":"Maintenance","text":"<pre><code># Clean unused resources\ndocker-pilot clean\n\n# Update all images\ndocker-pilot pull\ndocker-pilot up\n\n# Deep clean (removes everything)\ndocker-pilot clean --all\n</code></pre>"},{"location":"getting-started/first-steps/#what-youve-learned","title":"What You've Learned","text":"<p>Congratulations! You now know how to:</p> <ul> <li>\u2705 Set up a Docker project with Docker Pilot</li> <li>\u2705 Use the interactive menu to manage services</li> <li>\u2705 Start, stop, and monitor containers</li> <li>\u2705 View logs and access container shells</li> <li>\u2705 Scale services and troubleshoot issues</li> <li>\u2705 Use both interactive and CLI modes</li> </ul>"},{"location":"getting-started/first-steps/#next-steps","title":"Next Steps","text":"<p>Now that you're comfortable with the basics:</p> <ul> <li>\ud83c\udfae Master the Interactive Menu</li> <li>\ud83d\udcbb Learn advanced CLI Usage</li> <li>\ud83d\udd27 Explore Configuration Options</li> <li>\ud83c\udf0d Set up Multi-language Support</li> <li>\ud83d\udd0c Try the Plugin System</li> </ul>"},{"location":"getting-started/first-steps/#need-help","title":"Need Help?","text":"<ul> <li>\ud83d\udcd6 Check the User Guide</li> <li>\u2753 Read the FAQ</li> <li>\ud83d\udcac Join Discussions</li> <li>\ud83d\udc1b Report Issues</li> </ul> <p>You're Ready!</p> <p>You now have everything you need to effectively use Docker Pilot in your projects. The combination of the interactive menu and CLI commands gives you powerful, flexible container management!</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install Docker Pilot on your system.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing Docker Pilot, make sure you have:</p> <ul> <li>Node.js (version 16 or higher)</li> <li>npm, yarn, or pnpm package manager</li> <li>Docker and Docker Compose installed and running</li> </ul>"},{"location":"getting-started/installation/#verify-prerequisites","title":"Verify Prerequisites","text":"<p>Check if you have the required tools:</p> <pre><code># Check Node.js version\nnode --version\n\n# Check npm version\nnpm --version\n\n# Check Docker version\ndocker --version\n\n# Check Docker Compose version\ndocker compose version\n</code></pre>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-global-installation-recommended","title":"Method 1: Global Installation (Recommended)","text":"<p>Install Docker Pilot globally to use it from anywhere:</p> npmyarnpnpm <pre><code>npm install -g docker-pilot\n</code></pre> <pre><code>yarn global add docker-pilot\n</code></pre> <pre><code>pnpm add -g docker-pilot\n</code></pre>"},{"location":"getting-started/installation/#method-2-local-installation","title":"Method 2: Local Installation","text":"<p>Install Docker Pilot locally in your project:</p> npmyarnpnpm <pre><code>npm install docker-pilot\n</code></pre> <pre><code>yarn add docker-pilot\n</code></pre> <pre><code>pnpm add docker-pilot\n</code></pre> <p>Then run using: <pre><code>npx docker-pilot\n</code></pre></p>"},{"location":"getting-started/installation/#method-3-run-without-installation","title":"Method 3: Run without Installation","text":"<p>Use Docker Pilot without installing:</p> npmyarnpnpm <pre><code>npx docker-pilot\n</code></pre> <pre><code>yarn dlx docker-pilot\n</code></pre> <pre><code>pnpm dlx docker-pilot\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>After installation, verify that Docker Pilot is working:</p> <pre><code># Check version\ndocker-pilot --version\n\n# Show help\ndocker-pilot --help\n\n# Run in current directory\ndocker-pilot\n</code></pre>"},{"location":"getting-started/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"getting-started/installation/#windows","title":"Windows","text":"<ul> <li>Make sure to run PowerShell or Command Prompt as Administrator if you encounter permission issues</li> <li>If using WSL2, install Docker Pilot inside your WSL2 environment</li> </ul>"},{"location":"getting-started/installation/#macos","title":"macOS","text":"<ul> <li>If using Homebrew, you might need to install Node.js first:   <pre><code>brew install node\n</code></pre></li> </ul>"},{"location":"getting-started/installation/#linux","title":"Linux","text":"<ul> <li> <p>On Ubuntu/Debian, you might need to install Node.js:   <pre><code>sudo apt update\nsudo apt install nodejs npm\n</code></pre></p> </li> <li> <p>On CentOS/RHEL/Fedora:   <pre><code>sudo dnf install nodejs npm\n</code></pre></p> </li> </ul>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Permission denied errors on Linux/macOS: <pre><code># Fix npm permissions\nmkdir ~/.npm-global\nnpm config set prefix '~/.npm-global'\necho 'export PATH=~/.npm-global/bin:$PATH' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p> <p>Docker not found: - Make sure Docker is installed and running - Verify Docker daemon is accessible: <code>docker info</code></p> <p>Command not found after installation: - Restart your terminal - Check if the npm global bin directory is in your PATH - Try using the full path: <code>~/.npm-global/bin/docker-pilot</code></p>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the FAQ</li> <li>Search existing issues</li> <li>Create a new issue</li> </ol>"},{"location":"getting-started/installation/#whats-next","title":"What's Next?","text":"<p>After installation, continue with:</p> <ul> <li>Quick Start Guide - Get up and running in minutes</li> <li>Configuration - Learn about configuration options</li> <li>First Steps - Detailed walkthrough for beginners</li> </ul> <p>Pro Tip</p> <p>Install Docker Pilot globally and add it to your daily Docker workflow. The interactive menu makes it easy to manage complex multi-container applications!</p>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>Get up and running with Docker Pilot in just a few minutes!</p>"},{"location":"getting-started/quick-start/#before-you-start","title":"Before You Start","text":"<p>Make sure you have:</p> <ul> <li>\u2705 Docker Pilot installed (Installation Guide)</li> <li>\u2705 Docker and Docker Compose running</li> <li>\u2705 A Docker Compose project ready</li> </ul>"},{"location":"getting-started/quick-start/#your-first-docker-pilot-experience","title":"Your First Docker Pilot Experience","text":""},{"location":"getting-started/quick-start/#step-1-navigate-to-your-project","title":"Step 1: Navigate to Your Project","text":"<pre><code>cd your-docker-project\n</code></pre> <p>Your project should have a <code>docker-compose.yml</code> file:</p> <pre><code># Example docker-compose.yml\nversion: '3.8'\nservices:\n  web:\n    build: .\n    ports:\n      - \"8080:80\"\n  database:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n</code></pre>"},{"location":"getting-started/quick-start/#step-2-start-docker-pilot","title":"Step 2: Start Docker Pilot","text":"<pre><code>docker-pilot\n</code></pre> <p>On first run, you'll see:</p> <pre><code>\ud83c\udf0d Welcome to Docker Pilot!\nPlease choose your language / Por favor, escolha seu idioma:\n\n1. English\n2. Portugu\u00eas (Brasil)\n\nSelect option / Selecione a op\u00e7\u00e3o (1-2):\n</code></pre> <p>Choose your preferred language by typing <code>1</code> or <code>2</code>.</p>"},{"location":"getting-started/quick-start/#step-3-explore-the-interactive-menu","title":"Step 3: Explore the Interactive Menu","text":"<p>After language selection, you'll see the main menu:</p> <pre><code>============================================================\n\ud83d\udc33 Welcome to MyApp Docker Pilot v2.0! \ud83d\udc33\n============================================================\n\n\ud83d\udcc1 Directory: /path/to/your/project\n\ud83d\udd27 Services: web, database\n\n====================================\n\ud83d\ude80 Basic Commands\n====================================\n1. Quick setup (detect services)\n2. Start all services\n3. Stop all services\n4. Restart all services\n5. Rebuild and start all services\n6. View logs of all services\n7. View services status\n\n====================================\n\ud83d\udee0\ufe0f Advanced Commands\n====================================\n8. Open shell in service\n9. Check services health\n10. Monitor in real time\n11. Update all images\n\n====================================\n\u2699\ufe0f Maintenance\n====================================\n12. Clean unused resources\n13. Deep clean\n14. Show configuration\n15. Advanced settings\n\n0. Exit\n\nChoose your option:\n</code></pre>"},{"location":"getting-started/quick-start/#step-4-try-some-basic-operations","title":"Step 4: Try Some Basic Operations","text":"<p>Let's try the most common operations:</p>"},{"location":"getting-started/quick-start/#start-all-services","title":"Start All Services","text":"<p>Type <code>2</code> to start all services:</p> <pre><code>\ud83d\ude80 Executing: Start all services\n================================\n\n\u2705 Starting services...\n\u2705 Services started successfully!\n\nService Status:\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Service     \u2502 Status  \u2502 Health     \u2502 Ports         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 web         \u2502 running \u2502 healthy    \u2502 0.0.0.0:8080  \u2502\n\u2502 database    \u2502 running \u2502 healthy    \u2502 5432/tcp      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nPress Enter to continue...\n</code></pre>"},{"location":"getting-started/quick-start/#view-service-status","title":"View Service Status","text":"<p>Type <code>7</code> to check service status:</p> <pre><code>\ud83d\ude80 Executing: View services status\n==================================\n\n\ud83d\udcca Current Service Status:\n\n\u2705 web\n   Status: running\n   Health: healthy\n   Uptime: 2 minutes\n   Ports: 0.0.0.0:8080-&gt;80/tcp\n\n\u2705 database\n   Status: running\n   Health: healthy\n   Uptime: 2 minutes\n   Ports: 5432/tcp\n\nAll services are running healthy! \ud83c\udf89\n</code></pre>"},{"location":"getting-started/quick-start/#view-logs","title":"View Logs","text":"<p>Type <code>6</code> to view logs:</p> <pre><code>\ud83d\ude80 Executing: View logs of all services\n=======================================\n\n\ud83d\udca1 Press Ctrl+C to stop viewing logs\n\nweb_1       | Server started on port 80\ndatabase_1  | PostgreSQL init process complete; ready for start up.\ndatabase_1  | database system is ready to accept connections\nweb_1       | GET / 200 - - 15 ms\n</code></pre>"},{"location":"getting-started/quick-start/#cli-mode-alternative","title":"CLI Mode (Alternative)","text":"<p>You can also use Docker Pilot in CLI mode without the interactive menu:</p> <pre><code># Start all services\ndocker-pilot up\n\n# Check status\ndocker-pilot status\n\n# View logs\ndocker-pilot logs --follow\n\n# Stop all services\ndocker-pilot down\n\n# Open shell in web service\ndocker-pilot shell web\n\n# Scale services\ndocker-pilot scale web=3 database=1\n</code></pre>"},{"location":"getting-started/quick-start/#common-first-steps","title":"Common First Steps","text":"<p>Here are the most common things you'll want to do:</p>"},{"location":"getting-started/quick-start/#1-quick-setup","title":"1. Quick Setup","text":"<p>If this is your first time in a project:</p> <ol> <li>Choose option <code>1</code> (Quick setup)</li> <li>Docker Pilot will detect your services automatically</li> <li>It will create a configuration file for faster subsequent runs</li> </ol>"},{"location":"getting-started/quick-start/#2-development-workflow","title":"2. Development Workflow","text":"<p>For daily development:</p> <pre><code># Start everything\ndocker-pilot up\n\n# View logs while developing\ndocker-pilot logs --follow\n\n# Open shell for debugging\ndocker-pilot shell web\n\n# Restart after code changes\ndocker-pilot restart web\n\n# Stop everything when done\ndocker-pilot down\n</code></pre>"},{"location":"getting-started/quick-start/#3-monitor-services","title":"3. Monitor Services","text":"<p>To keep an eye on your services:</p> <ol> <li>Choose option <code>10</code> (Monitor in real time)</li> <li>See live updates of service status</li> <li>Press Ctrl+C to stop monitoring</li> </ol>"},{"location":"getting-started/quick-start/#configuration","title":"Configuration","text":"<p>Docker Pilot creates a <code>docker-pilot.config.json</code> file in your project:</p> <pre><code>{\n  \"projectName\": \"myapp\",\n  \"dockerCompose\": \"docker compose\",\n  \"language\": \"en\",\n  \"services\": {\n    \"web\": {\n      \"port\": 8080,\n      \"healthCheck\": true\n    },\n    \"database\": {\n      \"port\": 5432,\n      \"healthCheck\": true\n    }\n  }\n}\n</code></pre> <p>This configuration is automatically generated and can be customized.</p>"},{"location":"getting-started/quick-start/#whats-next","title":"What's Next?","text":"<p>Now that you've got the basics down:</p> <ul> <li>\ud83d\udcd6 Learn about Configuration options</li> <li>\ud83c\udfaf Explore CLI Usage in detail</li> <li>\ud83c\udfae Master the Interactive Menu</li> <li>\ud83c\udf0d Set up Multi-language Support</li> <li>\ud83d\udd27 Try Advanced Features</li> </ul>"},{"location":"getting-started/quick-start/#need-help","title":"Need Help?","text":"<ul> <li>\ud83d\udccb Check the FAQ</li> <li>\ud83d\udcac Join our Discussions</li> <li>\ud83d\udc1b Report issues on GitHub</li> </ul> <p>Congratulations!</p> <p>You're now ready to use Docker Pilot! The interactive menu makes it easy to manage your Docker services, and the CLI provides powerful automation capabilities.</p>"},{"location":"user-guide/cli-usage/","title":"CLI Usage","text":"<p>Complete guide to using Docker Pilot from the command line.</p>"},{"location":"user-guide/cli-usage/#basic-syntax","title":"Basic Syntax","text":"<pre><code>docker-pilot [command] [options] [arguments]\n</code></pre>"},{"location":"user-guide/cli-usage/#global-options","title":"Global Options","text":"<pre><code>--help, -h           Show help information\n--version, -v        Show version number\n--config &lt;path&gt;      Use custom configuration file\n--cwd &lt;path&gt;         Set working directory\n--log-level &lt;level&gt;  Set log level (debug, info, warn, error)\n--silent             Suppress output\n--interactive, -i    Force interactive mode\n</code></pre>"},{"location":"user-guide/cli-usage/#commands-overview","title":"Commands Overview","text":""},{"location":"user-guide/cli-usage/#service-management","title":"Service Management","text":"Command Description Example <code>up</code>, <code>start</code> Start services <code>docker-pilot up web api</code> <code>down</code>, <code>stop</code> Stop services <code>docker-pilot down --volumes</code> <code>restart</code> Restart services <code>docker-pilot restart web</code> <code>status</code>, <code>ps</code> Show service status <code>docker-pilot status --detailed</code>"},{"location":"user-guide/cli-usage/#development-commands","title":"Development Commands","text":"Command Description Example <code>logs</code>, <code>log</code> View service logs <code>docker-pilot logs web --follow</code> <code>exec</code> Execute command in container <code>docker-pilot exec web npm test</code> <code>shell</code>, <code>sh</code> Open interactive shell <code>docker-pilot shell web</code> <code>build</code> Build or rebuild services <code>docker-pilot build --no-cache</code>"},{"location":"user-guide/cli-usage/#scaling-and-management","title":"Scaling and Management","text":"Command Description Example <code>scale</code> Scale services <code>docker-pilot scale web=3 api=2</code> <code>pull</code> Pull latest images <code>docker-pilot pull --parallel</code> <code>clean</code>, <code>cleanup</code> Clean Docker resources <code>docker-pilot clean --all</code>"},{"location":"user-guide/cli-usage/#compose-file-management-new","title":"Compose File Management NEW","text":"Command Description Example <code>compose list</code> List docker-compose files <code>docker-pilot compose list --variants</code> <code>compose find</code> Find compose files in directory <code>docker-pilot compose find /path/to/project</code> <code>compose analyze</code> Analyze compose file structure <code>docker-pilot compose analyze docker-compose.yml</code> <code>compose validate</code> Validate compose file syntax <code>docker-pilot compose validate --all</code> <code>compose services</code> List services from compose <code>docker-pilot compose services</code>"},{"location":"user-guide/cli-usage/#configuration","title":"Configuration","text":"Command Description Example <code>config</code> Manage configuration <code>docker-pilot config --show</code>"},{"location":"user-guide/cli-usage/#detailed-command-reference","title":"Detailed Command Reference","text":""},{"location":"user-guide/cli-usage/#up-start","title":"up / start","text":"<p>Start one or more services.</p> <pre><code># Start all services\ndocker-pilot up\n\n# Start specific services\ndocker-pilot up web database\n\n# Start with rebuild\ndocker-pilot up --build\n\n# Start in detached mode\ndocker-pilot up --detach\n\n# Start with custom compose file\ndocker-pilot up --file docker-compose.prod.yml\n</code></pre> <p>Options:</p> <ul> <li><code>--build</code>: Rebuild images before starting</li> <li><code>--detach, -d</code>: Run containers in background</li> <li><code>--file, -f &lt;file&gt;</code>: Use custom docker-compose file</li> <li><code>--force-recreate</code>: Recreate containers even if configuration hasn't changed</li> <li><code>--no-deps</code>: Don't start linked services</li> <li><code>--remove-orphans</code>: Remove containers for services not defined in compose file</li> </ul>"},{"location":"user-guide/cli-usage/#down-stop","title":"down / stop","text":"<p>Stop and remove containers.</p> <pre><code># Stop all services\ndocker-pilot down\n\n# Stop specific services\ndocker-pilot stop web api\n\n# Stop and remove volumes\ndocker-pilot down --volumes\n\n# Stop and remove everything\ndocker-pilot down --volumes --rmi all\n</code></pre> <p>Options:</p> <ul> <li><code>--volumes, -v</code>: Remove named volumes and anonymous volumes</li> <li><code>--rmi &lt;type&gt;</code>: Remove images (all, local)</li> <li><code>--remove-orphans</code>: Remove containers for services not in compose file</li> <li><code>--timeout, -t &lt;seconds&gt;</code>: Timeout for container shutdown</li> </ul>"},{"location":"user-guide/cli-usage/#logs-log","title":"logs / log","text":"<p>View and follow service logs.</p> <pre><code># View logs for all services\ndocker-pilot logs\n\n# View logs for specific service\ndocker-pilot logs web\n\n# Follow logs in real-time\ndocker-pilot logs --follow\n\n# Show last 100 lines\ndocker-pilot logs --tail 100\n\n# Show logs with timestamps\ndocker-pilot logs --timestamps\n\n# Filter logs by time\ndocker-pilot logs --since 2h --until 1h\n</code></pre> <p>Options:</p> <ul> <li><code>--follow, -f</code>: Follow log output</li> <li><code>--tail &lt;lines&gt;</code>: Number of lines to show from end of logs</li> <li><code>--timestamps, -t</code>: Show timestamps</li> <li><code>--since &lt;time&gt;</code>: Show logs since timestamp (e.g., 2h, 30m)</li> <li><code>--until &lt;time&gt;</code>: Show logs until timestamp</li> <li><code>--no-color</code>: Disable colored output</li> </ul>"},{"location":"user-guide/cli-usage/#exec","title":"exec","text":"<p>Execute commands inside running containers.</p> <pre><code># Run interactive bash shell\ndocker-pilot exec web bash\n\n# Run command and exit\ndocker-pilot exec web ls -la\n\n# Run command as specific user\ndocker-pilot exec --user root web apt update\n\n# Run command with environment variables\ndocker-pilot exec --env NODE_ENV=test web npm test\n\n# Run command without TTY\ndocker-pilot exec --no-tty web echo \"Hello World\"\n</code></pre> <p>Options:</p> <ul> <li><code>--user, -u &lt;user&gt;</code>: Run as specific user</li> <li><code>--env, -e &lt;key&gt;=&lt;value&gt;</code>: Set environment variable</li> <li><code>--workdir, -w &lt;path&gt;</code>: Set working directory</li> <li><code>--no-tty, -T</code>: Disable pseudo-TTY allocation</li> <li><code>--interactive, -i</code>: Keep STDIN open</li> <li><code>--detach, -d</code>: Run command in background</li> </ul>"},{"location":"user-guide/cli-usage/#shell-sh","title":"shell / sh","text":"<p>Open an interactive shell in a container.</p> <pre><code># Open default shell (usually bash or sh)\ndocker-pilot shell web\n\n# Open specific shell\ndocker-pilot shell --shell zsh web\n\n# Open shell as root user\ndocker-pilot shell --user root web\n\n# Open shell with custom working directory\ndocker-pilot shell --workdir /app web\n</code></pre> <p>Options:</p> <ul> <li><code>--shell &lt;shell&gt;</code>: Shell to use (bash, sh, zsh, fish)</li> <li><code>--user, -u &lt;user&gt;</code>: Run as specific user</li> <li><code>--workdir, -w &lt;path&gt;</code>: Set working directory</li> </ul>"},{"location":"user-guide/cli-usage/#build","title":"build","text":"<p>Build or rebuild service images.</p> <pre><code># Build all services\ndocker-pilot build\n\n# Build specific services\ndocker-pilot build web api\n\n# Build without cache\ndocker-pilot build --no-cache\n\n# Build with build arguments\ndocker-pilot build --build-arg NODE_VERSION=16\n\n# Build in parallel\ndocker-pilot build --parallel\n</code></pre> <p>Options:</p> <ul> <li><code>--no-cache</code>: Don't use cache when building</li> <li><code>--pull</code>: Always attempt to pull newer image versions</li> <li><code>--build-arg &lt;key&gt;=&lt;value&gt;</code>: Set build-time variables</li> <li><code>--parallel</code>: Build images in parallel</li> <li><code>--progress &lt;type&gt;</code>: Set progress output type (auto, plain, tty)</li> </ul>"},{"location":"user-guide/cli-usage/#scale","title":"scale","text":"<p>Scale services to specified number of replicas.</p> <pre><code># Scale single service\ndocker-pilot scale web=3\n\n# Scale multiple services\ndocker-pilot scale web=3 api=2 worker=5\n\n# Scale to zero (stop all replicas)\ndocker-pilot scale web=0\n</code></pre>"},{"location":"user-guide/cli-usage/#status-ps","title":"status / ps","text":"<p>Show status of services.</p> <pre><code># Show basic status\ndocker-pilot status\n\n# Show detailed status\ndocker-pilot status --detailed\n\n# Show status in different formats\ndocker-pilot status --format table\ndocker-pilot status --format json\ndocker-pilot status --format yaml\n\n# Show only running services\ndocker-pilot status --filter status=running\n\n# Show resource usage\ndocker-pilot status --stats\n</code></pre> <p>Options:</p> <ul> <li><code>--detailed, -d</code>: Show detailed information</li> <li><code>--format &lt;format&gt;</code>: Output format (table, json, yaml)</li> <li><code>--filter &lt;key&gt;=&lt;value&gt;</code>: Filter services</li> <li><code>--stats</code>: Show resource usage statistics</li> <li><code>--no-trunc</code>: Don't truncate output</li> </ul>"},{"location":"user-guide/cli-usage/#pull","title":"pull","text":"<p>Pull service images from registry.</p> <pre><code># Pull all images\ndocker-pilot pull\n\n# Pull specific service images\ndocker-pilot pull web api\n\n# Pull images in parallel\ndocker-pilot pull --parallel\n\n# Pull images quietly\ndocker-pilot pull --quiet\n</code></pre> <p>Options:</p> <ul> <li><code>--parallel</code>: Pull images in parallel</li> <li><code>--quiet, -q</code>: Suppress output</li> <li><code>--ignore-pull-failures</code>: Continue pulling other images if one fails</li> </ul>"},{"location":"user-guide/cli-usage/#clean-cleanup","title":"clean / cleanup","text":"<p>Clean up Docker resources.</p> <pre><code># Basic cleanup (stopped containers, unused networks)\ndocker-pilot clean\n\n# Clean everything (containers, images, volumes, networks)\ndocker-pilot clean --all\n\n# Clean with confirmation prompts\ndocker-pilot clean --interactive\n\n# Clean specific resource types\ndocker-pilot clean --containers --images --networks\n\n# Force cleanup without confirmations\ndocker-pilot clean --force\n</code></pre> <p>Options:</p> <ul> <li><code>--all, -a</code>: Remove all unused resources</li> <li><code>--containers</code>: Remove stopped containers</li> <li><code>--images</code>: Remove unused images</li> <li><code>--volumes</code>: Remove unused volumes</li> <li><code>--networks</code>: Remove unused networks</li> <li><code>--force, -f</code>: Don't prompt for confirmation</li> <li><code>--interactive, -i</code>: Prompt before each removal</li> </ul>"},{"location":"user-guide/cli-usage/#config","title":"config","text":"<p>Manage Docker Pilot configuration.</p> <pre><code># Show current configuration\ndocker-pilot config --show\n\n# Show configuration for specific service\ndocker-pilot config --show --service web\n\n# Validate configuration\ndocker-pilot config --validate\n\n# Reset configuration to defaults\ndocker-pilot config --reset\n\n# Set configuration values\ndocker-pilot config --set language=pt-br\ndocker-pilot config --set services.web.port=8080\n</code></pre> <p>Options:</p> <ul> <li><code>--show</code>: Display current configuration</li> <li><code>--validate</code>: Validate configuration file</li> <li><code>--reset</code>: Reset to default configuration</li> <li><code>--set &lt;key&gt;=&lt;value&gt;</code>: Set configuration value</li> <li><code>--service &lt;name&gt;</code>: Target specific service</li> <li><code>--format &lt;format&gt;</code>: Output format (json, yaml, table)</li> </ul>"},{"location":"user-guide/cli-usage/#environment-variables","title":"Environment Variables","text":"<p>Docker Pilot recognizes these environment variables:</p> <pre><code># Configuration file location\nexport DOCKER_PILOT_CONFIG=/path/to/config.json\n\n# Default working directory\nexport DOCKER_PILOT_CWD=/path/to/project\n\n# Log level\nexport DOCKER_PILOT_LOG_LEVEL=debug\n\n# Disable colored output\nexport NO_COLOR=1\n\n# Force language\nexport DOCKER_PILOT_LANG=pt-br\n</code></pre>"},{"location":"user-guide/cli-usage/#configuration-file","title":"Configuration File","text":"<p>You can specify a custom configuration file:</p> <pre><code># Use specific config file\ndocker-pilot --config /path/to/custom.config.json\n\n# Use environment variable\nexport DOCKER_PILOT_CONFIG=/path/to/custom.config.json\ndocker-pilot up\n</code></pre>"},{"location":"user-guide/cli-usage/#exit-codes","title":"Exit Codes","text":"<p>Docker Pilot uses standard exit codes:</p> <ul> <li><code>0</code>: Success</li> <li><code>1</code>: General error</li> <li><code>2</code>: Command line usage error</li> <li><code>125</code>: Docker daemon error</li> <li><code>126</code>: Container command not executable</li> <li><code>127</code>: Container command not found</li> <li><code>130</code>: Process terminated by Ctrl+C</li> </ul>"},{"location":"user-guide/cli-usage/#compose-file-management-new_1","title":"Compose File Management (NEW)","text":"<p>The <code>compose</code> command provides comprehensive management of docker-compose files with recursive discovery and detailed analysis capabilities.</p>"},{"location":"user-guide/cli-usage/#compose-list","title":"compose list","text":"<p>List all docker-compose files found recursively in the project directory.</p> <pre><code># List all compose files with basic information\ndocker-pilot compose list\n\n# Include environment variants (dev, prod, test)\ndocker-pilot compose list --variants\n\n# Specify custom search depth\ndocker-pilot compose list --depth 8\n\n# Search in specific directory\ndocker-pilot compose list /path/to/project --variants\n</code></pre> <p>Output Example: <pre><code>Found 3 docker-compose files:\n\n1. docker-compose.yml \ud83c\udfaf\ud83d\udcc1\n   \ud83d\udccf 2.1 KB | \ud83d\udcc5 22/06/2025\n   \ud83d\udee0\ufe0f 4 services: web, api, database, redis\n\n2. backend/docker-compose.dev.yml (development) \ud83d\udcc2(2)\n   \ud83d\udccf 1.8 KB | \ud83d\udcc5 21/06/2025  \n   \ud83d\udee0\ufe0f 2 services: api-dev, database-dev\n</code></pre></p> <p>Options: - <code>--variants, -v</code>: Include environment variants - <code>--depth &lt;n&gt;</code>: Maximum search depth (default: 6)</p>"},{"location":"user-guide/cli-usage/#compose-find","title":"compose find","text":"<p>Search for docker-compose files in a specific directory or project.</p> <pre><code># Find in current directory\ndocker-pilot compose find\n\n# Find in specific path\ndocker-pilot compose find /path/to/project\n\n# Simple file path listing\ndocker-pilot compose find --simple\n</code></pre>"},{"location":"user-guide/cli-usage/#compose-analyze","title":"compose analyze","text":"<p>Perform detailed analysis of a docker-compose file structure.</p> <pre><code># Analyze main compose file (auto-detected)\ndocker-pilot compose analyze\n\n# Analyze specific file\ndocker-pilot compose analyze docker-compose.yml\n\n# Analyze with full service details\ndocker-pilot compose analyze docker-compose.dev.yml --detailed\n</code></pre> <p>Analysis Output: - File size and modification date - Compose version - Services with images, ports, volumes - Networks and volumes defined - Dependencies between services - Environment variables count - Health check configurations</p>"},{"location":"user-guide/cli-usage/#compose-validate","title":"compose validate","text":"<p>Validate docker-compose file syntax and structure.</p> <pre><code># Validate main compose file\ndocker-pilot compose validate\n\n# Validate specific file\ndocker-pilot compose validate docker-compose.prod.yml\n\n# Validate with detailed error reporting\ndocker-pilot compose validate --verbose\n</code></pre> <p>Validation Checks: - YAML syntax validation - Docker Compose schema compliance - Service dependency validation - Port conflict detection - Required image/build validation - Environment variable references</p>"},{"location":"user-guide/cli-usage/#compose-services","title":"compose services","text":"<p>List all services defined in docker-compose files.</p> <pre><code># List services from main compose file\ndocker-pilot compose services\n\n# List from specific file\ndocker-pilot compose services docker-compose.dev.yml\n\n# Include service details\ndocker-pilot compose services --detailed\n</code></pre>"},{"location":"user-guide/cli-usage/#advanced-usage","title":"Advanced Usage","text":""},{"location":"user-guide/cli-usage/#chaining-commands","title":"Chaining Commands","text":"<pre><code># Build, start, and view logs\ndocker-pilot build &amp;&amp; docker-pilot up &amp;&amp; docker-pilot logs --follow\n\n# Stop, clean, and restart\ndocker-pilot down &amp;&amp; docker-pilot clean &amp;&amp; docker-pilot up\n</code></pre>"},{"location":"user-guide/cli-usage/#using-with-scripts","title":"Using with Scripts","text":"<pre><code>#!/bin/bash\n\n# Development startup script\necho \"Starting development environment...\"\n\n# Start services\ndocker-pilot up --build\n\n# Wait for services to be ready\nsleep 10\n\n# Run tests\ndocker-pilot exec web npm test\n\n# Show status\ndocker-pilot status --detailed\n</code></pre>"},{"location":"user-guide/cli-usage/#integration-with-cicd","title":"Integration with CI/CD","text":"<pre><code># GitHub Actions example\n- name: Start services\n  run: docker-pilot up --detach\n\n- name: Wait for services\n  run: docker-pilot exec web wget --retry-connrefused --tries=30 --timeout=1 --spider http://localhost:8080\n\n- name: Run tests\n  run: docker-pilot exec web npm test\n\n- name: Cleanup\n  run: docker-pilot down --volumes\n  if: always()\n</code></pre>"},{"location":"user-guide/cli-usage/#tips-and-best-practices","title":"Tips and Best Practices","text":""},{"location":"user-guide/cli-usage/#1-use-aliases","title":"1. Use Aliases","text":"<pre><code># Add to your .bashrc or .zshrc\nalias dp='docker-pilot'\nalias dpu='docker-pilot up'\nalias dpd='docker-pilot down'\nalias dpl='docker-pilot logs --follow'\nalias dps='docker-pilot status'\n</code></pre>"},{"location":"user-guide/cli-usage/#2-project-specific-scripts","title":"2. Project-Specific Scripts","text":"<p>Create a <code>scripts/</code> directory in your project:</p> <pre><code># scripts/dev.sh\n#!/bin/bash\ndocker-pilot up --build\ndocker-pilot logs --follow\n\n# scripts/test.sh\n#!/bin/bash\ndocker-pilot exec web npm test\ndocker-pilot exec api npm test\n</code></pre>"},{"location":"user-guide/cli-usage/#3-environment-management","title":"3. Environment Management","text":"<pre><code># Development\ndocker-pilot --config docker-pilot.dev.json up\n\n# Production\ndocker-pilot --config docker-pilot.prod.json up --detach\n</code></pre>"},{"location":"user-guide/cli-usage/#4-health-checks","title":"4. Health Checks","text":"<pre><code># Check if services are healthy\nif docker-pilot status --filter health=healthy --quiet; then\n  echo \"All services healthy\"\nelse\n  echo \"Some services unhealthy\"\n  docker-pilot status --detailed\nfi\n</code></pre>"},{"location":"user-guide/cli-usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/cli-usage/#common-issues","title":"Common Issues","text":"<p>Command not found: <pre><code># Check installation\nnpm list -g docker-pilot\n\n# Reinstall if needed\nnpm install -g docker-pilot\n</code></pre></p> <p>Permission denied: <pre><code># Check Docker permissions\ndocker info\n\n# Add user to docker group (Linux)\nsudo usermod -aG docker $USER\n</code></pre></p> <p>Configuration errors: <pre><code># Validate configuration\ndocker-pilot config --validate\n\n# Reset to defaults\ndocker-pilot config --reset\n</code></pre></p>"},{"location":"user-guide/cli-usage/#debug-mode","title":"Debug Mode","text":"<p>Enable debug logging for troubleshooting:</p> <pre><code># Set log level\ndocker-pilot --log-level debug up\n\n# Use environment variable\nexport DOCKER_PILOT_LOG_LEVEL=debug\ndocker-pilot up\n</code></pre>"},{"location":"user-guide/cli-usage/#whats-next","title":"What's Next?","text":"<ul> <li>\ud83c\udfae Learn about the Interactive Menu</li> <li>\ud83d\udd27 Explore Configuration Files</li> <li>\ud83c\udf0d Set up Multi-language Support</li> <li>\ud83d\ude80 Try Advanced Features</li> </ul> <p>Pro Tip</p> <p>The CLI commands are perfect for automation and scripting, while the interactive menu is great for exploration and daily development tasks. Use both modes to maximize your productivity!</p>"},{"location":"user-guide/config-files/","title":"Configuration Files","text":"<p>Docker Pilot uses different types of configuration files to manage projects, services, and system behaviors.</p>"},{"location":"user-guide/config-files/#configuration-structure","title":"Configuration Structure","text":""},{"location":"user-guide/config-files/#file-hierarchy","title":"File Hierarchy","text":"<p>Docker Pilot searches for configuration files in the following order:</p> <ol> <li><code>docker-pilot.yml</code> (project root)</li> <li><code>docker-pilot.json</code> (project root)</li> <li><code>.docker-pilot/config.yml</code> (configuration directory)</li> <li><code>~/.docker-pilot/config.yml</code> (user global configuration)</li> </ol>"},{"location":"user-guide/config-files/#main-file-docker-pilotyml","title":"Main File: docker-pilot.yml","text":"<pre><code># docker-pilot.yml\nversion: \"1.0\"\n\nproject:\n  name: \"my-project\"\n  version: \"1.0.0\"\n\nservices:\n  database:\n    image: postgres:13\n    environment:\n      POSTGRES_DB: myapp\n      POSTGRES_USER: user\n      POSTGRES_PASSWORD: password\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    ports:\n      - \"5432:5432\"\n    networks:\n      - backend\n\nvolumes:\n  db_data:\n    driver: local\n\nnetworks:\n  default:\n    driver: bridge\n</code></pre>"},{"location":"user-guide/config-files/#configuration-sections","title":"Configuration Sections","text":""},{"location":"user-guide/config-files/#project-section","title":"Project Section","text":"<p>Defines general project information:</p> <pre><code>project:\n  name: \"project-name\"              # Project name\n  version: \"1.0.0\"                  # Project version\n  description: \"Project description\" # Optional description\n  maintainer: \"your@email.com\"     # Maintainer email\n  tags: [\"web\", \"api\", \"database\"]  # Project tags\n</code></pre>"},{"location":"user-guide/config-files/#services-section","title":"Services Section","text":"<p>Defines project services:</p> <pre><code>services:\n  service-name:\n    image: nginx:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./html:/usr/share/nginx/html\n    networks:\n      - frontend\n    environment:\n      - ENV=production\n    depends_on:\n      - database\n    restart: unless-stopped\n</code></pre>"},{"location":"user-guide/config-files/#volumes-section","title":"Volumes Section","text":"<p>Defines project volumes:</p> <pre><code>volumes:\n  # Named volume\n  app_data:\n    driver: local\n    driver_opts:\n      type: none\n      o: bind\n      device: /host/path\n\n  # Simple volume\n  db_data:\n</code></pre>"},{"location":"user-guide/config-files/#networks-section","title":"Networks Section","text":"<p>Defines project networks:</p> <pre><code>networks:\n  # Default network\n  default:\n    driver: bridge\n\n  # Custom network\n  frontend:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16\n\n  backend:\n    driver: bridge\n    internal: true\n</code></pre>"},{"location":"user-guide/config-files/#docker-pilot-specific-settings","title":"Docker Pilot Specific Settings","text":""},{"location":"user-guide/config-files/#settings-section","title":"Settings Section","text":"<p>Docker Pilot specific configurations:</p> <pre><code>settings:\n  # Log configurations\n  logging:\n    level: info              # debug, info, warn, error\n    format: pretty          # json, text, pretty\n    file: ./logs/pilot.log  # Log file path\n\n  # Performance settings\n  performance:\n    parallel_operations: 4   # Max parallel operations\n    timeout: 30             # Default timeout in seconds\n    retry_attempts: 3       # Retry attempts for failed operations\n\n  # UI preferences\n  ui:\n    theme: default          # UI theme\n    colors: true           # Enable colors\n    animations: true       # Enable animations\n    language: auto         # Language (auto, en, pt-br)\n</code></pre>"},{"location":"user-guide/config-files/#hooks-section","title":"Hooks Section","text":"<p>Defines hooks for events:</p> <pre><code>hooks:\n  # Before starting\n  before_start:\n    - echo \"Preparing to start services...\"\n    - npm run build\n\n  # After starting\n  after_start:\n    - echo \"Services started successfully!\"\n    - curl -f http://localhost:3000/health\n\n  # Before stopping\n  before_stop:\n    - echo \"Saving state before stopping...\"\n    - npm run backup\n\n  # After stopping\n  after_stop:\n    - echo \"Services stopped.\"\n    - docker system prune -f\n</code></pre>"},{"location":"user-guide/config-files/#environments-section","title":"Environments Section","text":"<p>Defines different environments:</p> <pre><code>environments:\n  development:\n    services:\n      api:\n        build: .\n        environment:\n          NODE_ENV: development\n          DEBUG: \"true\"\n        volumes:\n          - .:/app\n          - /app/node_modules\n\n  production:\n    services:\n      api:\n        image: myapp:latest\n        environment:\n          NODE_ENV: production\n          DEBUG: \"false\"\n        restart: always\n</code></pre>"},{"location":"user-guide/config-files/#global-configuration","title":"Global Configuration","text":""},{"location":"user-guide/config-files/#global-configuration-file","title":"Global Configuration File","text":"<p>Located at <code>~/.docker-pilot/config.yml</code>:</p> <pre><code># User global configuration\nuser:\n  name: \"Your Name\"\n  email: \"your@email.com\"\n\npreferences:\n  default_editor: \"code\"\n  telemetry: false\n  auto_update: true\n\ntheme:\n  name: \"default\"\n  colors: true\n  animations: true\n\ndocker:\n  host: \"unix:///var/run/docker.sock\"\n  version: \"auto\"\n\nregistry:\n  default: \"docker.io\"\n  credentials:\n    docker.io:\n      username: \"your-username\"\n      # Password stored securely\n\nplugins:\n  registry: \"https://plugins.docker-pilot.com\"\n  auto_update: true\n  enabled:\n    - backup\n    - monitoring\n\nnotifications:\n  email:\n    enabled: false\n    smtp_host: \"smtp.gmail.com\"\n    smtp_port: 587\n    username: \"your@email.com\"\n\n  slack:\n    enabled: false\n    webhook_url: \"https://hooks.slack.com/...\"\n\n  discord:\n    enabled: false\n    webhook_url: \"https://discord.com/api/webhooks/...\"\n</code></pre>"},{"location":"user-guide/config-files/#environment-files","title":"Environment Files","text":""},{"location":"user-guide/config-files/#env","title":".env","text":"<p>Environment variables file:</p> <pre><code># .env\nNODE_ENV=development\nPORT=3000\nDATABASE_URL=postgresql://user:password@localhost:5432/myapp\nREDIS_URL=redis://localhost:6379\nJWT_SECRET=your-jwt-secret-here\nAPI_KEY=your-api-key-here\n</code></pre>"},{"location":"user-guide/config-files/#envexample","title":".env.example","text":"<p>Environment variables template:</p> <pre><code># .env.example\nNODE_ENV=development\nPORT=3000\nDATABASE_URL=postgresql://user:password@localhost:5432/myapp\nREDIS_URL=redis://localhost:6379\nJWT_SECRET=your-jwt-secret-here\nAPI_KEY=your-api-key-here\n</code></pre>"},{"location":"user-guide/config-files/#cicd-configuration","title":"CI/CD Configuration","text":""},{"location":"user-guide/config-files/#docker-pilotciyml","title":".docker-pilot/ci.yml","text":"<p>CI/CD configuration:</p> <pre><code># .docker-pilot/ci.yml\npipelines:\n  test:\n    stages:\n      - name: \"Test\"\n        commands:\n          - docker-pilot build --no-cache\n          - docker-pilot test\n\n  deploy:\n    stages:\n      - name: \"Build\"\n        commands:\n          - docker-pilot build --production\n      - name: \"Deploy\"\n        commands:\n          - docker-pilot deploy --environment production\n        when:\n          branch: main\n</code></pre>"},{"location":"user-guide/config-files/#configuration-validation","title":"Configuration Validation","text":""},{"location":"user-guide/config-files/#json-schema","title":"JSON Schema","text":"<p>Docker Pilot supports validation via JSON Schema:</p> <pre><code>{\n  \"$schema\": \"https://docker-pilot.dev/schema/config.json\",\n  \"version\": \"1.0\",\n  \"project\": {\n    \"name\": \"my-project\"\n  }\n}\n</code></pre>"},{"location":"user-guide/config-files/#validation-commands","title":"Validation Commands","text":"<pre><code># Validate configuration\ndocker-pilot config validate\n\n# Validate specific file\ndocker-pilot config validate --file docker-pilot.yml\n\n# Show configuration schema\ndocker-pilot config schema\n\n# Test configuration\ndocker-pilot config test\n</code></pre>"},{"location":"user-guide/config-files/#configuration-tips","title":"Configuration Tips","text":""},{"location":"user-guide/config-files/#best-practices","title":"Best Practices","text":"<ol> <li>Use version control: Always version your configuration files</li> <li>Environment separation: Use different files for different environments</li> <li>Secret management: Never commit secrets, use environment variables</li> <li>Documentation: Comment your configuration files</li> <li>Validation: Always validate before deploying</li> </ol>"},{"location":"user-guide/config-files/#common-patterns","title":"Common Patterns","text":"<pre><code># Conditional configurations\nservices:\n  web:\n    image: nginx:${NGINX_VERSION:-latest}\n    environment:\n      - ENV=${NODE_ENV:-development}\n    ports:\n      - \"${WEB_PORT:-80}:80\"\n\n# Service dependencies\nservices:\n  api:\n    depends_on:\n      database:\n        condition: service_healthy\n      redis:\n        condition: service_started\n</code></pre> <p>For more information about specific configuration options, see the commands reference.</p>"},{"location":"user-guide/i18n/","title":"Multi-language Support (i18n)","text":"<p>Docker Pilot supports multiple languages to provide a localized experience for users worldwide.</p>"},{"location":"user-guide/i18n/#supported-languages","title":"Supported Languages","text":"<p>Currently supported languages:</p> <ul> <li>English (en) - Default language</li> <li>Portugu\u00eas (Brasil) (pt-br) - Complete Portuguese translation</li> </ul>"},{"location":"user-guide/i18n/#automatic-language-detection","title":"Automatic Language Detection","text":"<p>Docker Pilot automatically detects your system language on first run:</p> <pre><code># System language detection (Linux/macOS)\necho $LANG\n# pt_BR.UTF-8 \u2192 Portuguese (Brasil)\n# en_US.UTF-8 \u2192 English\n\n# Windows detection\necho $env:LANG\n# Uses system locale settings\n</code></pre>"},{"location":"user-guide/i18n/#language-selection","title":"Language Selection","text":""},{"location":"user-guide/i18n/#first-run","title":"First Run","text":"<p>When you run Docker Pilot for the first time, you'll be prompted to select your language:</p> <pre><code>\ud83c\udf0d Welcome to Docker Pilot!\nPlease choose your language / Por favor, escolha seu idioma:\n\n1. English\n2. Portugu\u00eas (Brasil)\n\nSelect option / Selecione a op\u00e7\u00e3o (1-2):\n</code></pre> <p>This selection is saved to your configuration file and remembered for future runs.</p>"},{"location":"user-guide/i18n/#changing-language","title":"Changing Language","text":"<p>You can change the language at any time using several methods:</p>"},{"location":"user-guide/i18n/#method-1-interactive-menu","title":"Method 1: Interactive Menu","text":"<ol> <li>Start Docker Pilot: <code>docker-pilot</code></li> <li>Navigate to Advanced settings (option 15)</li> <li>Select Change language (option 1)</li> <li>Choose your preferred language</li> <li>The change takes effect immediately</li> </ol>"},{"location":"user-guide/i18n/#method-2-configuration-file","title":"Method 2: Configuration File","text":"<p>Edit your <code>docker-pilot.config.json</code>:</p> <pre><code>{\n  \"projectName\": \"my-project\",\n  \"language\": \"pt-br\",\n  \"services\": {\n    // ...\n  }\n}\n</code></pre>"},{"location":"user-guide/i18n/#method-3-cli-parameter","title":"Method 3: CLI Parameter","text":"<pre><code># Use Portuguese for this session\ndocker-pilot --lang pt-br\n\n# Set language permanently\ndocker-pilot config --set language=pt-br\n</code></pre>"},{"location":"user-guide/i18n/#method-4-environment-variable","title":"Method 4: Environment Variable","text":"<pre><code># Temporary (current session)\nexport DOCKER_PILOT_LANG=pt-br\ndocker-pilot\n\n# Permanent (add to .bashrc/.zshrc)\necho 'export DOCKER_PILOT_LANG=pt-br' &gt;&gt; ~/.bashrc\n</code></pre>"},{"location":"user-guide/i18n/#language-features","title":"Language Features","text":""},{"location":"user-guide/i18n/#complete-interface-translation","title":"Complete Interface Translation","text":"<p>All user-facing text is translated:</p> <ul> <li>\u2705 Interactive Menu: All menu options and messages</li> <li>\u2705 CLI Commands: Help text, error messages, and output</li> <li>\u2705 Status Messages: Success, error, and warning messages</li> <li>\u2705 Configuration: Validation messages and prompts</li> <li>\u2705 Plugin System: Plugin messages and errors</li> </ul>"},{"location":"user-guide/i18n/#context-aware-translations","title":"Context-Aware Translations","text":"<p>Translations include context-specific information:</p> <pre><code>// English\n\"Service {serviceName} started successfully\"\n\"Starting {count} services...\"\n\"Port {port} is already in use\"\n\n// Portuguese (Brasil)\n\"Servi\u00e7o {serviceName} iniciado com sucesso\"\n\"Iniciando {count} servi\u00e7os...\"\n\"Porta {port} j\u00e1 est\u00e1 em uso\"\n</code></pre>"},{"location":"user-guide/i18n/#docker-commands-remain-in-english","title":"Docker Commands Remain in English","text":"<p>Docker-specific commands and output remain in English for consistency:</p> <pre><code># These remain in English regardless of language\ndocker compose up\ndocker compose down\ndocker logs container_name\n</code></pre>"},{"location":"user-guide/i18n/#examples-by-language","title":"Examples by Language","text":""},{"location":"user-guide/i18n/#english-interface","title":"English Interface","text":"<pre><code>============================================================\n\ud83d\udc33 Welcome to MyApp Docker Pilot v2.0! \ud83d\udc33\n============================================================\n\n\ud83d\udcc1 Directory: /path/to/project\n\ud83d\udd27 Services: web, api, database\n\n====================================\n\ud83d\ude80 Basic Commands\n====================================\n1. Quick setup (detect services)\n2. Start all services\n3. Stop all services\n4. Restart all services\n...\n\nChoose your option:\n</code></pre>"},{"location":"user-guide/i18n/#portuguese-brasil-interface","title":"Portuguese (Brasil) Interface","text":"<pre><code>============================================================\n\ud83d\udc33 Bem-vindo ao MyApp Docker Pilot v2.0! \ud83d\udc33\n============================================================\n\n\ud83d\udcc1 Diret\u00f3rio: /path/to/project\n\ud83d\udd27 Servi\u00e7os: web, api, database\n\n====================================\n\ud83d\ude80 Comandos B\u00e1sicos\n====================================\n1. Configura\u00e7\u00e3o r\u00e1pida (detectar servi\u00e7os)\n2. Iniciar todos os servi\u00e7os\n3. Parar todos os servi\u00e7os\n4. Reiniciar todos os servi\u00e7os\n...\n\nDigite sua escolha:\n</code></pre>"},{"location":"user-guide/i18n/#cli-command-examples","title":"CLI Command Examples","text":""},{"location":"user-guide/i18n/#english","title":"English","text":"<pre><code>$ docker-pilot up\n\u2705 Starting services...\n\u2705 Service web started successfully\n\u2705 Service api started successfully\n\u2705 Service database started successfully\n\ud83c\udf89 All services started successfully!\n\n$ docker-pilot status\n\ud83d\udcca Current Service Status:\n\u2705 web: running (healthy)\n\u2705 api: running (healthy)\n\u2705 database: running (healthy)\n</code></pre>"},{"location":"user-guide/i18n/#portuguese-brasil","title":"Portuguese (Brasil)","text":"<pre><code>$ docker-pilot up\n\u2705 Iniciando servi\u00e7os...\n\u2705 Servi\u00e7o web iniciado com sucesso\n\u2705 Servi\u00e7o api iniciado com sucesso\n\u2705 Servi\u00e7o database iniciado com sucesso\n\ud83c\udf89 Todos os servi\u00e7os iniciados com sucesso!\n\n$ docker-pilot status\n\ud83d\udcca Status Atual dos Servi\u00e7os:\n\u2705 web: rodando (saud\u00e1vel)\n\u2705 api: rodando (saud\u00e1vel)\n\u2705 database: rodando (saud\u00e1vel)\n</code></pre>"},{"location":"user-guide/i18n/#error-messages","title":"Error Messages","text":"<p>Error messages are also translated:</p>"},{"location":"user-guide/i18n/#english_1","title":"English","text":"<pre><code>\u274c Error: Docker is not running\n\ud83d\udca1 Please start Docker and try again\n\n\u274c Error: Service 'web' not found\n\ud83d\udca1 Available services: api, database\n\n\u26a0\ufe0f  Warning: Port 8080 is already in use\n\ud83d\udca1 Consider using a different port\n</code></pre>"},{"location":"user-guide/i18n/#portuguese-brasil_1","title":"Portuguese (Brasil)","text":"<pre><code>\u274c Erro: Docker n\u00e3o est\u00e1 rodando\n\ud83d\udca1 Inicie o Docker e tente novamente\n\n\u274c Erro: Servi\u00e7o 'web' n\u00e3o encontrado\n\ud83d\udca1 Servi\u00e7os dispon\u00edveis: api, database\n\n\u26a0\ufe0f  Aviso: Porta 8080 j\u00e1 est\u00e1 em uso\n\ud83d\udca1 Considere usar uma porta diferente\n</code></pre>"},{"location":"user-guide/i18n/#configuration-examples","title":"Configuration Examples","text":""},{"location":"user-guide/i18n/#project-configuration","title":"Project Configuration","text":"<p>Your project's language setting is stored in <code>docker-pilot.config.json</code>:</p> <pre><code>{\n  \"projectName\": \"minha-aplicacao\",\n  \"language\": \"pt-br\",\n  \"dockerCompose\": \"docker compose\",\n  \"services\": {\n    \"web\": {\n      \"port\": 8080,\n      \"healthCheck\": true\n    }\n  }\n}\n</code></pre>"},{"location":"user-guide/i18n/#global-configuration","title":"Global Configuration","text":"<p>You can set a global default language:</p> <pre><code># Set global language preference\nnpm config set docker-pilot:language pt-br\n\n# Or use environment variable\nexport DOCKER_PILOT_LANG=pt-br\n</code></pre>"},{"location":"user-guide/i18n/#plugin-development","title":"Plugin Development","text":"<p>When developing plugins, use the i18n system:</p> <pre><code>// plugin.js\nimport { I18n }  from \"docker-pilot\";\n\nclass MyPlugin {\n  constructor() {\n    this.i18n = new I18n();\n  }\n\n  execute() {\n    console.log(this.i18n.t('plugin.my_message'));\n    console.log(this.i18n.t('plugin.service_count', { count: 3 }));\n  }\n}\n</code></pre> <p>Add translations to your plugin:</p> <pre><code>// translations.js\nmodule.exports = {\n  en: {\n    'plugin.my_message': 'Plugin executed successfully',\n    'plugin.service_count': 'Found {count} services'\n  },\n  'pt-br': {\n    'plugin.my_message': 'Plugin executado com sucesso',\n    'plugin.service_count': 'Encontrados {count} servi\u00e7os'\n  }\n};\n</code></pre>"},{"location":"user-guide/i18n/#language-detection-logic","title":"Language Detection Logic","text":"<p>Docker Pilot uses the following priority order for language detection:</p> <ol> <li>CLI Parameter: <code>--lang pt-br</code></li> <li>Environment Variable: <code>DOCKER_PILOT_LANG=pt-br</code></li> <li>Configuration File: <code>language: \"pt-br\"</code></li> <li>System Language: <code>$LANG</code>, <code>$LANGUAGE</code>, or Windows locale</li> <li>Default: <code>en</code> (English)</li> </ol>"},{"location":"user-guide/i18n/#contributing-translations","title":"Contributing Translations","text":""},{"location":"user-guide/i18n/#adding-a-new-language","title":"Adding a New Language","text":"<p>To add support for a new language:</p> <ol> <li>Fork the repository</li> <li>Add language code to supported languages in <code>src/utils/i18n.ts</code></li> <li>Create translation file with all required keys</li> <li>Test thoroughly with interactive menu and CLI</li> <li>Submit pull request with examples and documentation</li> </ol>"},{"location":"user-guide/i18n/#translation-guidelines","title":"Translation Guidelines","text":"<ul> <li>Keep it natural: Translations should sound natural to native speakers</li> <li>Maintain context: Preserve the meaning and context of the original text</li> <li>Use consistent terminology: Keep Docker and technical terms consistent</li> <li>Test extensively: Test both interactive menu and CLI commands</li> <li>Include examples: Provide examples of the translated interface</li> </ul>"},{"location":"user-guide/i18n/#required-translation-keys","title":"Required Translation Keys","text":"<p>All translations must include these key categories:</p> <ul> <li><code>docker.*</code> - Docker-related messages</li> <li><code>menu.*</code> - Interactive menu items</li> <li><code>command.*</code> - Command names and descriptions</li> <li><code>service.*</code> - Service management messages</li> <li><code>cli.*</code> - CLI help and error messages</li> <li><code>plugin.*</code> - Plugin system messages</li> <li><code>validation.*</code> - Configuration validation messages</li> </ul>"},{"location":"user-guide/i18n/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/i18n/#language-not-changing","title":"Language Not Changing","text":"<pre><code># Check current language\ndocker-pilot config --show | grep language\n\n# Force language change\ndocker-pilot config --set language=pt-br\n\n# Verify change\ndocker-pilot config --show | grep language\n</code></pre>"},{"location":"user-guide/i18n/#mixed-language-output","title":"Mixed Language Output","text":"<p>If you see mixed languages:</p> <ol> <li>Check configuration: Ensure language is set correctly</li> <li>Clear cache: Some messages might be cached</li> <li>Restart terminal: Environment variables might need refresh</li> <li>Update Docker Pilot: Ensure you have the latest version</li> </ol>"},{"location":"user-guide/i18n/#missing-translations","title":"Missing Translations","text":"<p>If you see English text in non-English mode:</p> <ol> <li>Check version: Ensure you have the latest version</li> <li>Report issue: Missing translations should be reported</li> <li>Contribute: Help by contributing the missing translation</li> </ol>"},{"location":"user-guide/i18n/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/i18n/#for-users","title":"For Users","text":"<ul> <li>Set language once: Configure your preferred language in the project</li> <li>Use consistent language: Keep the same language across your team</li> <li>Report issues: Help improve translations by reporting problems</li> </ul>"},{"location":"user-guide/i18n/#for-teams","title":"For Teams","text":"<ul> <li>Document language choice: Include language preference in project README</li> <li>Consistent environment: Use the same language across development, staging, and production</li> <li>Training: Ensure all team members know how to change language if needed</li> </ul>"},{"location":"user-guide/i18n/#for-plugin-developers","title":"For Plugin Developers","text":"<ul> <li>Use i18n system: Always use the translation system for user-facing messages</li> <li>Provide translations: Include translations for all supported languages</li> <li>Test multiple languages: Test your plugin in different languages</li> </ul>"},{"location":"user-guide/i18n/#whats-next","title":"What's Next?","text":"<ul> <li>\ud83c\udfae Learn about the Interactive Menu</li> <li>\ud83d\udd27 Explore Configuration Files</li> <li>\ud83d\ude80 Try Advanced Features</li> <li>\ud83e\udd1d Contribute translations</li> </ul> <p>Language Support</p> <p>Docker Pilot's multi-language support makes it accessible to developers worldwide. The interface adapts to your language while keeping Docker commands standard for consistency across different environments.</p>"},{"location":"user-guide/interactive-menu/","title":"Interactive Menu","text":"<p>Docker Pilot offers an intuitive interactive menu that allows you to easily navigate through system functionalities without the need to memorize commands. The menu now includes enhanced docker-compose file management with recursive discovery capabilities.</p>"},{"location":"user-guide/interactive-menu/#overview","title":"Overview","text":"<p>The interactive menu is the primary interface of Docker Pilot, presenting all available options in an organized and user-friendly manner. It automatically detects docker-compose files throughout your project directory structure and provides comprehensive management tools.</p>"},{"location":"user-guide/interactive-menu/#accessing-the-menu","title":"Accessing the Menu","text":"<p>To access the interactive menu, run Docker Pilot without arguments:</p> <pre><code>docker-pilot\n</code></pre> <p>Or use the specific command:</p> <pre><code>docker-pilot menu\n</code></pre>"},{"location":"user-guide/interactive-menu/#menu-structure","title":"Menu Structure","text":""},{"location":"user-guide/interactive-menu/#main-menu","title":"Main Menu","text":"<p>The main menu presents the following options organized by categories:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Docker Pilot v2.0.0 \ud83d\udc33                    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \ud83d\ude80 Basic Commands                                       \u2502\n\u2502  1. Quick setup (detect services)                      \u2502\n\u2502  2. Start all services                                  \u2502\n\u2502  3. Stop all services                                   \u2502\n\u2502  4. Restart all services                                \u2502\n\u2502  5. Rebuild and start all services                      \u2502\n\u2502  6. View logs of all services                           \u2502\n\u2502  7. View services status                                \u2502\n\u2502                                                         \u2502\n\u2502 \ud83d\udee0\ufe0f Advanced Commands                                    \u2502\n\u2502  8. Open shell in service                               \u2502\n\u2502  9. Check services health                               \u2502\n\u2502 10. Monitor in real time                                \u2502\n\u2502 11. Update all images                                   \u2502\n\u2502                                                         \u2502\n\u2502 \ud83d\udcc4 Compose Files Management                             \u2502\n\u2502 12. List docker-compose files                          \u2502\n\u2502 13. Find docker-compose files                          \u2502\n\u2502 14. Analyze docker-compose file                        \u2502\n\u2502 15. Validate docker-compose file                       \u2502\n\u2502 16. List services from compose                         \u2502\n\u2502                                                         \u2502\n\u2502 \u2699\ufe0f Maintenance                                          \u2502\n\u2502 17. Clean unused resources                              \u2502\n\u2502 18. Deep clean                                          \u2502\n\u2502 19. Show configuration                                  \u2502\n\u2502 20. Advanced settings                                   \u2502\n\u2502                                                         \u2502\n\u2502 \ud83d\udd27 [Service-specific commands...]                       \u2502\n\u2502                                                         \u2502\n\u2502  0. Exit                                                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"user-guide/interactive-menu/#1-basic-commands","title":"1. Basic Commands","text":"<p>Essential Docker operations for quick project management:</p> <ul> <li>Quick setup: Automatically detect and configure services from docker-compose files</li> <li>Start all services: Launch all configured services</li> <li>Stop all services: Stop all running services</li> <li>Restart all services: Restart all services</li> <li>Rebuild and start: Rebuild images and start services</li> <li>View logs: Display logs from all services</li> <li>Service status: Show detailed status of all services</li> </ul>"},{"location":"user-guide/interactive-menu/#2-advanced-commands","title":"2. Advanced Commands","text":"<p>Advanced operations for development and troubleshooting:</p> <ul> <li>Open shell: Interactive shell access to any service container</li> <li>Health check: Comprehensive health status of all services</li> <li>Real-time monitor: Live monitoring with automatic refresh</li> <li>Update images: Pull latest images and rebuild</li> </ul>"},{"location":"user-guide/interactive-menu/#3-compose-files-management","title":"3. Compose Files Management","text":"<p>New Enhanced Feature: Comprehensive docker-compose file management with recursive discovery:</p> <ul> <li>List docker-compose files: Recursively discover and list all docker-compose files in the project</li> <li>Shows file size, modification date, and service count</li> <li>Identifies main files vs. environment-specific variants</li> <li>Displays relative paths and directory structure</li> <li> <p>Supports variants like <code>docker-compose.dev.yml</code>, <code>docker-compose.prod.yml</code></p> </li> <li> <p>Find docker-compose files: Search for compose files in specific directories</p> </li> <li>Configurable search depth (default: 6 levels)</li> <li>Includes environment variants and overrides</li> <li> <p>Excludes empty or malformed files</p> </li> <li> <p>Analyze docker-compose file: Detailed analysis of compose file structure</p> </li> <li>Service configuration details (images, ports, volumes)</li> <li>Network and volume definitions</li> <li>Environment variables and dependencies</li> <li>Health check configurations</li> <li> <p>Build contexts and Dockerfile references</p> </li> <li> <p>Validate docker-compose file: Syntax and structure validation</p> </li> <li>YAML syntax validation</li> <li>Docker Compose schema compliance</li> <li>Service dependency validation</li> <li>Port conflict detection</li> <li> <p>Missing image/build validation</p> </li> <li> <p>List services from compose: Extract and display all services defined in compose files</p> </li> <li>Service names and descriptions</li> <li>Port mappings and exposed services</li> <li>Dependency relationships</li> </ul>"},{"location":"user-guide/interactive-menu/#4-maintenance","title":"4. Maintenance","text":"<p>System maintenance and configuration:</p> <ul> <li>Clean unused resources: Remove dangling images, stopped containers</li> <li>Deep clean: Comprehensive cleanup including volumes and networks</li> <li>Show configuration: Display current Docker Pilot configuration</li> <li>Advanced settings: Access language settings, log levels, and development options</li> </ul>"},{"location":"user-guide/interactive-menu/#automatic-project-detection","title":"Automatic Project Detection","text":""},{"location":"user-guide/interactive-menu/#recursive-docker-compose-discovery","title":"Recursive Docker Compose Discovery","text":"<p>When Docker Pilot starts, it automatically performs a recursive search for docker-compose files throughout your project directory structure:</p> <pre><code>\ud83d\udd0d Searching for docker-compose files recursively...\n\ud83d\udcc1 Search depth: 6 levels\n\nFound 3 docker-compose files:\n\n1. docker-compose.yml \ud83c\udfaf\ud83d\udcc1\n   \ud83d\udccf 2.1 KB | \ud83d\udcc5 22/06/2025\n   \ud83d\udee0\ufe0f 4 services: web, api, database, redis\n\n2. backend/docker-compose.dev.yml (development) \ud83d\udcc2(2)\n   \ud83d\udccf 1.8 KB | \ud83d\udcc5 21/06/2025\n   \ud83d\udee0\ufe0f 2 services: api-dev, database-dev\n\n3. frontend/docker-compose.override.yml \ud83d\udcc2(2)\n   \ud83d\udccf 0.9 KB | \ud83d\udcc5 20/06/2025\n   \ud83d\udee0\ufe0f 1 services: web-dev\n</code></pre>"},{"location":"user-guide/interactive-menu/#smart-file-prioritization","title":"Smart File Prioritization","text":"<p>Docker Pilot uses intelligent prioritization to select the most appropriate compose file:</p> <ol> <li>Main files (<code>docker-compose.yml</code>, <code>compose.yml</code>) get highest priority \ud83c\udfaf</li> <li>Root directory files are preferred over subdirectory files \ud83d\udcc1</li> <li>Larger files with more services are prioritized</li> <li>Recently modified files get preference</li> <li>Environment variants are clearly identified</li> </ol>"},{"location":"user-guide/interactive-menu/#multi-file-project-support","title":"Multi-File Project Support","text":"<p>For projects with multiple compose files, Docker Pilot allows you to:</p> <ul> <li>Select specific file: Choose which compose file to use for operations</li> <li>View file details: See comprehensive information about each file</li> <li>Switch between files: Change active compose file during session</li> <li>Validate all files: Check syntax and structure of all discovered files</li> </ul>"},{"location":"user-guide/interactive-menu/#smart-file-selection","title":"Smart File Selection","text":"<p>When multiple compose files are found, the menu provides an interactive selection:</p> <pre><code>\ud83d\udcc4 Multiple docker-compose files found. Please select:\n\n1. ./docker-compose.yml (4 services: web, api, db, redis) \ud83c\udfaf\ud83d\udcc1\n2. ./backend/docker-compose.dev.yml (development) \ud83d\udcc2(2)\n3. ./frontend/compose.override.yml \ud83d\udcc2(2)\n\nEnter your choice (1-3, or Enter for default):\n</code></pre>"},{"location":"user-guide/interactive-menu/#real-time-information-display","title":"Real-time Information Display","text":"<p>Each menu option shows contextual information:</p> <ul> <li>Service count and names</li> <li>File size and modification date</li> <li>Environment type (dev, prod, test, etc.)</li> <li>Directory depth indicator</li> <li>Main file indicator \ud83c\udfaf</li> </ul>"},{"location":"user-guide/interactive-menu/#navigation","title":"Navigation","text":""},{"location":"user-guide/interactive-menu/#navigation-keys","title":"Navigation Keys","text":"<ul> <li>\u2191/\u2193: Navigate between options</li> <li>Enter: Select option</li> <li>Esc: Return to previous menu</li> <li>q: Exit program</li> <li>h: Mostrar ajuda contextual</li> </ul>"},{"location":"user-guide/interactive-menu/#atalhos","title":"Atalhos","text":"<ul> <li>Ctrl+C: Sair imediatamente</li> <li>Ctrl+R: Recarregar menu</li> <li>Ctrl+L: Limpar tela</li> <li>F1: Ajuda</li> <li>F5: Atualizar dados</li> </ul>"},{"location":"user-guide/interactive-menu/#personalizacao","title":"Personaliza\u00e7\u00e3o","text":""},{"location":"user-guide/interactive-menu/#temas","title":"Temas","text":"<p>O menu suporta diferentes temas visuais:</p> <pre><code># config/ui.yml\ntheme:\n  name: \"default\"  # default, dark, light, minimal\n  colors:\n    primary: \"#0066cc\"\n    secondary: \"#6c757d\"\n    success: \"#28a745\"\n    warning: \"#ffc107\"\n    error: \"#dc3545\"\n</code></pre>"},{"location":"user-guide/interactive-menu/#layout","title":"Layout","text":"<p>Configure o layout do menu:</p> <pre><code># config/ui.yml\nlayout:\n  width: 80          # Largura em caracteres\n  height: 25         # Altura em linhas\n  border: true       # Mostrar bordas\n  icons: true        # Mostrar \u00edcones\n  colors: true       # Usar cores\n</code></pre>"},{"location":"user-guide/interactive-menu/#modo-avancado","title":"Modo Avan\u00e7ado","text":""},{"location":"user-guide/interactive-menu/#filtros-rapidos","title":"Filtros R\u00e1pidos","text":"<p>Use filtros para encontrar op\u00e7\u00f5es rapidamente:</p> <ul> <li>Digite <code>/</code> seguido do termo de busca</li> <li>Use <code>*</code> como coringa</li> <li>Pressione <code>Tab</code> para autocompletar</li> </ul>"},{"location":"user-guide/interactive-menu/#historico-de-comandos","title":"Hist\u00f3rico de Comandos","text":"<p>O menu mant\u00e9m hist\u00f3rico das \u00faltimas a\u00e7\u00f5es:</p> <ul> <li>Ctrl+H: Mostrar hist\u00f3rico</li> <li>\u2191/\u2193: Navegar no hist\u00f3rico</li> <li>Enter: Executar comando do hist\u00f3rico</li> </ul>"},{"location":"user-guide/interactive-menu/#macros","title":"Macros","text":"<p>Configure macros para a\u00e7\u00f5es repetitivas:</p> <pre><code># config/macros.yml\nmacros:\n  start_dev:\n    name: \"Iniciar Ambiente de Desenvolvimento\"\n    commands:\n      - \"start database\"\n      - \"start api\"\n      - \"start frontend\"\n\n  deploy_prod:\n    name: \"Deploy para Produ\u00e7\u00e3o\"\n    commands:\n      - \"build production\"\n      - \"push images\"\n      - \"deploy stack\"\n</code></pre>"},{"location":"user-guide/interactive-menu/#acessibilidade","title":"Acessibilidade","text":""},{"location":"user-guide/interactive-menu/#suporte-a-leitores-de-tela","title":"Suporte a Leitores de Tela","text":"<p>O menu \u00e9 compat\u00edvel com leitores de tela:</p> <ul> <li>Descri\u00e7\u00f5es detalhadas de cada op\u00e7\u00e3o</li> <li>Navega\u00e7\u00e3o por teclas</li> <li>An\u00fancios de mudan\u00e7as de estado</li> </ul>"},{"location":"user-guide/interactive-menu/#alto-contraste","title":"Alto Contraste","text":"<p>Ative o modo alto contraste:</p> <pre><code>docker-pilot --high-contrast\n</code></pre>"},{"location":"user-guide/interactive-menu/#configuracao-de-fonte","title":"Configura\u00e7\u00e3o de Fonte","text":"<p>Ajuste o tamanho da fonte no terminal:</p> <pre><code># config/accessibility.yml\naccessibility:\n  high_contrast: false\n  large_font: false\n  screen_reader: false\n  keyboard_only: false\n</code></pre>"},{"location":"user-guide/interactive-menu/#resolucao-de-problemas","title":"Resolu\u00e7\u00e3o de Problemas","text":""},{"location":"user-guide/interactive-menu/#menu-nao-carrega","title":"Menu N\u00e3o Carrega","text":"<p>Se o menu n\u00e3o carregar corretamente:</p> <ol> <li> <p>Verifique a configura\u00e7\u00e3o:    <pre><code>docker-pilot config validate\n</code></pre></p> </li> <li> <p>Limpe o cache:    <pre><code>docker-pilot cache clear\n</code></pre></p> </li> <li> <p>Reinicie com configura\u00e7\u00e3o padr\u00e3o:    <pre><code>docker-pilot --reset-config\n</code></pre></p> </li> </ol>"},{"location":"user-guide/interactive-menu/#caracteres-especiais","title":"Caracteres Especiais","text":"<p>Se os caracteres especiais n\u00e3o aparecem corretamente:</p> <ol> <li> <p>Configure a codifica\u00e7\u00e3o do terminal:    <pre><code>chcp 65001  # Windows\nexport LANG=pt_BR.UTF-8  # Linux/Mac\n</code></pre></p> </li> <li> <p>Use o modo compatibilidade:    <pre><code>docker-pilot --ascii-only\n</code></pre></p> </li> </ol>"},{"location":"user-guide/interactive-menu/#performance","title":"Performance","text":"<p>Para melhorar a performance do menu:</p> <pre><code># config/performance.yml\nperformance:\n  cache_menu: true\n  lazy_load: true\n  animation: false\n  refresh_interval: 5000  # ms\n</code></pre>"},{"location":"user-guide/interactive-menu/#integracao-com-ides","title":"Integra\u00e7\u00e3o com IDEs","text":""},{"location":"user-guide/interactive-menu/#visual-studio-code","title":"Visual Studio Code","text":"<p>Instale a extens\u00e3o Docker Pilot para VS Code:</p> <pre><code>code --install-extension docker-pilot.vscode-extension\n</code></pre>"},{"location":"user-guide/interactive-menu/#intellij-idea","title":"IntelliJ IDEA","text":"<p>Configure o plugin Docker Pilot:</p> <ol> <li>V\u00e1 em File &gt; Settings &gt; Plugins</li> <li>Procure por \"Docker Pilot\"</li> <li>Instale e configure</li> </ol>"},{"location":"user-guide/interactive-menu/#scripts-e-automacao","title":"Scripts e Automa\u00e7\u00e3o","text":""},{"location":"user-guide/interactive-menu/#usando-comandos-via-cli","title":"Usando Comandos via CLI","text":"<p>Os novos recursos de gerenciamento de compose tamb\u00e9m est\u00e3o dispon\u00edveis via linha de comando:</p> <pre><code># Listar todos os arquivos docker-compose recursivamente\ndocker-pilot compose list --variants\n\n# Buscar arquivos compose em diret\u00f3rio espec\u00edfico\ndocker-pilot compose find /path/to/project\n\n# Analisar arquivo compose espec\u00edfico\ndocker-pilot compose analyze docker-compose.yml\n\n# Validar todos os arquivos compose encontrados\ndocker-pilot compose validate docker-compose.dev.yml\n\n# Listar servi\u00e7os de um arquivo compose\ndocker-pilot compose services\n\n# Buscar com profundidade personalizada\ndocker-pilot compose list --depth 8\n</code></pre>"},{"location":"user-guide/interactive-menu/#automacao-de-menu","title":"Automa\u00e7\u00e3o de Menu","text":"<p>Execute op\u00e7\u00f5es do menu via script:</p> <pre><code># Executar op\u00e7\u00e3o espec\u00edfica\ndocker-pilot menu --option=\"1.1\"  # Listar servi\u00e7os\n\n# Executar sequ\u00eancia de op\u00e7\u00f5es\ndocker-pilot menu --sequence=\"1,2,3\"\n\n# Executar macro\ndocker-pilot menu --macro=\"start_dev\"\n</code></pre>"},{"location":"user-guide/interactive-menu/#integracao-com-cicd","title":"Integra\u00e7\u00e3o com CI/CD","text":"<p>Use o menu em pipelines de CI/CD:</p> <pre><code># .github/workflows/deploy.yml\n- name: Deploy services\n  run: |    docker-pilot menu --option=\"deploy\" --non-interactive\n</code></pre>"},{"location":"user-guide/interactive-menu/#recursos-avancados-do-docker-pilot-20","title":"Recursos Avan\u00e7ados do Docker Pilot 2.0","text":""},{"location":"user-guide/interactive-menu/#deteccao-inteligente-de-projetos","title":"Detec\u00e7\u00e3o Inteligente de Projetos","text":"<p>O Docker Pilot 2.0 introduz detec\u00e7\u00e3o inteligente que:</p> <ul> <li>Busca recursiva: Procura arquivos docker-compose em at\u00e9 6 n\u00edveis de profundidade</li> <li>Prioriza\u00e7\u00e3o inteligente: Identifica automaticamente o arquivo principal do projeto</li> <li>Suporte a variantes: Reconhece arquivos de desenvolvimento, produ\u00e7\u00e3o e teste</li> <li>An\u00e1lise detalhada: Extrai informa\u00e7\u00f5es sobre servi\u00e7os, portas e depend\u00eancias</li> </ul>"},{"location":"user-guide/interactive-menu/#sistema-de-i18n-completo","title":"Sistema de i18n Completo","text":"<p>Interface totalmente traduzida com suporte a:</p> <ul> <li>Portugu\u00eas (Brasil): Tradu\u00e7\u00e3o completa de todos os menus e mensagens</li> <li>English: Interface em ingl\u00eas para usu\u00e1rios internacionais</li> <li>Troca din\u00e2mica: Altere o idioma sem reiniciar o sistema</li> <li>Mensagens contextuais: Todas as mensagens incluem contexto relevante</li> </ul>"},{"location":"user-guide/interactive-menu/#performance-otimizada","title":"Performance Otimizada","text":"<p>Melhorias significativas de performance:</p> <ul> <li>Cache inteligente: Reutiliza\u00e7\u00e3o de resultados de busca</li> <li>Busca ass\u00edncrona: Opera\u00e7\u00f5es n\u00e3o bloqueiam a interface</li> <li>Carregamento lazy: Informa\u00e7\u00f5es carregadas sob demanda</li> <li>Formata\u00e7\u00e3o otimizada: Exibi\u00e7\u00e3o r\u00e1pida de informa\u00e7\u00f5es de arquivos</li> </ul>"},{"location":"user-guide/interactive-menu/#gerenciamento-avancado-de-arquivos","title":"Gerenciamento Avan\u00e7ado de Arquivos","text":"<p>Sistema robusto de gerenciamento de compose files:</p> <ul> <li>An\u00e1lise estrutural: Valida\u00e7\u00e3o completa da estrutura YAML</li> <li>Detec\u00e7\u00e3o de conflitos: Identifica conflitos de portas e depend\u00eancias</li> <li>Informa\u00e7\u00f5es detalhadas: Tamanho, data de modifica\u00e7\u00e3o, servi\u00e7os</li> <li>Valida\u00e7\u00e3o em tempo real: Verifica\u00e7\u00e3o de sintaxe e estrutura</li> </ul>"},{"location":"user-guide/interactive-menu/#contribuindo","title":"Contribuindo","text":"<p>Para contribuir com melhorias no menu interativo:</p> <ol> <li>Fork o reposit\u00f3rio</li> <li>Crie uma branch para sua feature</li> <li>Fa\u00e7a suas altera\u00e7\u00f5es</li> <li>Teste a interface</li> <li>Envie um pull request</li> </ol>"},{"location":"user-guide/interactive-menu/#testando-alteracoes","title":"Testando Altera\u00e7\u00f5es","text":"<p>Execute os testes de interface:</p> <pre><code>npm run test:ui\nnpm run test:menu\nnpm run test:accessibility\n</code></pre>"},{"location":"user-guide/interactive-menu/#veja-tambem","title":"Veja Tamb\u00e9m","text":"<ul> <li>Comandos CLI - Refer\u00eancia completa de comandos, incluindo <code>compose</code></li> <li>Configura\u00e7\u00e3o - Como configurar detec\u00e7\u00e3o de arquivos</li> <li>Gerenciamento de Arquivos Compose - Recursos avan\u00e7ados de compose</li> <li>Internacionaliza\u00e7\u00e3o - Configura\u00e7\u00e3o de idiomas e localiza\u00e7\u00e3o</li> <li>Plugins - Extens\u00f5es e personaliza\u00e7\u00f5es</li> <li>Arquitetura - Como funciona a detec\u00e7\u00e3o recursiva</li> </ul>"}]}